module UVMHS.Lib.Window where

import UVMHS.Core

import UVMHS.Lib.Pretty

-------------
-- WindowL --
-------------

data WindowL i a =
    ZerWindowL a
  | OneWindowL ùîπ a i a
  deriving (Eq,Ord,Show)

eWindowL ‚à∑ a ‚Üí WindowL i a
eWindowL = ZerWindowL

iWindowL ‚à∑ (Null a) ‚áí i ‚Üí WindowL i a
iWindowL i = OneWindowL False null i null

overflowL ‚à∑ WindowL i a ‚Üí ùîπ
overflowL (ZerWindowL _) = False
overflowL (OneWindowL o _ _ _) = o

instance (Null a) ‚áí Null (WindowL i a) where
  null = ZerWindowL null
instance (Append a) ‚áí Append (WindowL i a) where
  ZerWindowL x ‚ß∫ ZerWindowL y = ZerWindowL $ x ‚ß∫ y
  ZerWindowL x ‚ß∫ OneWindowL o y i z = OneWindowL o (x ‚ß∫ y) i z
  OneWindowL True x i y ‚ß∫ _ = OneWindowL True x i y
  OneWindowL False x i y ‚ß∫ ZerWindowL z = OneWindowL False x i $ y ‚ß∫ z
  OneWindowL False x i y ‚ß∫ OneWindowL _ z _ _ = OneWindowL True x i $ y ‚ß∫ z
instance (Monoid a) ‚áí Monoid (WindowL i a)

instance ToIter a (WindowL a a) where
  iter (ZerWindowL x) = single x
  iter (OneWindowL _ x i y) = iter [x,i,y]

mapWindowL ‚à∑ (i ‚Üí j) ‚Üí (a ‚Üí b) ‚Üí WindowL i a ‚Üí WindowL j b
mapWindowL _ f (ZerWindowL x) = ZerWindowL $ f x
mapWindowL g f (OneWindowL o x i y) = OneWindowL o (f x) (g i) $ f y

-------------
-- WindowR --
-------------

data WindowR i a =
    ZerWindowR a
  | OneWindowR ùîπ a i a
  deriving (Eq,Ord,Show)

eWindowR ‚à∑ a ‚Üí WindowR i a
eWindowR = ZerWindowR

iWindowR ‚à∑ (Null a) ‚áí i ‚Üí WindowR i a
iWindowR i = OneWindowR False null i null

overflowR ‚à∑ WindowR i a ‚Üí ùîπ
overflowR (ZerWindowR _) = False
overflowR (OneWindowR o _ _ _) = o

instance (Null a) ‚áí Null (WindowR i a) where
  null = ZerWindowR null
instance (Append a) ‚áí Append (WindowR i a) where
  ZerWindowR x ‚ß∫ ZerWindowR y = ZerWindowR $ x ‚ß∫ y
  OneWindowR o x i y ‚ß∫ ZerWindowR z = OneWindowR o x i $ y ‚ß∫ z
  _ ‚ß∫ OneWindowR True x i y = OneWindowR True x i y
  ZerWindowR x ‚ß∫ OneWindowR False y i z = OneWindowR False (x ‚ß∫ y) i z
  OneWindowR _ _ _ x ‚ß∫ OneWindowR False y i z = OneWindowR True (x ‚ß∫ y) i z
instance (Monoid a) ‚áí Monoid (WindowR i a)

instance ToIter a (WindowR a a) where
  iter (ZerWindowR x) = single x
  iter (OneWindowR _ x i y) = iter [x,i,y]

mapWindowR ‚à∑ (i ‚Üí j) ‚Üí (a ‚Üí b) ‚Üí WindowR i a ‚Üí WindowR j b
mapWindowR _ f (ZerWindowR x) = ZerWindowR $ f x
mapWindowR g f (OneWindowR o x i y) = OneWindowR o (f x) (g i) $ f y

makePrettySum ''WindowL
makePrettySum ''WindowR

-- RENDER --

renderWindowL ‚à∑ WindowL Doc Doc ‚Üí Doc
renderWindowL dL
  | overflowL dL = ppVertical
      [ concat dL
      , ppFormat (formats [BG grayLight]) $ ppString "‚Ä¶"
      ]
  | otherwise = concat dL

renderWindowR ‚à∑ WindowR Doc Doc ‚Üí Doc
renderWindowR dR
  | overflowR dR = ppVertical
      [ ppFormat (formats [BG grayLight]) $ ppString "‚Ä¶"
      , concat dR
      ]
  | otherwise = concat dR

-- import UVMHS.Core

-- ------------
-- -- Swivel --
-- ------------
--
-- swivelL ‚à∑ ùêø a ‚Üí a ‚Üí a ‚àß ùêø a
-- swivelL Nil x = x :* Nil
-- swivelL (x :& xs) y =
--   let x' :* xs' = swivelL xs y
--   in x :* (x' :& xs')
--
-- swivelR ‚à∑ a ‚Üí ùêø a ‚Üí ùêø a ‚àß a
-- swivelR x Nil = Nil :* x
-- swivelR x (y :& xs) =
--   let xs' :* x' = swivelR y xs
--   in (x :& xs') :* x'
--
-- iswivelL ‚à∑ ùêø (a ‚àß i) ‚Üí a ‚Üí a ‚àß ùêø (i ‚àß a)
-- iswivelL Nil x = x :* Nil
-- iswivelL ((x :* i) :& xis) y =
--   let x' :* ixs = iswivelL xis y
--   in x :* ((i :* x') :& ixs)
--
-- iswivelR ‚à∑ a ‚Üí ùêø (i ‚àß a) ‚Üí ùêø (a ‚àß i) ‚àß a
-- iswivelR x Nil = Nil :* x
-- iswivelR x ((i :* y) :& ixs) =
--   let xis :* x' = iswivelR y ixs
--   in ((x :* i) :& xis) :* x'
--
-- ------------
-- -- Window --
-- ------------
--
-- data Window i a =
--     WindowE a
--   | WindowS ‚Ñï64 a i (ùêº (a ‚àß i)) a
--
-- windowI ‚à∑ (Null a) ‚áí i ‚Üí Window i a
-- windowI i = WindowS one null i null null
--
-- instance (Null a) ‚áí Null (Window i a) where null = WindowE null
-- instance (Append a) ‚áí Append (Window i a) where
--   WindowE x‚ÇÅ ‚ß∫ WindowE x‚ÇÇ = WindowE $ x‚ÇÅ ‚ß∫ x‚ÇÇ
--   WindowE x‚ÇÅ ‚ß∫ WindowS n x‚ÇÇ‚ÇÅ i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ = WindowS n (x‚ÇÅ ‚ß∫ x‚ÇÇ‚ÇÅ) i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ
--   WindowS n x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ x‚ÇÅ‚ÇÇ ‚ß∫ WindowE x‚ÇÇ = WindowS n x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ $ x‚ÇÅ‚ÇÇ ‚ß∫ x‚ÇÇ
--   WindowS n‚ÇÅ x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ x‚ÇÅ‚ÇÇ ‚ß∫ WindowS n‚ÇÇ x‚ÇÇ‚ÇÅ i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ =
--     let xis' = xis‚ÇÅ ‚ß∫ single ((x‚ÇÅ‚ÇÅ ‚ß∫ x‚ÇÇ‚ÇÅ) :* i‚ÇÇ) ‚ß∫ xis‚ÇÇ
--     in WindowS (n‚ÇÅ + n‚ÇÇ) x‚ÇÅ‚ÇÅ i‚ÇÅ xis' x‚ÇÇ‚ÇÇ
-- instance (Monoid a) ‚áí Monoid (Window i a)
--
-- -------------
-- -- FWindow --
-- -------------
--
-- windowWidth ‚à∑ ‚Ñï64
-- windowWidth = ùïü64 2
--
-- data FWindow i a =
--     FWindowE a
--   | FWindowS ‚Ñï64 a i (ùêø (a ‚àß i)) a
--
-- fwindowI ‚à∑ (Null a) ‚áí i ‚Üí FWindow i a
-- fwindowI i = FWindowS one null i null null
--
-- instance (Null a) ‚áí Null (FWindow i a) where null = FWindowE null
-- instance (Append a) ‚áí Append (FWindow i a) where
--   FWindowE x‚ÇÅ ‚ß∫ FWindowE x‚ÇÇ = FWindowE $ x‚ÇÅ ‚ß∫ x‚ÇÇ
--   FWindowE x‚ÇÅ ‚ß∫ FWindowS n x‚ÇÇ‚ÇÅ i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ = FWindowS n (x‚ÇÅ ‚ß∫ x‚ÇÇ‚ÇÅ) i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ
--   FWindowS n x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ x‚ÇÅ‚ÇÇ ‚ß∫ FWindowE x‚ÇÇ = FWindowS n x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ $ x‚ÇÅ‚ÇÇ ‚ß∫ x‚ÇÇ
--   FWindowS n‚ÇÅ x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ x‚ÇÅ‚ÇÇ ‚ß∫ FWindowS n‚ÇÇ x‚ÇÇ‚ÇÅ i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ =
--     | n‚ÇÇ ‚â° windowWidth + 1 = FWindowS n‚ÇÇ (x‚ÇÅ‚ÇÇ ‚ß∫ x‚ÇÇ‚ÇÅ) i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ
--     let n = n‚ÇÅ + n‚ÇÇ
--     in case n > (windowWidth + one) of
--       True ‚Üí
--         let xis :* xi = swivelR (x‚ÇÅ‚ÇÅ :* i‚ÇÅ) $ xis‚ÇÅ ‚ß∫ ((x‚ÇÅ‚ÇÇ ‚ß∫ x‚ÇÇ‚ÇÅ) :* i‚ÇÇ) :& xis‚ÇÇ
--             (x' :* i') :* xis' = swivelL (lastN windowWidth xis) xi
--         in FWindowS (windowWidth + one) x' i' xis' x‚ÇÇ‚ÇÇ
--       False ‚Üí
--         let xis = xis‚ÇÅ ‚ß∫ ((x‚ÇÅ‚ÇÇ ‚ß∫ x‚ÇÇ‚ÇÅ) :* i‚ÇÇ) :& xis‚ÇÇ
--         in FWindowS n x‚ÇÅ‚ÇÅ i‚ÇÅ xis x‚ÇÇ‚ÇÇ
-- instance (Monoid a) ‚áí Monoid (FWindow i a)
--
-- data LWindow i a =
--     LWindowE a
--   | LWindowS ‚Ñï64 a i (ùêº (a ‚àß i)) a
--
-- lwindowI ‚à∑ (Null a) ‚áí i ‚Üí LWindow i a
-- lwindowI i = LWindowS null i null null
--
-- instance (Null a) ‚áí Null (LWindow i a) where null = LWindowE null
-- instance (Append a) ‚áí Append (LWindow i a) where
--   LWindowE x‚ÇÅ ‚ß∫ LWindowE x‚ÇÇ = LWindowE $ x‚ÇÅ ‚ß∫ x‚ÇÇ
--   LWindowE x‚ÇÅ ‚ß∫ LWindowS x‚ÇÇ‚ÇÅ i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ = LWindowS (x‚ÇÅ ‚ß∫ x‚ÇÇ‚ÇÅ) i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ
--   LWindowS x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ x‚ÇÅ‚ÇÇ ‚ß∫ LWindowE x‚ÇÇ = LWindowS x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ $ x‚ÇÅ‚ÇÇ ‚ß∫ x‚ÇÇ
--   LWindowS x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ x‚ÇÅ‚ÇÇ ‚ß∫ LWindowS x‚ÇÇ‚ÇÅ i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ =
--     let xis' = reverse $ iter $ firstN (nat windowWidth) $ list $ reverse $ xis‚ÇÅ ‚ß∫ single ((x‚ÇÅ‚ÇÅ ‚ß∫ x‚ÇÇ‚ÇÅ) :* i‚ÇÇ) ‚ß∫ xis‚ÇÇ
--     in LWindowS x‚ÇÅ‚ÇÅ i‚ÇÅ xis' x‚ÇÇ‚ÇÇ
-- instance (Monoid a) ‚áí Monoid (LWindow i a)
--
-- -- data WindowR i a = WindowR
-- --   { windowRHead ‚à∑ ùêø (a ‚àß i)
-- --   , windowRTail ‚à∑ a
-- --   } deriving (Eq,Ord,Show)
-- --
-- -- instance (Null a) ‚áí Null (WindowR i a) where null = WindowR null null
-- -- instance (Append a) ‚áí Append (WindowR i a) where
-- --   WindowR xss‚ÇÅ x‚ÇÅ ‚ß∫ WindowR xss‚ÇÇ x‚ÇÇ = case xxs‚ÇÇ of
-- --     Nil ‚Üí WindowL xss‚ÇÅ (x‚ÇÅ ‚ß∫ x‚ÇÇ)
-- --     (x‚ÇÇ' :* s‚ÇÇ) :& xss‚ÇÇ' ‚Üí WindowL (xss‚ÇÅ ‚ß∫ ((x‚ÇÅ ‚ß∫ x‚ÇÇ') :* xss‚ÇÇ)) x‚ÇÇ
-- -- instance (Monoid a) ‚áí Monoid (WindowL i a)
-- -- instance ToStream a (SepL a a) where
-- --   stream (WindowL x sxs) = stream $ list $ concat
-- --     [ single x
-- --     , concat $ mapOn (reverse sxs) $ \ (i' :* x') ‚Üí
-- --         iter [i',x']
-- --     ]
-- -- instance ToIter a (WindowL a a) where iter = iter ‚àò stream
-- --
-- -- data WindowL i a = WindowL
-- --   { windowLHead ‚à∑ a
-- --   , windowLTail ‚à∑ ùêø (i ‚àß a)
-- --   } deriving (Eq,Ord,Show)
-- --
-- -- instance (Null a) ‚áí Null (WindowL i a) where null = WindowL null null
-- -- instance (Append a) ‚áí Append (WindowL i a) where
-- --   WindowL x‚ÇÅ sxs‚ÇÅ ‚ß∫ WindowL x‚ÇÇ sxs‚ÇÇ = case sxs‚ÇÅ of
-- --     Nil ‚Üí WindowL (x‚ÇÅ ‚ß∫ x‚ÇÇ) sxs‚ÇÇ
-- --     (s‚ÇÅ :* x‚ÇÅ') :& sxs‚ÇÅ' ‚Üí WindowL x‚ÇÅ $ firstN windowWidth $ sxs‚ÇÇ ‚ß∫ ((s‚ÇÅ :* (x‚ÇÅ' ‚ß∫ x‚ÇÇ)) :& sxs‚ÇÅ)
-- -- instance (Monoid a) ‚áí Monoid (WindowL i a)
-- -- instance ToStream a (WindowL a a) where
-- --   stream (WindowL x sxs) = stream $ list $ concat
-- --     [ single x
-- --     , concat $ mapOn (reverse sxs) $ \ (i' :* x') ‚Üí
-- --         iter [i',x']
-- --     ]
-- -- instance ToIter a (WindowL a a) where iter = iter ‚àò stream
-- --
