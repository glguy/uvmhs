module UVMHS.Lib.Pretty.DocA where

import UVMHS.Core

import UVMHS.Lib.TreeAnnote

import UVMHS.Lib.Pretty.Annotation
import UVMHS.Lib.Pretty.Common
import UVMHS.Lib.Pretty.Shape

-- DocA renders group and algin commands

data DocAEnv = DocAEnv
  -- global env
  { docAEnvMaxLineWidth ‚à∑ ùëÇ ‚Ñï64
  , docAEnvMaxRibbonWidth ‚à∑ ùëÇ ‚Ñï64
  -- local env
  , docAEnvNest ‚à∑ ‚Ñï64
  } deriving (Eq,Ord,Show)
makeLenses ''DocAEnv

docAEnv‚ÇÄ ‚à∑ DocAEnv
docAEnv‚ÇÄ = DocAEnv
  { docAEnvMaxLineWidth = Some $ ùïü64 120
  , docAEnvMaxRibbonWidth = Some $ ùïü64 100
  , docAEnvNest = ùïü64 0
  }

data DocAState = DocAState
  { docAStateRib ‚à∑ ‚Ñï64
  , docAStateRow ‚à∑ ‚Ñï64
  , docAStateCol ‚à∑ ‚Ñï64
  } deriving (Eq,Ord,Show)
makeLenses ''DocAState

docAState‚ÇÄ ‚à∑ DocAState
docAState‚ÇÄ = DocAState
  { docAStateRib = ùïü64 0
  , docAStateRow = ùïü64 0
  , docAStateCol = ùïü64 0
  }

type DocAM = RWS DocAEnv TreeI DocAState
data DocA =
    StaticDocA SummaryI
  | DynamicDocA SummaryI (DocAM ())
makePrisms ''DocA

staticDocA ‚à∑ DocA ‚Üí SummaryI
staticDocA = \case
  StaticDocA s ‚Üí s
  DynamicDocA s _ ‚Üí s

dynamicDocA ‚à∑ DocA ‚Üí DocAM ()
dynamicDocA = \case
  StaticDocA s ‚Üí renderSummaryI s
  DynamicDocA _ d ‚Üí d

instance Null DocA where null = StaticDocA null
instance Append DocA where
  StaticDocA s‚ÇÅ ‚ß∫ StaticDocA s‚ÇÇ = StaticDocA $ s‚ÇÅ ‚ß∫ s‚ÇÇ
  StaticDocA s‚ÇÅ ‚ß∫ DynamicDocA s‚ÇÇ r‚ÇÇ = DynamicDocA (s‚ÇÅ ‚ß∫ s‚ÇÇ) $ renderSummaryI s‚ÇÅ ‚â´ r‚ÇÇ
  DynamicDocA s‚ÇÅ r‚ÇÅ ‚ß∫ StaticDocA s‚ÇÇ = DynamicDocA (s‚ÇÅ ‚ß∫ s‚ÇÇ) $ r‚ÇÅ ‚â´ renderSummaryI s‚ÇÇ
  DynamicDocA s‚ÇÅ r‚ÇÅ ‚ß∫ DynamicDocA s‚ÇÇ r‚ÇÇ = DynamicDocA (s‚ÇÅ ‚ß∫ s‚ÇÇ) $ r‚ÇÅ ‚â´ r‚ÇÇ
instance Monoid DocA

renderSummaryI ‚à∑ SummaryI ‚Üí DocAM ()
renderSummaryI s =
  let f =
        if shapeIAligned $ summaryIShape s
        then alignDocAM
        else id
  in f $ do
    nest ‚Üê askL docAEnvNestL
    let o = mapOn (summaryIContents s) $ map $ \case
          NewlineChunkI n ‚Üí NewlineChunkI $ n + nest
          c ‚Üí c
    tell o
    case shapeIShape $ summaryIShape s of
      SingleLine l ‚Üí do
        modifyL docAStateRibL $ (+) l
        modifyL docAStateColL $ (+) l
      MultiLine (ShapeM _ _ ll lines) ‚Üí do
        modifyL docAStateRowL $ (+) lines
        putL docAStateRibL ll
        putL docAStateColL ll

stringDocA ‚à∑ ùïä ‚Üí DocA
stringDocA = StaticDocA ‚àò summaryChunksI ‚àò splitChunksI

docAModal ‚à∑ DocA ‚Üí DocA ‚Üí DocA
docAModal d‚ÇÅ d‚ÇÇ = DynamicDocA (staticDocA d‚ÇÅ) $ dynamicDocA d‚ÇÇ

annotateDocA ‚à∑ Annotation ‚Üí DocA ‚Üí DocA
annotateDocA a = \case
  StaticDocA s ‚Üí StaticDocA $ annotateSummaryI a s
  DynamicDocA s xM ‚Üí DynamicDocA (annotateSummaryI a s) $ mapOut (annote a) xM

groupDocAM ‚à∑ SummaryI ‚Üí DocAM () ‚Üí DocAM ()
groupDocAM s xM = do
  if summaryIForceBreak s
  then xM
  else do
    lwO ‚Üê askL docAEnvMaxLineWidthL
    rwO ‚Üê askL docAEnvMaxRibbonWidthL
    nest ‚Üê askL docAEnvNestL
    rib ‚Üê getL docAStateRibL
    col ‚Üê getL docAStateColL
    let ml :* mr = case shapeIShape $ summaryIShape s of
          SingleLine l ‚Üí (nest + col + l) :* (rib + l)
          MultiLine (ShapeM fl mml ll _) ‚Üí
            joins [ nest + col + fl , nest + mml , nest + ll ]
            :*
            joins [ rib + fl , mml , ll ]
        mlb = case lwO of
          None ‚Üí True
          Some lw ‚Üí ml ‚â§ lw
        mrb = case rwO of
          None ‚Üí True
          Some rw ‚Üí mr ‚â§ rw
    case mlb ‚©ì mrb of
      True ‚Üí renderSummaryI s
      False ‚Üí xM

groupDocA ‚à∑ DocA ‚Üí DocA
groupDocA = \case
  StaticDocA s ‚Üí StaticDocA s
  DynamicDocA s xM ‚Üí DynamicDocA s $ groupDocAM s xM

alignDocAM ‚à∑ DocAM a ‚Üí DocAM a
alignDocAM xM = do
  col ‚Üê getL docAStateColL
  nest ‚Üê askL docAEnvNestL
  putL docAStateColL $ ùïü64 0
  x ‚Üê localL docAEnvNestL (nest + col) xM
  modifyL docAStateColL $ (+) col
  return x

alignDocA ‚à∑ DocA ‚Üí DocA
alignDocA = \case
  StaticDocA s ‚Üí StaticDocA $ alignSummary s
  DynamicDocA s r ‚Üí DynamicDocA (alignSummary s) $ alignDocAM r

execDocAWith ‚à∑ (DocAM () ‚Üí DocAM ()) ‚Üí DocA ‚Üí TreeI
execDocAWith f d = evalRWS docAEnv‚ÇÄ docAState‚ÇÄ $ retOut $ f $ case d of
  StaticDocA s ‚Üí tell $ summaryIContents s
  DynamicDocA _ r ‚Üí r

execDocA ‚à∑ DocA ‚Üí TreeI
execDocA = execDocAWith id
