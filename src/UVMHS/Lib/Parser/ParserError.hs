module UVMHS.Lib.Parser.ParserError where

import UVMHS.Core

import UVMHS.Lib.Window
import UVMHS.Lib.Pretty

import UVMHS.Lib.Parser.Loc

data ParserErrorInfo = ParserErrorInfo
  { parserErrorInfoPrefix ‚à∑ WindowR Doc Doc
  , parserErrorInfoContext ‚à∑ WindowR Doc Doc
  , parserErrorInfoStackHead ‚à∑ ùïä
  , parserErrorInfoStackTail ‚à∑ ùêº ùïä
  }

data ParserError t = ParserError
  { parserErrorTokenLoc ‚à∑ AddBT Loc
  , parserErrorTokenContext ‚à∑ WindowR Doc Doc
  , parserErrorTokenSuffix ‚à∑ WindowL Doc Doc
  , parserErrorFailures ‚à∑ ùêº ParserErrorInfo
  }

instance Append (ParserError t) where
  e‚ÇÅ@(ParserError l‚ÇÅ d‚ÇÅ s‚ÇÅ f‚ÇÅ) ‚ß∫ e‚ÇÇ@(ParserError l‚ÇÇ _ _ f‚ÇÇ) =
    case l‚ÇÅ ‚ãö l‚ÇÇ of
      LT ‚Üí e‚ÇÇ
      EQ ‚Üí ParserError l‚ÇÅ d‚ÇÅ s‚ÇÅ $ f‚ÇÅ ‚ß∫ f‚ÇÇ
      GT ‚Üí e‚ÇÅ

data ParserErrorStackTraces = ParserErrorStackTraces
  { parserErrorStackTracesMessages ‚à∑ ùëÉ ùïä
  , parserErrorStackTracesChain ‚à∑ ùïä ‚á∞ ParserErrorStackTraces
  } deriving (Eq, Ord)
makeLenses ''ParserErrorStackTraces
makePrettyRecord ''ParserErrorStackTraces

instance Bot ParserErrorStackTraces where
  bot = ParserErrorStackTraces bot bot
instance Join ParserErrorStackTraces where
  ParserErrorStackTraces fin‚ÇÅ ch‚ÇÅ ‚äî ParserErrorStackTraces fin‚ÇÇ ch‚ÇÇ = ParserErrorStackTraces (fin‚ÇÅ ‚äî fin‚ÇÇ) (ch‚ÇÅ ‚äî ch‚ÇÇ)
instance JoinLattice ParserErrorStackTraces

stackTraces ‚à∑ ùïä ‚Üí ùêº ùïä ‚Üí ParserErrorStackTraces
stackTraces fin msgs = foldrOnFrom msgs (ParserErrorStackTraces (single fin) bot) $ \ msg tr ‚Üí
  ParserErrorStackTraces bot $ msg ‚Ü¶ tr

parserErrorFailuresMap ‚à∑ ùêº ParserErrorInfo ‚Üí (ùïä ‚àß ùîπ) ‚á∞ WindowR Doc Doc ‚àß WindowR Doc Doc ‚àß ParserErrorStackTraces
parserErrorFailuresMap eis =
  fold bot (dunionBy $ \ (c' :* p' :* t‚ÇÅ) (_ :* _ :* t‚ÇÇ) ‚Üí c' :* p' :* (t‚ÇÅ ‚äî t‚ÇÇ)) $
    mapOn eis $ \ (ParserErrorInfo p c sh st) ‚Üí
      (ppRender (concat c) :* overflowR c) ‚Ü¶ (p :* c :* stackTraces sh st)

displaySourceError ‚à∑ ùïä ‚Üí AddNull (ParserError t) ‚Üí Doc
displaySourceError so peM = ppVertical $ concat
  [ return $ ppHeader "Parse Failure"
  , return $ ppHeader "Source:"
  , if so ‚â° null then mzero else return $ ppHorizontal [ppErr ">",ppBD $ ppString so]
  , case peM of
      Null ‚Üí return $ ppErr "> No Reported Errors"
      AddNull (ParserError l tc ts fs) ‚Üí concat
        [ return $ ppHorizontal
            [ ppErr ">"
            , concat
                [ ppString "line:"
                , pretty $ succ ‚àò locRow ^$ l
                ]
            , concat
                [ ppString "column:"
                , pretty $ succ ‚àò locCol ^$ l
                ]
            ]
        , return $ ppHeader "One of:"
        , inbetween (ppHeader "OR") $ mapOn (map snd $ iter $ parserErrorFailuresMap fs) $ \ (pp :* pc :* ets) ‚Üí
            ppVertical
              [ concat
                  [ renderWindowR pp
                  , ppUT '^' green $ renderWindowR pc
                  , ppUT '^' red $ renderWindowR tc
                  , renderWindowL ts
                  ]
              , displayErrorTraces ets
              ]
        ]
  ]

displayErrorTraces ‚à∑ ParserErrorStackTraces ‚Üí Doc
displayErrorTraces (ParserErrorStackTraces final chain) = ppVertical $ concat
  [ case isEmpty final of
      True ‚Üí null
      False ‚Üí return $ ppHorizontal $ concat
        [ single $ ppFG red $ ppString "Expected"
        , inbetween (ppFG red $ ppString "OR") $ map ppString $ iter final
        ]
  , mapOn (iter chain) $ \ (msg :* tr) ‚Üí ppVertical
      [ ppHorizontal
          [ ppFG green $ ppString "Parsing"
          , ppString msg
          ]
      , concat [ppSpace $ ùïü64 2,ppAlign $ displayErrorTraces tr]
      ]
  ]
