module UVMHS.Lib.Sep where

import UVMHS.Core

data Sep i a =
    SepE a
  | SepN a i (ùêºC (a ‚àß i)) a

sepI ‚à∑ (Null a) ‚áí i ‚Üí Sep i a
sepI i = SepN null i null null

instance (Null a) ‚áí Null (Sep i a) where null = SepE null
instance (Append a) ‚áí Append (Sep i a) where
  SepE x‚ÇÅ ‚ß∫ SepE x‚ÇÇ = SepE $ x‚ÇÅ ‚ß∫ x‚ÇÇ
  SepE x‚ÇÅ ‚ß∫ SepN x‚ÇÇ‚ÇÅ i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ = SepN (x‚ÇÅ ‚ß∫ x‚ÇÇ‚ÇÅ) i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ
  SepN x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ x‚ÇÅ‚ÇÇ ‚ß∫ SepE x‚ÇÇ = SepN x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ $ x‚ÇÅ‚ÇÇ ‚ß∫ x‚ÇÇ
  SepN x‚ÇÅ‚ÇÅ i‚ÇÅ xis‚ÇÅ x‚ÇÅ‚ÇÇ ‚ß∫ SepN x‚ÇÇ‚ÇÅ i‚ÇÇ xis‚ÇÇ x‚ÇÇ‚ÇÇ =
    let xis' = xis‚ÇÅ ‚ß∫ single ((x‚ÇÅ‚ÇÇ ‚ß∫ x‚ÇÇ‚ÇÅ) :* i‚ÇÇ) ‚ß∫ xis‚ÇÇ
    in SepN x‚ÇÅ‚ÇÅ i‚ÇÅ xis' x‚ÇÇ‚ÇÇ
instance (Monoid a) ‚áí Monoid (Sep i a)

instance ToIter a (Sep a a) where
  iter = \case
    SepE x ‚Üí single x
    SepN x‚ÇÅ i xis x‚ÇÇ ‚Üí concat
      [ single x‚ÇÅ
      , single i
      , do x' :* i' ‚Üê iter xis
           iter [x',i']
      , single x‚ÇÇ
      ]

instance Functor (Sep i) where map = mapSep id

instance CSized (Sep i a) where
  csize = \case
    SepE _ ‚Üí zero
    SepN _ _ xis _ ‚Üí one + csize xis

mapSep ‚à∑ (i ‚Üí j) ‚Üí (a ‚Üí b) ‚Üí Sep i a ‚Üí Sep j b
mapSep f g = \case
  SepE x ‚Üí SepE $ g x
  SepN x‚ÇÅ i xis x‚ÇÇ ‚Üí SepN (g x‚ÇÅ) (f i) (map (mapPair g f) xis) $ g x‚ÇÇ

mapSepI ‚à∑ (i ‚Üí j) ‚Üí Sep i a ‚Üí Sep j a
mapSepI f = mapSep f id
