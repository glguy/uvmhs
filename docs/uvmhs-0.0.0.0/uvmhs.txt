-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package uvmhs
@version 0.0.0.0

module UVMHS.Core.Init
data Void
data Nat
Z :: Nat
S :: Nat -> Nat
data P (a :: k)
P :: P (a :: k)
data Lazy a
Lazy :: ~a -> Lazy a
[unLazy] :: Lazy a -> ~a
type ùîπ = Bool
newtype ùêº a
ùêº :: (forall b. (a -> b -> (b -> b) -> b) -> b -> (b -> b) -> b) -> ùêº a
[unùêº] :: ùêº a -> forall b. (a -> b -> (b -> b) -> b) -> b -> (b -> b) -> b
data ùêø a
Nil :: ùêø a
(:&) :: a -> ùêø a -> ùêø a
infixr 8 :&
data ùëÇ a
None :: ùëÇ a
Some :: a -> ùëÇ a
newtype ùëÑ a
ùëÑ :: Seq a -> ùëÑ a
[unùëÑ] :: ùëÑ a -> Seq a
type ùïä = Text
newtype k ‚á∞ v
ùê∑ :: Map k v -> (‚á∞) k v
[unùê∑] :: (‚á∞) k v -> Map k v
infixr 1 ‚á∞
data a ‚à® b
Inl :: a -> (‚à®) a b
Inr :: b -> (‚à®) a b
infixl 5 ‚à®
data a ‚àß b
(:*) :: a -> b -> (‚àß) a b
infixl 6 ‚àß
infixl 8 :*
type ‚Ñï = Natural
type ‚Ñï64 = Word64
type ‚Ñï32 = Word32
type ‚Ñï16 = Word16
type ‚Ñï8 = Word8
type ‚Ñ§ = Integer
type ‚Ñ§64 = Int64
type ‚Ñ§32 = Int32
type ‚Ñ§16 = Int16
type ‚Ñ§8 = Int8
type ‚Ñö = Rational
type ‚Ñö·¥æ = Ratio ‚Ñï
type ùîª = Double
newtype ùîª·¥æ
ùîª·¥æ :: ùîª -> ùîª·¥æ
[unùîª·¥æ] :: ùîª·¥æ -> ùîª
data ‚Ñù
Integer :: ‚Ñ§ -> ‚Ñù
Rational :: ‚Ñö -> ‚Ñù
Double :: ùîª -> ‚Ñù
data ‚Ñù·¥æ
Natural :: ‚Ñï -> ‚Ñù·¥æ
Rational·¥æ :: ‚Ñö·¥æ -> ‚Ñù·¥æ
Double·¥æ :: ùîª·¥æ -> ‚Ñù·¥æ
type ‚ÑÇ = Char
newtype ùëÜ a
ùëÜ :: (() -> ùëÇ (a ‚àß ùëÜ a)) -> ùëÜ a
[unùëÜ] :: ùëÜ a -> () -> ùëÇ (a ‚àß ùëÜ a)
newtype ùëÉ a
ùëÉ :: Set a -> ùëÉ a
[unùëÉ] :: ùëÉ a -> Set a
data (‚âü) (a :: k) (b :: k) :: ‚òÖ
[Refl] :: forall (k :: ‚òÖ) (a :: k). a ‚âü a
data W (c :: Constraint)
[W] :: c => W c
data Ex (t :: k -> ‚òÖ) :: ‚òÖ
[Ex] :: forall (k :: ‚òÖ) (t :: k -> ‚òÖ) (a :: k). t a -> Ex t
data Ex_C (c :: k -> Constraint) (t :: k -> ‚òÖ) :: ‚òÖ
[Ex_C] :: forall (k :: ‚òÖ) (c :: k -> Constraint) (t :: k -> ‚òÖ) (a :: k). c a => t a -> Ex_C c t
type STACK = HasCallStack
class CHS a b | b -> a
tohs :: CHS a b => a -> b
frhs :: CHS a b => b -> a
fail :: forall (r :: RuntimeRep) (a :: TYPE r) m. STACK => [‚ÑÇ] -> m a
($) :: forall r a (b :: TYPE r). (a -> b) -> a -> b
infixr 0 $
error :: forall (r :: RuntimeRep) (a :: TYPE r). STACK => ùïä -> a
uncurry :: ((a ‚àß b) -> c) -> a -> b -> c
id :: a -> a
with :: W c -> (c => a) -> a
fromRational :: Rational -> ùîª
negate :: ‚Ñï -> ‚Ñ§
not :: ùîπ -> ùîπ
const :: a -> b -> a
flip :: (a -> b -> c) -> b -> a -> c
rotateL :: (a -> b -> c -> d) -> b -> c -> a -> d
rotateR :: (a -> b -> c -> d) -> c -> a -> b -> d
curry :: (a -> b -> c) -> (a ‚àß b) -> c
on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
unpack :: forall (k :: ‚òÖ) (t :: k -> ‚òÖ) (b :: ‚òÖ). Ex t -> (forall (a :: k). t a -> b) -> b
(‚©î) :: ùîπ -> ùîπ -> ùîπ
infixl 2 ‚©î
(‚©ì) :: ùîπ -> ùîπ -> ùîπ
infixl 3 ‚©ì
(‚àò) :: (b -> c) -> (a -> b) -> a -> c
infixl 7 ‚àò
cond :: ùîπ -> a -> a -> a
exfalso :: Void -> a
runùêº :: (b -> b) -> b -> (a -> b -> (b -> b) -> b) -> ùêº a -> b
runùêºOn :: ùêº a -> (b -> b) -> b -> (a -> b -> (b -> b) -> b) -> b
foldkùêº :: b -> (a -> b -> (b -> b) -> b) -> ùêº a -> b
foldùêº :: b -> (a -> b -> b) -> ùêº a -> b
foldrùêº :: b -> (a -> b -> b) -> ùêº a -> b
mapùêº :: (a -> b) -> ùêº a -> ùêº b
nullùêº :: ùêº a
singleùêº :: a -> ùêº a
listùêº :: ùêº a -> ùêø a
iterùêø :: ùêø a -> ùêº a
lazyListùêº :: ùêº a -> [a]
iterLL :: [a] -> ùêº a
coerce_UNSAFE :: a -> b
weq_UNSAFE :: P a -> P b -> W (a ~ b)
void_UNSAFE :: Void
unpack_C :: forall (k :: ‚òÖ) (c :: k -> Constraint) (t :: k -> ‚òÖ) (b :: ‚òÖ). Ex_C c t -> (forall (a :: k). c a => t a -> b) -> b
ifThenElse :: ùîπ -> a -> a -> a
ùï§ :: [‚ÑÇ] -> ùïä
ùïü :: ‚Ñï -> ‚Ñï
ùïü64 :: ‚Ñï -> ‚Ñï64
ùïü32 :: ‚Ñï -> ‚Ñï32
ùïü16 :: ‚Ñï -> ‚Ñï16
ùïü8 :: ‚Ñï -> ‚Ñï8
ùï´ :: ‚Ñï -> ‚Ñ§
ùï´64 :: ‚Ñï -> ‚Ñ§64
ùï´32 :: ‚Ñï -> ‚Ñ§32
ùï´16 :: ‚Ñï -> ‚Ñ§16
ùï´8 :: ‚Ñï -> ‚Ñ§8
ùï¢ :: ‚Ñï -> ‚Ñö
ùï¢·¥æ :: ‚Ñï -> ‚Ñö·¥æ
ùïï·¥æ :: ùîª -> ùîª·¥æ
tohsChars :: ùïä -> [‚ÑÇ]
frhsChars :: [‚ÑÇ] -> ùïä
appto :: a -> (a -> b) -> b
(‚àò‚àò) :: (c -> d) -> (a -> b -> c) -> a -> b -> d
(‚àò‚àò‚àò) :: (d -> e) -> (a -> b -> c -> d) -> a -> b -> c -> e
mirror :: (a -> b -> c -> d) -> c -> b -> a -> d
tohsùëÇF :: (a -> b) -> ùëÇ a -> Maybe b
tohsùëÇ :: ùëÇ a -> Maybe a
frhsùëÇF :: (a -> b) -> Maybe a -> ùëÇ b
frhsùëÇ :: Maybe a -> ùëÇ a

-- | If the first argument evaluates to <a>True</a>, then the result is the
--   second argument. Otherwise an <a>AssertionFailed</a> exception is
--   raised, containing a <a>String</a> with the source file and line
--   number of the call to <a>assert</a>.
--   
--   Assertions can normally be turned on or off with a compiler flag (for
--   GHC, assertions are normally on unless optimisation is turned on with
--   <tt>-O</tt> or the <tt>-fignore-asserts</tt> option is given). When
--   assertions are turned off, the first argument to <a>assert</a> is
--   ignored, and the second argument is returned as the result.
assert :: Bool -> a -> a

-- | <tt>Coercible</tt> is a two-parameter class that has instances for
--   types <tt>a</tt> and <tt>b</tt> if the compiler can infer that they
--   have the same representation. This class does not have regular
--   instances; instead they are created on-the-fly during type-checking.
--   Trying to manually declare an instance of <tt>Coercible</tt> is an
--   error.
--   
--   Nevertheless one can pretend that the following three kinds of
--   instances exist. First, as a trivial base-case:
--   
--   <pre>
--   instance Coercible a a
--   </pre>
--   
--   Furthermore, for every type constructor there is an instance that
--   allows to coerce under the type constructor. For example, let
--   <tt>D</tt> be a prototypical type constructor (<tt>data</tt> or
--   <tt>newtype</tt>) with three type arguments, which have roles
--   <tt>nominal</tt>, <tt>representational</tt> resp. <tt>phantom</tt>.
--   Then there is an instance of the form
--   
--   <pre>
--   instance Coercible b b' =&gt; Coercible (D a b c) (D a b' c')
--   </pre>
--   
--   Note that the <tt>nominal</tt> type arguments are equal, the
--   <tt>representational</tt> type arguments can differ, but need to have
--   a <tt>Coercible</tt> instance themself, and the <tt>phantom</tt> type
--   arguments can be changed arbitrarily.
--   
--   The third kind of instance exists for every <tt>newtype NT = MkNT
--   T</tt> and comes in two variants, namely
--   
--   <pre>
--   instance Coercible a T =&gt; Coercible a NT
--   </pre>
--   
--   <pre>
--   instance Coercible T b =&gt; Coercible NT b
--   </pre>
--   
--   This instance is only usable if the constructor <tt>MkNT</tt> is in
--   scope.
--   
--   If, as a library author of a type constructor like <tt>Set a</tt>, you
--   want to prevent a user of your module to write <tt>coerce :: Set T
--   -&gt; Set NT</tt>, you need to set the role of <tt>Set</tt>'s type
--   parameter to <tt>nominal</tt>, by writing
--   
--   <pre>
--   type role Set nominal
--   </pre>
--   
--   For more details about this feature, please refer to <a>Safe
--   Coercions</a> by Joachim Breitner, Richard A. Eisenberg, Simon Peyton
--   Jones and Stephanie Weirich.
class a ~R# b => Coercible (a :: k) (b :: k)

-- | The function <a>coerce</a> allows you to safely convert between values
--   of types that have the same representation with no run-time overhead.
--   In the simplest case you can use it instead of a newtype constructor,
--   to go from the newtype's concrete type to the abstract type. But it
--   also works in more complicated settings, e.g. converting a list of
--   newtypes to a list of concrete types.
--   
--   This function is representation-polymorphic, but the
--   <tt>RuntimeRep</tt> type argument is marked as <tt>Inferred</tt>,
--   meaning that it is not available for visible type application. This
--   means the typechecker will accept <tt><a>coerce</a> </tt><tt>Int</tt>
--   <tt>Age 42</tt>.
coerce :: forall {k :: RuntimeRep} (a :: TYPE k) (b :: TYPE k). Coercible a b => a -> b

-- | The kind of lifted constraints
type Constraint = CONSTRAINT LiftedRep

-- | <a>CallStack</a>s are a lightweight method of obtaining a partial
--   call-stack at any point in the program.
--   
--   A function can request its call-site with the <a>HasCallStack</a>
--   constraint. For example, we can define
--   
--   <pre>
--   putStrLnWithCallStack :: HasCallStack =&gt; String -&gt; IO ()
--   </pre>
--   
--   as a variant of <tt>putStrLn</tt> that will get its call-site and
--   print it, along with the string given as argument. We can access the
--   call-stack inside <tt>putStrLnWithCallStack</tt> with
--   <a>callStack</a>.
--   
--   <pre>
--   &gt;&gt;&gt; :{
--   putStrLnWithCallStack :: HasCallStack =&gt; String -&gt; IO ()
--   putStrLnWithCallStack msg = do
--     putStrLn msg
--     putStrLn (prettyCallStack callStack)
--   :}
--   </pre>
--   
--   Thus, if we call <tt>putStrLnWithCallStack</tt> we will get a
--   formatted call-stack alongside our string.
--   
--   <pre>
--   &gt;&gt;&gt; putStrLnWithCallStack "hello"
--   hello
--   CallStack (from HasCallStack):
--     putStrLnWithCallStack, called at &lt;interactive&gt;:... in interactive:Ghci...
--   </pre>
--   
--   GHC solves <a>HasCallStack</a> constraints in three steps:
--   
--   <ol>
--   <li>If there is a <a>CallStack</a> in scope -- i.e. the enclosing
--   function has a <a>HasCallStack</a> constraint -- GHC will append the
--   new call-site to the existing <a>CallStack</a>.</li>
--   <li>If there is no <a>CallStack</a> in scope -- e.g. in the GHCi
--   session above -- and the enclosing definition does not have an
--   explicit type signature, GHC will infer a <a>HasCallStack</a>
--   constraint for the enclosing definition (subject to the monomorphism
--   restriction).</li>
--   <li>If there is no <a>CallStack</a> in scope and the enclosing
--   definition has an explicit type signature, GHC will solve the
--   <a>HasCallStack</a> constraint for the singleton <a>CallStack</a>
--   containing just the current call-site.</li>
--   </ol>
--   
--   <a>CallStack</a>s do not interact with the RTS and do not require
--   compilation with <tt>-prof</tt>. On the other hand, as they are built
--   up explicitly via the <a>HasCallStack</a> constraints, they will
--   generally not contain as much information as the simulated call-stacks
--   maintained by the RTS.
--   
--   A <a>CallStack</a> is a <tt>[(String, SrcLoc)]</tt>. The
--   <tt>String</tt> is the name of function that was called, the
--   <a>SrcLoc</a> is the call-site. The list is ordered with the most
--   recently called function at the head.
--   
--   NOTE: The intrepid user may notice that <a>HasCallStack</a> is just an
--   alias for an implicit parameter <tt>?callStack :: CallStack</tt>. This
--   is an implementation detail and <b>should not</b> be considered part
--   of the <a>CallStack</a> API, we may decide to change the
--   implementation in the future.
data () => CallStack

-- | Return the current <a>CallStack</a>.
--   
--   Does *not* include the call-site of <a>callStack</a>.
callStack :: HasCallStack => CallStack

-- | Perform some computation without adding new entries to the
--   <a>CallStack</a>.
withFrozenCallStack :: HasCallStack => (HasCallStack => a) -> a
data () => Bool
False :: Bool
True :: Bool
data () => Ordering
LT :: Ordering
EQ :: Ordering
GT :: Ordering

-- | A value of type <tt><a>IO</a> a</tt> is a computation which, when
--   performed, does some I/O before returning a value of type <tt>a</tt>.
--   
--   There is really only one way to "perform" an I/O action: bind it to
--   <tt>Main.main</tt> in your program. When your program is run, the I/O
--   will be performed. It isn't possible to perform I/O from an arbitrary
--   function, unless that function is itself in the <a>IO</a> monad and
--   called at some point, directly or indirectly, from <tt>Main.main</tt>.
--   
--   <a>IO</a> is a monad, so <a>IO</a> actions can be combined using
--   either the do-notation or the <a>&gt;&gt;</a> and <a>&gt;&gt;=</a>
--   operations from the <a>Monad</a> class.
data () => IO a

-- | The <a>Eq</a> class defines equality (<a>==</a>) and inequality
--   (<a>/=</a>). All the basic datatypes exported by the <a>Prelude</a>
--   are instances of <a>Eq</a>, and <a>Eq</a> may be derived for any
--   datatype whose constituents are also instances of <a>Eq</a>.
--   
--   The Haskell Report defines no laws for <a>Eq</a>. However, instances
--   are encouraged to follow these properties:
--   
--   <ul>
--   <li><i><b>Reflexivity</b></i> <tt>x == x</tt> = <a>True</a></li>
--   <li><i><b>Symmetry</b></i> <tt>x == y</tt> = <tt>y == x</tt></li>
--   <li><i><b>Transitivity</b></i> if <tt>x == y &amp;&amp; y == z</tt> =
--   <a>True</a>, then <tt>x == z</tt> = <a>True</a></li>
--   <li><i><b>Extensionality</b></i> if <tt>x == y</tt> = <a>True</a> and
--   <tt>f</tt> is a function whose return type is an instance of
--   <a>Eq</a>, then <tt>f x == f y</tt> = <a>True</a></li>
--   <li><i><b>Negation</b></i> <tt>x /= y</tt> = <tt>not (x ==
--   y)</tt></li>
--   </ul>
--   
--   Minimal complete definition: either <a>==</a> or <a>/=</a>.
class () => Eq a
(==) :: Eq a => a -> a -> Bool
infix 4 ==

-- | The <a>Ord</a> class is used for totally ordered datatypes.
--   
--   Instances of <a>Ord</a> can be derived for any user-defined datatype
--   whose constituent types are in <a>Ord</a>. The declared order of the
--   constructors in the data declaration determines the ordering in
--   derived <a>Ord</a> instances. The <a>Ordering</a> datatype allows a
--   single comparison to determine the precise ordering of two objects.
--   
--   <a>Ord</a>, as defined by the Haskell report, implements a total order
--   and has the following properties:
--   
--   <ul>
--   <li><i><b>Comparability</b></i> <tt>x &lt;= y || y &lt;= x</tt> =
--   <a>True</a></li>
--   <li><i><b>Transitivity</b></i> if <tt>x &lt;= y &amp;&amp; y &lt;=
--   z</tt> = <a>True</a>, then <tt>x &lt;= z</tt> = <a>True</a></li>
--   <li><i><b>Reflexivity</b></i> <tt>x &lt;= x</tt> = <a>True</a></li>
--   <li><i><b>Antisymmetry</b></i> if <tt>x &lt;= y &amp;&amp; y &lt;=
--   x</tt> = <a>True</a>, then <tt>x == y</tt> = <a>True</a></li>
--   </ul>
--   
--   The following operator interactions are expected to hold:
--   
--   <ol>
--   <li><tt>x &gt;= y</tt> = <tt>y &lt;= x</tt></li>
--   <li><tt>x &lt; y</tt> = <tt>x &lt;= y &amp;&amp; x /= y</tt></li>
--   <li><tt>x &gt; y</tt> = <tt>y &lt; x</tt></li>
--   <li><tt>x &lt; y</tt> = <tt>compare x y == LT</tt></li>
--   <li><tt>x &gt; y</tt> = <tt>compare x y == GT</tt></li>
--   <li><tt>x == y</tt> = <tt>compare x y == EQ</tt></li>
--   <li><tt>min x y == if x &lt;= y then x else y</tt> = <a>True</a></li>
--   <li><tt>max x y == if x &gt;= y then x else y</tt> = <a>True</a></li>
--   </ol>
--   
--   Note that (7.) and (8.) do <i>not</i> require <a>min</a> and
--   <a>max</a> to return either of their arguments. The result is merely
--   required to <i>equal</i> one of the arguments in terms of <a>(==)</a>.
--   
--   Minimal complete definition: either <a>compare</a> or <a>&lt;=</a>.
--   Using <a>compare</a> can be more efficient for complex types.
class Eq a => Ord a
compare :: Ord a => a -> a -> Ordering

-- | Conversion of values to readable <a>String</a>s.
--   
--   Derived instances of <a>Show</a> have the following properties, which
--   are compatible with derived instances of <a>Read</a>:
--   
--   <ul>
--   <li>The result of <a>show</a> is a syntactically correct Haskell
--   expression containing only constants, given the fixity declarations in
--   force at the point where the type is declared. It contains only the
--   constructor names defined in the data type, parentheses, and spaces.
--   When labelled constructor fields are used, braces, commas, field
--   names, and equal signs are also used.</li>
--   <li>If the constructor is defined to be an infix operator, then
--   <a>showsPrec</a> will produce infix applications of the
--   constructor.</li>
--   <li>the representation will be enclosed in parentheses if the
--   precedence of the top-level constructor in <tt>x</tt> is less than
--   <tt>d</tt> (associativity is ignored). Thus, if <tt>d</tt> is
--   <tt>0</tt> then the result is never surrounded in parentheses; if
--   <tt>d</tt> is <tt>11</tt> it is always surrounded in parentheses,
--   unless it is an atomic expression.</li>
--   <li>If the constructor is defined using record syntax, then
--   <a>show</a> will produce the record-syntax form, with the fields given
--   in the same order as the original declaration.</li>
--   </ul>
--   
--   For example, given the declarations
--   
--   <pre>
--   infixr 5 :^:
--   data Tree a =  Leaf a  |  Tree a :^: Tree a
--   </pre>
--   
--   the derived instance of <a>Show</a> is equivalent to
--   
--   <pre>
--   instance (Show a) =&gt; Show (Tree a) where
--   
--          showsPrec d (Leaf m) = showParen (d &gt; app_prec) $
--               showString "Leaf " . showsPrec (app_prec+1) m
--            where app_prec = 10
--   
--          showsPrec d (u :^: v) = showParen (d &gt; up_prec) $
--               showsPrec (up_prec+1) u .
--               showString " :^: "      .
--               showsPrec (up_prec+1) v
--            where up_prec = 5
--   </pre>
--   
--   Note that right-associativity of <tt>:^:</tt> is ignored. For example,
--   
--   <ul>
--   <li><tt><a>show</a> (Leaf 1 :^: Leaf 2 :^: Leaf 3)</tt> produces the
--   string <tt>"Leaf 1 :^: (Leaf 2 :^: Leaf 3)"</tt>.</li>
--   </ul>
class () => Show a

-- | A specialised variant of <a>showsPrec</a>, using precedence context
--   zero, and returning an ordinary <a>String</a>.
show :: Show a => a -> String

-- | <a>otherwise</a> is defined as the value <a>True</a>. It helps to make
--   guards more readable. eg.
--   
--   <pre>
--   f x | x &lt; 0     = ...
--       | otherwise = ...
--   </pre>
otherwise :: Bool

-- | Conversion from an <a>Integer</a>. An integer literal represents the
--   application of the function <a>fromInteger</a> to the appropriate
--   value of type <a>Integer</a>, so such literals have type
--   <tt>(<a>Num</a> a) =&gt; a</tt>.
fromInteger :: Num a => Integer -> a

-- | A special case of <a>error</a>. It is expected that compilers will
--   recognize this and insert error messages which are more appropriate to
--   the context in which <a>undefined</a> appears.
undefined :: forall (r :: RuntimeRep) (a :: TYPE r). HasCallStack => a
fromString :: IsString a => String -> a
instance GHC.Real.Real UVMHS.Core.Init.ùîª·¥æ
instance GHC.Float.Floating UVMHS.Core.Init.ùîª·¥æ
instance GHC.Real.Fractional UVMHS.Core.Init.ùîª·¥æ
instance GHC.Num.Num UVMHS.Core.Init.ùîª·¥æ
instance GHC.Show.Show UVMHS.Core.Init.ùîª·¥æ
instance GHC.Classes.Ord UVMHS.Core.Init.ùîª·¥æ
instance GHC.Classes.Eq UVMHS.Core.Init.ùîª·¥æ
instance GHC.Show.Show UVMHS.Core.Init.‚Ñù
instance GHC.Classes.Ord UVMHS.Core.Init.‚Ñù
instance GHC.Classes.Eq UVMHS.Core.Init.‚Ñù
instance GHC.Show.Show UVMHS.Core.Init.‚Ñù·¥æ
instance GHC.Classes.Ord UVMHS.Core.Init.‚Ñù·¥æ
instance GHC.Classes.Eq UVMHS.Core.Init.‚Ñù·¥æ
instance (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (a UVMHS.Core.Init.‚à® b)
instance (GHC.Classes.Ord a, GHC.Classes.Ord b) => GHC.Classes.Ord (a UVMHS.Core.Init.‚à® b)
instance (GHC.Classes.Eq a, GHC.Classes.Eq b) => GHC.Classes.Eq (a UVMHS.Core.Init.‚à® b)
instance (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (a UVMHS.Core.Init.‚àß b)
instance (GHC.Classes.Ord a, GHC.Classes.Ord b) => GHC.Classes.Ord (a UVMHS.Core.Init.‚àß b)
instance (GHC.Classes.Eq a, GHC.Classes.Eq b) => GHC.Classes.Eq (a UVMHS.Core.Init.‚àß b)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùëÇ a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Init.ùëÇ a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Init.ùëÇ a)
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (UVMHS.Core.Init.ùêø a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Init.ùêø a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Init.ùêø a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Init.ùëÑ a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Init.ùëÑ a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord k, GHC.Classes.Ord v) => GHC.Classes.Ord (k UVMHS.Core.Init.‚á∞ v)
instance (GHC.Classes.Eq k, GHC.Classes.Eq v) => GHC.Classes.Eq (k UVMHS.Core.Init.‚á∞ v)
instance GHC.Show.Show UVMHS.Core.Init.Nat
instance GHC.Classes.Ord UVMHS.Core.Init.Nat
instance GHC.Classes.Eq UVMHS.Core.Init.Nat
instance forall k (a :: k). GHC.Show.Show (UVMHS.Core.Init.P a)
instance forall k (a :: k). GHC.Classes.Ord (UVMHS.Core.Init.P a)
instance forall k (a :: k). GHC.Classes.Eq (UVMHS.Core.Init.P a)
instance GHC.Classes.Eq (UVMHS.Core.Init.W c)
instance GHC.Classes.Ord (UVMHS.Core.Init.W c)
instance GHC.Show.Show (UVMHS.Core.Init.W c)
instance forall k (t :: k -> *). (forall (a :: k). GHC.Show.Show (t a)) => GHC.Show.Show (UVMHS.Core.Init.Ex t)
instance forall k (c :: k -> GHC.Types.Constraint) (t :: k -> *). (forall (a :: k). c a => GHC.Show.Show (t a)) => GHC.Show.Show (UVMHS.Core.Init.Ex_C c t)
instance (a GHC.Types.~ b) => UVMHS.Core.Init.CHS a b
instance UVMHS.Core.Init.CHS UVMHS.Core.Init.‚Ñ§64 GHC.Types.Int
instance UVMHS.Core.Init.CHS a b => UVMHS.Core.Init.CHS (UVMHS.Core.Init.ùêø a) [b]
instance (UVMHS.Core.Init.CHS a‚ÇÅ b‚ÇÅ, UVMHS.Core.Init.CHS a‚ÇÇ b‚ÇÇ) => UVMHS.Core.Init.CHS (a‚ÇÅ UVMHS.Core.Init.‚àß a‚ÇÇ) (b‚ÇÅ, b‚ÇÇ)
instance (UVMHS.Core.Init.CHS a‚ÇÅ b‚ÇÅ, UVMHS.Core.Init.CHS a‚ÇÇ b‚ÇÇ, UVMHS.Core.Init.CHS a‚ÇÉ b‚ÇÉ) => UVMHS.Core.Init.CHS ((a‚ÇÅ UVMHS.Core.Init.‚àß a‚ÇÇ) UVMHS.Core.Init.‚àß a‚ÇÉ) (b‚ÇÅ, b‚ÇÇ, b‚ÇÉ)
instance (UVMHS.Core.Init.CHS a‚ÇÅ b‚ÇÅ, UVMHS.Core.Init.CHS a‚ÇÇ b‚ÇÇ, UVMHS.Core.Init.CHS a‚ÇÉ b‚ÇÉ, UVMHS.Core.Init.CHS a‚ÇÑ b‚ÇÑ) => UVMHS.Core.Init.CHS (((a‚ÇÅ UVMHS.Core.Init.‚àß a‚ÇÇ) UVMHS.Core.Init.‚àß a‚ÇÉ) UVMHS.Core.Init.‚àß a‚ÇÑ) (b‚ÇÅ, b‚ÇÇ, b‚ÇÉ, b‚ÇÑ)
instance (UVMHS.Core.Init.CHS a‚ÇÅ b‚ÇÅ, UVMHS.Core.Init.CHS a‚ÇÇ b‚ÇÇ) => UVMHS.Core.Init.CHS (a‚ÇÅ UVMHS.Core.Init.‚à® a‚ÇÇ) (Data.Either.Either b‚ÇÅ b‚ÇÇ)
instance UVMHS.Core.Init.CHS a b => UVMHS.Core.Init.CHS (UVMHS.Core.Init.ùëÇ a) (GHC.Maybe.Maybe b)

module UVMHS.Core.Data.Char
toLower :: ‚ÑÇ -> ‚ÑÇ
toUpper :: ‚ÑÇ -> ‚ÑÇ
isSpace :: ‚ÑÇ -> ùîπ
isAlphaNum :: ‚ÑÇ -> ùîπ
isLetter :: ‚ÑÇ -> ùîπ
isNumber :: ‚ÑÇ -> ùîπ
isDigit :: ‚ÑÇ -> ùîπ
chrFrNat :: ‚Ñï64 -> ‚ÑÇ
natFrChr :: ‚ÑÇ -> ‚Ñï64
isLower :: ‚ÑÇ -> ùîπ
isUpper :: ‚ÑÇ -> ùîπ

module UVMHS.Core.Classes.Order
(‚â°) :: Eq a => a -> a -> ùîπ
infix 4 ‚â°
(‚â¢) :: Eq a => a -> a -> ùîπ
infix 4 ‚â¢
(‚ãö) :: Ord a => a -> a -> Ordering
infix 4 ‚ãö
(‚â§) :: Ord a => a -> a -> ùîπ
infix 4 ‚â§
(‚â•) :: Ord a => a -> a -> ùîπ
infix 4 ‚â•
(<) :: Ord a => a -> a -> ùîπ
infix 4 <
(>) :: Ord a => a -> a -> ùîπ
infix 4 >
(‚©è) :: Ord a => a -> a -> a
(‚©é) :: Ord a => a -> a -> a
minBy :: Ord b => (a -> b) -> a -> a -> a
maxBy :: Ord b => (a -> b) -> a -> a -> a

module UVMHS.Core.Classes.Morphism
type (m :: ‚òÖ -> ‚òÖ) ‚Üí‚Åª (n :: ‚òÖ -> ‚òÖ) = forall a. m a -> n a
infixr 1 ‚Üí‚Åª
type (t :: (‚òÖ -> ‚òÖ) -> ‚òÖ -> ‚òÖ) ‚Üí‚Åº (u :: (‚òÖ -> ‚òÖ) -> ‚òÖ -> ‚òÖ) = forall m. t m ‚Üí‚Åª u m
infixr 1 ‚Üí‚Åº
class a ‚áÑ b | a -> b
isoto :: (‚áÑ) a b => a -> b
isofr :: (‚áÑ) a b => b -> a
infixr 1 ‚áÑ
data Iso a b
Iso :: (a -> b) -> (b -> a) -> Iso a b
[ito] :: Iso a b -> a -> b
[ifr] :: Iso a b -> b -> a
toiso :: a ‚áÑ b => Iso a b
friso :: a ‚áÑ b => Iso b a
class t ‚áÑ‚Åª u | t -> u
isoto2 :: (‚áÑ‚Åª) t u => t ‚Üí‚Åª u
isofr2 :: (‚áÑ‚Åª) t u => u ‚Üí‚Åª t
infixr 1 ‚áÑ‚Åª
data Iso2 t u
Iso2 :: (t ‚Üí‚Åª u) -> (u ‚Üí‚Åª t) -> Iso2 t u
[ito2] :: Iso2 t u -> t ‚Üí‚Åª u
[ifr2] :: Iso2 t u -> u ‚Üí‚Åª t
toiso2 :: t ‚áÑ‚Åª u => Iso2 t u
friso2 :: t ‚áÑ‚Åª u => Iso2 u t
class v ‚áÑ‚Åº w | v -> w
isoto3 :: (‚áÑ‚Åº) v w => v ‚Üí‚Åº w
isofr3 :: (‚áÑ‚Åº) v w => w ‚Üí‚Åº v
infixr 1 ‚áÑ‚Åº
data Iso3 v w
Iso3 :: (v ‚Üí‚Åº w) -> (w ‚Üí‚Åº v) -> Iso3 v w
[ito3] :: Iso3 v w -> v ‚Üí‚Åº w
[ifr3] :: Iso3 v w -> w ‚Üí‚Åº v
toiso3 :: v ‚áÑ‚Åº w => Iso3 v w
friso3 :: v ‚áÑ‚Åº w => Iso3 w v
class Reflexive t
refl :: Reflexive t => t a a
class Transitive t
(‚äö) :: Transitive t => t b c -> t a b -> t a c
infixl 7 ‚äö
class (Reflexive t, Transitive t) => Category t
class Symmetric t
sym :: Symmetric t => t a b -> t b a
instance UVMHS.Core.Classes.Morphism.Symmetric UVMHS.Core.Classes.Morphism.Iso
instance UVMHS.Core.Classes.Morphism.Symmetric UVMHS.Core.Classes.Morphism.Iso2
instance UVMHS.Core.Classes.Morphism.Symmetric UVMHS.Core.Classes.Morphism.Iso3
instance UVMHS.Core.Classes.Morphism.Category (->)
instance UVMHS.Core.Classes.Morphism.Category UVMHS.Core.Classes.Morphism.Iso
instance UVMHS.Core.Classes.Morphism.Category UVMHS.Core.Classes.Morphism.Iso2
instance UVMHS.Core.Classes.Morphism.Category UVMHS.Core.Classes.Morphism.Iso3
instance UVMHS.Core.Classes.Morphism.Transitive (->)
instance UVMHS.Core.Classes.Morphism.Transitive UVMHS.Core.Classes.Morphism.Iso
instance UVMHS.Core.Classes.Morphism.Transitive UVMHS.Core.Classes.Morphism.Iso2
instance UVMHS.Core.Classes.Morphism.Transitive UVMHS.Core.Classes.Morphism.Iso3
instance UVMHS.Core.Classes.Morphism.Reflexive (->)
instance UVMHS.Core.Classes.Morphism.Reflexive UVMHS.Core.Classes.Morphism.Iso
instance UVMHS.Core.Classes.Morphism.Reflexive UVMHS.Core.Classes.Morphism.Iso2
instance UVMHS.Core.Classes.Morphism.Reflexive UVMHS.Core.Classes.Morphism.Iso3

module UVMHS.Core.Classes.Lattice
class POrd a
(‚äë) :: POrd a => a -> a -> ùîπ
infix 4 ‚äë
class Bot a
bot :: Bot a => a
class Join a
(‚äî) :: Join a => a -> a -> a
infixl 5 ‚äî
class (Bot a, Join a) => JoinLattice a
class Top a
top :: Top a => a
class Meet a
(‚äì) :: Meet a => a -> a -> a
infixl 6 ‚äì
class (Top a, Meet a) => MeetLattice a
class (JoinLattice a, MeetLattice a) => Lattice a
class Dual a
dual :: Dual a => a -> a
class Difference a
(‚äü) :: Difference a => a -> a -> a
infixl 5 ‚äü
data PartialOrdering
PLT :: PartialOrdering
PEQ :: PartialOrdering
PGT :: PartialOrdering
PUN :: PartialOrdering
(‚àá) :: POrd a => a -> a -> PartialOrdering
infix 4 ‚àá
(‚äí) :: POrd a => a -> a -> ùîπ
infix 4 ‚äí
(‚™§) :: POrd a => a -> a -> ùîπ
infix 4 ‚™§

module UVMHS.Core.Classes.Functors
newtype NoCostID (a :: ‚òÖ)
NoCostID :: a -> NoCostID (a :: ‚òÖ)
class FunctorM (t :: ‚òÖ -> ‚òÖ)
mapM :: forall m a b. (FunctorM t, Monad m) => (a -> m b) -> t a -> m (t b)
mapM :: (FunctorM t, OFunctorM t, Monad m) => (a -> m b) -> t a -> m (t b)
class OFunctorM (t :: ‚òÖ -> ‚òÖ)
omapM :: forall m a b. (OFunctorM t, Monad m) => (a -> m (ùëÇ b)) -> t a -> m (t b)
class KFunctorM (k :: ‚òÖ) (t :: ‚òÖ -> ‚òÖ) | t -> k
kmapM :: forall m a b. (KFunctorM k t, Monad m) => (k -> a -> m b) -> t a -> m (t b)
kmapAtM :: forall m a. (KFunctorM k t, Monad m) => k -> (a -> m a) -> t a -> m (t a)
kmapM :: (KFunctorM k t, OKFunctorM k t, Monad m) => (k -> a -> m b) -> t a -> m (t b)
kmapAtM :: (KFunctorM k t, OKFunctorM k t, Monad m) => k -> (a -> m a) -> t a -> m (t a)
class OKFunctorM (k :: ‚òÖ) (t :: ‚òÖ -> ‚òÖ) | t -> k
okmapM :: forall m a b. (OKFunctorM k t, Monad m) => (k -> a -> m (ùëÇ b)) -> t a -> m (t b)
okmapAtM :: forall m a. (OKFunctorM k t, Monad m) => k -> (ùëÇ a -> m (ùëÇ a)) -> t a -> m (t a)
class BiFunctorM (t :: ‚òÖ -> ‚òÖ)
bimapM :: forall m a b c. (BiFunctorM t, Monad m) => (a -> m c) -> (b -> m c) -> (a -> b -> m c) -> t a -> t b -> m (t c)
bimapM :: (BiFunctorM t, OBiFunctorM t, Monad m) => (a -> m c) -> (b -> m c) -> (a -> b -> m c) -> t a -> t b -> m (t c)
class OBiFunctorM (t :: ‚òÖ -> ‚òÖ)
obimapM :: forall m a b c. (OBiFunctorM t, Monad m) => (a -> m (ùëÇ c)) -> (b -> m (ùëÇ c)) -> (a -> b -> m (ùëÇ c)) -> t a -> t b -> m (t c)
class KBiFunctorM (k :: ‚òÖ) (t :: ‚òÖ -> ‚òÖ) | t -> k
kbimapM :: forall m a b c. (KBiFunctorM k t, Monad m) => (k -> a -> m c) -> (k -> b -> m c) -> (k -> a -> b -> m c) -> t a -> t b -> m (t c)
kbimapM :: (KBiFunctorM k t, OKBiFunctorM k t, Monad m) => (k -> a -> m c) -> (k -> b -> m c) -> (k -> a -> b -> m c) -> t a -> t b -> m (t c)
class OKBiFunctorM (k :: ‚òÖ) (t :: ‚òÖ -> ‚òÖ) | t -> k
okbimapM :: forall m a b c. (OKBiFunctorM k t, Monad m) => (k -> a -> m (ùëÇ c)) -> (k -> b -> m (ùëÇ c)) -> (k -> a -> b -> m (ùëÇ c)) -> t a -> t b -> m (t c)
class Functor (t :: ‚òÖ -> ‚òÖ)
map :: Functor t => (a -> b) -> t a -> t b
map :: forall a b. (Functor t, FunctorM t) => (a -> b) -> t a -> t b
class OFunctor (t :: ‚òÖ -> ‚òÖ)
omap :: OFunctor t => (a -> ùëÇ b) -> t a -> t b
omap :: forall a b. (OFunctor t, OFunctorM t) => (a -> ùëÇ b) -> t a -> t b
class KFunctor (k :: ‚òÖ) (t :: ‚òÖ -> ‚òÖ) | t -> k
kmap :: KFunctor k t => (k -> a -> b) -> t a -> t b
kmapAt :: KFunctor k t => k -> (a -> a) -> t a -> t a
kmap :: forall a b. (KFunctor k t, KFunctorM k t) => (k -> a -> b) -> t a -> t b
kmapAt :: forall a. (KFunctor k t, KFunctorM k t) => k -> (a -> a) -> t a -> t a
class OKFunctor (k :: ‚òÖ) (t :: ‚òÖ -> ‚òÖ) | t -> k
okmap :: OKFunctor k t => (k -> a -> ùëÇ b) -> t a -> t b
okmapAt :: OKFunctor k t => k -> (ùëÇ a -> ùëÇ a) -> t a -> t a
okmap :: forall a b. (OKFunctor k t, OKFunctorM k t) => (k -> a -> ùëÇ b) -> t a -> t b
okmapAt :: forall a. (OKFunctor k t, OKFunctorM k t) => k -> (ùëÇ a -> ùëÇ a) -> t a -> t a
class BiFunctor (t :: ‚òÖ -> ‚òÖ)
bimap :: BiFunctor t => (a -> c) -> (b -> c) -> (a -> b -> c) -> t a -> t b -> t c
bimap :: forall a b c. (BiFunctor t, BiFunctorM t) => (a -> c) -> (b -> c) -> (a -> b -> c) -> t a -> t b -> t c
class OBiFunctor (t :: ‚òÖ -> ‚òÖ)
obimap :: OBiFunctor t => (a -> ùëÇ c) -> (b -> ùëÇ c) -> (a -> b -> ùëÇ c) -> t a -> t b -> t c
obimap :: forall a b c. (OBiFunctor t, OBiFunctorM t) => (a -> ùëÇ c) -> (b -> ùëÇ c) -> (a -> b -> ùëÇ c) -> t a -> t b -> t c
class KBiFunctor (k :: ‚òÖ) (t :: ‚òÖ -> ‚òÖ)
kbimap :: KBiFunctor k t => (k -> a -> c) -> (k -> b -> c) -> (k -> a -> b -> c) -> t a -> t b -> t c
kbimap :: forall a b c. (KBiFunctor k t, KBiFunctorM k t) => (k -> a -> c) -> (k -> b -> c) -> (k -> a -> b -> c) -> t a -> t b -> t c
class OKBiFunctor (k :: ‚òÖ) (t :: ‚òÖ -> ‚òÖ)
okbimap :: OKBiFunctor k t => (k -> a -> ùëÇ c) -> (k -> b -> ùëÇ c) -> (k -> a -> b -> ùëÇ c) -> t a -> t b -> t c
okbimap :: forall a b c. (OKBiFunctor k t, OKBiFunctorM k t) => (k -> a -> ùëÇ c) -> (k -> b -> ùëÇ c) -> (k -> a -> b -> ùëÇ c) -> t a -> t b -> t c
mapMOn :: (FunctorM t, Monad m) => t a -> (a -> m b) -> m (t b)
exchange :: (FunctorM t, Monad m) => t (m a) -> m (t a)
omapMOn :: (OFunctorM t, Monad m) => t a -> (a -> m (ùëÇ b)) -> m (t b)
kmapMOn :: (KFunctorM k t, Monad m) => t a -> (k -> a -> m b) -> m (t b)
kmapAtMOn :: (KFunctorM k t, Monad m) => k -> t a -> (a -> m a) -> m (t a)
okmapMOn :: (OKFunctorM k t, Monad m) => t a -> (k -> a -> m (ùëÇ b)) -> m (t b)
okmapAtMOn :: (OKFunctorM k t, Monad m) => k -> t a -> (ùëÇ a -> m (ùëÇ a)) -> m (t a)
bimapMOn :: (BiFunctorM t, Monad m) => t a -> t b -> (a -> m c) -> (b -> m c) -> (a -> b -> m c) -> m (t c)
obimapMOn :: (OBiFunctorM t, Monad m) => t a -> t b -> (a -> m (ùëÇ c)) -> (b -> m (ùëÇ c)) -> (a -> b -> m (ùëÇ c)) -> m (t c)
kbimapMOn :: (KBiFunctorM k t, Monad m) => t a -> t b -> (k -> a -> m c) -> (k -> b -> m c) -> (k -> a -> b -> m c) -> m (t c)
okbimapMOn :: (OKBiFunctorM k t, Monad m) => t a -> t b -> (k -> a -> m (ùëÇ c)) -> (k -> b -> m (ùëÇ c)) -> (k -> a -> b -> m (ùëÇ c)) -> m (t c)
mapOn :: Functor t => t a -> (a -> b) -> t b
mapp :: (Functor t, Functor u) => (a -> b) -> t (u a) -> t (u b)
mappOn :: (Functor t, Functor u) => t (u a) -> (a -> b) -> t (u b)
mappp :: (Functor t, Functor u, Functor v) => (a -> b) -> t (u (v a)) -> t (u (v b))
mapppOn :: (Functor t, Functor u, Functor v) => t (u (v a)) -> (a -> b) -> t (u (v b))
(^$) :: Functor t => (a -> b) -> t a -> t b
infixr 0 ^$
(^^$) :: (Functor t, Functor u) => (a -> b) -> t (u a) -> t (u b)
infixr 0 ^^$
(^‚àò) :: Functor t => (b -> c) -> (a -> t b) -> a -> t c
infixl 7 ^‚àò
(^^‚àò) :: (Functor t, Functor u) => (b -> c) -> (a -> t (u b)) -> a -> t (u c)
infixl 7 ^^‚àò
omapOn :: OFunctor t => t a -> (a -> ùëÇ b) -> t b
kmapOn :: KFunctor k t => t a -> (k -> a -> b) -> t b
kmapAtOn :: KFunctor k t => k -> t a -> (a -> a) -> t a
okmapOn :: OKFunctor k t => t a -> (k -> a -> ùëÇ b) -> t b
okmapAtOn :: OKFunctor k t => k -> t a -> (ùëÇ a -> ùëÇ a) -> t a
bimapOn :: BiFunctor t => t a -> t b -> (a -> c) -> (b -> c) -> (a -> b -> c) -> t c
obimapOn :: OBiFunctor t => t a -> t b -> (a -> ùëÇ c) -> (b -> ùëÇ c) -> (a -> b -> ùëÇ c) -> t c
kbimapOn :: KBiFunctor k t => t a -> t b -> (k -> a -> c) -> (k -> b -> c) -> (k -> a -> b -> c) -> t c
okbimapOn :: OKBiFunctor k t => t a -> t b -> (k -> a -> ùëÇ c) -> (k -> b -> ùëÇ c) -> (k -> a -> b -> ùëÇ c) -> t c
class Functor2 (w :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ))
map2 :: Functor2 w => (t ‚Üí‚Åª u) -> w t ‚Üí‚Åª w u
class Functor2Iso (w :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ))
map2iso :: Functor2Iso w => Iso2 t u -> w t ‚Üí‚Åª w u
(>>=) :: Bind m => m a -> (a -> m b) -> m b
(>>) :: Bind m => m a -> m b -> m b
class Return (m :: ‚òÖ -> ‚òÖ)
return :: Return m => a -> m a
class Bind (m :: ‚òÖ -> ‚òÖ)
(‚â´=) :: Bind m => m a -> (a -> m b) -> m b
infixl 1 ‚â´=
class (Functor m, Return m, Bind m) => Monad m
class Transformer (t :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ))
lift :: forall m a. (Transformer t, Monad m) => m a -> t m a
(*‚ãÖ) :: Bind m => (a -> m b) -> m a -> m b
(*$) :: Bind m => (a -> m b) -> m a -> m b
infixr 0 *$
(*‚àò) :: Bind m => (b -> m c) -> (a -> m b) -> a -> m c
infixl 7 *‚àò
kreturn :: Return m => (a -> b) -> a -> m b
extend :: Bind m => (a -> m b) -> m a -> m b
(‚â´) :: Bind m => m a -> m b -> m b
infixl 1 ‚â´
void :: Functor m => m a -> m ()
mjoin :: Bind m => m (m a) -> m a
mmap :: Monad m => (a -> b) -> m a -> m b
(‚ßÜ) :: Monad m => m a -> m b -> m (a ‚àß b)
infixl 6 ‚ßÜ
(‚ä°) :: Monad m => m (a -> b) -> m a -> m b
skip :: Return m => m ()
when :: Return m => ùîπ -> (() -> m ()) -> m ()
whenM :: Monad m => m ùîπ -> (() -> m ()) -> m ()
newtype ToHSM (m :: ‚òÖ -> ‚òÖ) (a :: ‚òÖ)
ToHSM :: m a -> ToHSM (m :: ‚òÖ -> ‚òÖ) (a :: ‚òÖ)
[unToHSM] :: ToHSM (m :: ‚òÖ -> ‚òÖ) (a :: ‚òÖ) -> m a
tohsMonad :: forall m. Monad m => W (Monad m)
newtype FrHSM (m :: ‚òÖ -> ‚òÖ) (a :: ‚òÖ)
FrHSM :: m a -> FrHSM (m :: ‚òÖ -> ‚òÖ) (a :: ‚òÖ)
[unFrHSM] :: FrHSM (m :: ‚òÖ -> ‚òÖ) (a :: ‚òÖ) -> m a
frhsMonad :: forall m. Monad m => W (Monad m)
instance GHC.Base.Functor t => UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Classes.Functors.FrHSM t)
instance GHC.Base.Monad m => UVMHS.Core.Classes.Functors.Return (UVMHS.Core.Classes.Functors.FrHSM m)
instance GHC.Base.Monad m => UVMHS.Core.Classes.Functors.Bind (UVMHS.Core.Classes.Functors.FrHSM m)
instance GHC.Base.Monad m => UVMHS.Core.Classes.Functors.Monad (UVMHS.Core.Classes.Functors.FrHSM m)
instance UVMHS.Core.Classes.Functors.Functor t => GHC.Base.Functor (UVMHS.Core.Classes.Functors.ToHSM t)
instance UVMHS.Core.Classes.Functors.Monad m => GHC.Base.Applicative (UVMHS.Core.Classes.Functors.ToHSM m)
instance UVMHS.Core.Classes.Functors.Monad m => GHC.Base.Monad (UVMHS.Core.Classes.Functors.ToHSM m)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Classes.Functors.NoCostID
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Core.Classes.Functors.NoCostID
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Core.Classes.Functors.NoCostID
instance UVMHS.Core.Classes.Functors.Return UVMHS.Core.Classes.Functors.NoCostID

module UVMHS.Core.Classes.Monoid
class Null a
null :: Null a => a
class Append a
(‚ß∫) :: Append a => a -> a -> a
infixl 5 ‚ß∫
class (Null a, Append a) => Monoid a
prepend :: Append a => a -> a -> a
pospend :: Append a => a -> a -> a
class Unit a
unit :: Unit a => a
class Cross a
(‚®≥) :: Cross a => a -> a -> a
infixl 6 ‚®≥
class (Monoid a, Unit a, Cross a) => Prodoid a
class Eps a
eps :: Eps a => a
class Seq a
(‚ñ∑) :: Seq a => a -> a -> a
infixl 7 ‚ñ∑
class (Eps a, Seq a) => Seqoid a
opt :: (Append a, Eps a) => a -> a
class Star a
star :: Star a => a -> a
class (Seqoid a, Star a) => Kleene a
oom :: Kleene a => a -> a
newtype Compose a
Compose :: (a -> a) -> Compose a
[unCompose] :: Compose a -> a -> a
newtype MCompose m a
MCompose :: (a -> m a) -> MCompose m a
[unMCompose] :: MCompose m a -> a -> m a
instance UVMHS.Core.Classes.Functors.Return m => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Classes.Monoid.MCompose m a)
instance UVMHS.Core.Classes.Functors.Bind m => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Classes.Monoid.MCompose m a)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Classes.Monoid.MCompose m a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Classes.Monoid.Compose a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Classes.Monoid.Compose a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Classes.Monoid.Compose a)

module UVMHS.Core.Classes.Constraints
class U a
class (c‚ÇÅ a, c‚ÇÇ a) => ( c‚ÇÅ :‚àß: c‚ÇÇ ) a
infixl 3 :‚àß:
class (t (u a)) => ( t :‚àò: u ) a
infixl 7 :‚àò:
class (:‚áí:) c‚ÇÅ c‚ÇÇ
impl :: (:‚áí:) c‚ÇÅ c‚ÇÇ => W c‚ÇÅ -> W c‚ÇÇ
infixr 1 :‚áí:
type FCoercibleRel t t' = (forall x x'. (Coercible x x') => Coercible (t x) (t' x')) :: Constraint
type FCoercible t = FCoercibleRel t t
fcoercibleW_UNSAFE :: W (FCoercible m)
type Func (c :: ‚òÖ -> Constraint) (t :: ‚òÖ -> ‚òÖ) = (forall x. (c x) => c (t x)) :: Constraint
type Const (c :: ‚òÖ -> Constraint) (t :: ‚òÖ -> ‚òÖ) = (forall x. c (t x)) :: Constraint
instance forall k1 k2 (t :: k1 -> GHC.Types.Constraint) (u :: k2 -> k1) (a :: k2). t (u a) => (UVMHS.Core.Classes.Constraints.:‚àò:) t u a
instance forall k (c‚ÇÅ :: k -> GHC.Types.Constraint) (a :: k) (c‚ÇÇ :: k -> GHC.Types.Constraint). (c‚ÇÅ a, c‚ÇÇ a) => (UVMHS.Core.Classes.Constraints.:‚àß:) c‚ÇÅ c‚ÇÇ a
instance forall k (a :: k). UVMHS.Core.Classes.Constraints.U a

module UVMHS.Core.Classes.Comonad
class Extract (w :: ‚òÖ -> ‚òÖ)
extract :: Extract w => w a -> a
class Cobind (w :: ‚òÖ -> ‚òÖ)
(=‚â´) :: Cobind w => w a -> (w a -> b) -> w b
infixr 1 =‚â´
class (Functor w, Extract w, Cobind w) => Comonad w
wextend :: Cobind w => (w a -> b) -> w a -> w b
(%‚ãÖ) :: Cobind w => (w a -> b) -> w a -> w b
(%$) :: Cobind w => (w a -> b) -> w a -> w b
(%‚àò) :: Cobind w => (w b -> c) -> (w a -> b) -> w a -> c
kextract :: Extract w => (a -> b) -> w a -> b
kextract2 :: Extract w => (a -> b -> c) -> w a -> w b -> c
siphon :: Cobind w => w a -> b -> w b
submerge :: (Functor m, Comonad w) => w (m a) -> m (w a)
wmap :: Comonad w => (a -> b) -> w a -> w b

module UVMHS.Core.Classes.Collections
class All a
all :: All a => ùêº a
class ASized a
asize :: ASized a => a -> ‚Ñï64
class CSized a
csize :: CSized a => a -> ‚Ñï64
class Single a t | t -> a
single :: Single a t => a -> t
class Lookup k v t | t -> k, t -> v
(‚ãï?) :: Lookup k v t => t -> k -> ùëÇ v
infixl 7 ‚ãï?
class Access k v t | t -> k, t -> v
(‚ãï) :: Access k v t => t -> k -> v
infixl 7 ‚ãï
class ToIter a t | t -> a
iter :: ToIter a t => t -> ùêº a
lup :: Lookup k v t => k -> t -> ùëÇ v
(‚ãï!) :: (Lookup k v t, STACK) => t -> k -> v
infixl 7 ‚ãï!
lupŒ© :: Lookup k v t => k -> t -> v

module UVMHS.Core.Classes.DSL
class Arrow a
(‚á®) :: Arrow a => a -> a -> a
infixr 1 ‚á®
class Apply a
(‚äô) :: Apply a => a -> a -> a
infixl 7 ‚äô
class Tup a
tup :: (Tup a, ToIter a t) => t -> a
(‚äô$) :: Apply e => e -> e -> e
infixr 0 ‚äô$
(‚äô‚ãÜ) :: (Apply e, ToIter e t) => e -> t -> e
infixl 7 ‚äô‚ãÜ

module UVMHS.Core.Classes.Bitty
class BitZero a
bzero :: BitZero a => a
class BitOne a
bone :: BitOne a => a
class BitComp a
comp :: BitComp a => a -> a
class BitAnd a
(‚üë) :: BitAnd a => a -> a -> a
infixl 6 ‚üë
class BitOr a
(‚üá) :: BitOr a => a -> a -> a
infixl 5 ‚üá
class BitXor a
(‚äª) :: BitXor a => a -> a -> a
infixl 5 ‚äª
class BitShiftL a
(‚ãò) :: BitShiftL a => a -> ‚Ñï64 -> a
infixl 7 ‚ãò
class BitShiftR a
(‚ãô) :: BitShiftR a => a -> ‚Ñï64 -> a
infixl 7 ‚ãô
class BitSize a
bsize :: BitSize a => P a -> ‚Ñï64
class (BitZero a, BitOne a, BitComp a, BitAnd a, BitOr a, BitXor a, BitShiftL a, BitShiftR a, BitSize a) => Bitty a
bit :: (BitOne a, BitShiftL a) => ‚Ñï64 -> a
bget :: (Eq a, BitZero a, BitOne a, BitAnd a, BitShiftL a) => ‚Ñï64 -> a -> Bool
bset :: (BitOne a, BitOr a, BitShiftL a) => ‚Ñï64 -> a -> a
bflp :: (BitOne a, BitXor a, BitShiftL a) => ‚Ñï64 -> a -> a
bclr :: (BitOne a, BitComp a, BitAnd a, BitShiftL a) => ‚Ñï64 -> a -> a

module UVMHS.Core.Classes.Arithmetic
class Zero a
zero :: Zero a => a
class Plus a
(+) :: Plus a => a -> a -> a
infixl 5 +
class Minus a
(-) :: Minus a => a -> a -> a
infixl 5 -
class One a
one :: One a => a
class Times a
(√ó) :: Times a => a -> a -> a
infixl 6 √ó
class Divide a
(/) :: Divide a => a -> a -> a
infixl 6 /
class DivMod a
(‚åø) :: DivMod a => a -> a -> a
(√∑) :: DivMod a => a -> a -> a
infixl 6 ‚åø
infixl 6 √∑
class Pon a
(^^) :: Pon a => a -> ‚Ñï -> a
class Pow a
(^) :: Pow a => a -> a -> a
infixl 7 ^
class Root a
root :: Root a => a -> a
class Log a
log :: Log a => a -> a
class Efn a
efn :: Efn a => a -> a
class Sin a
sin :: Sin a => a -> a
class Cos a
cos :: Cos a => a -> a
class (Zero a, Plus a) => Additive a
class (Additive a, One a, Times a) => Multiplicative a
succ :: (One a, Plus a) => a -> a
pred :: (One a, Minus a) => a -> a
even :: (Eq a, Additive a, One a, DivMod a) => a -> ùîπ
odd :: (Eq a, Additive a, One a, DivMod a) => a -> ùîπ
neg :: (Zero a, Minus a) => a -> a
(‚®µ) :: (Functor f, Multiplicative a) => a -> f a -> f a
infixl 6 ‚®µ
(‚®¥) :: (Functor f, Multiplicative a) => f a -> a -> f a
class ToNat a
nat :: ToNat a => a -> ‚Ñï
class ToNat64 a
nat64 :: ToNat64 a => a -> ‚Ñï64
class ToNat32 a
nat32 :: ToNat32 a => a -> ‚Ñï32
class ToNat16 a
nat16 :: ToNat16 a => a -> ‚Ñï16
class ToNat8 a
nat8 :: ToNat8 a => a -> ‚Ñï8
class ToNatO a
natO :: ToNatO a => a -> ùëÇ ‚Ñï
class ToNatO64 a
natO64 :: ToNatO64 a => a -> ùëÇ ‚Ñï64
class ToNatO32 a
natO32 :: ToNatO32 a => a -> ùëÇ ‚Ñï32
class ToNatO16 a
natO16 :: ToNatO16 a => a -> ùëÇ ‚Ñï16
class ToNatO8 a
natO8 :: ToNatO8 a => a -> ùëÇ ‚Ñï8
natŒ© :: (ToNatO a, STACK) => a -> ‚Ñï
natŒ©64 :: (ToNatO64 a, STACK) => a -> ‚Ñï64
natŒ©32 :: (ToNatO32 a, STACK) => a -> ‚Ñï32
natŒ©16 :: (ToNatO16 a, STACK) => a -> ‚Ñï16
natŒ©8 :: (ToNatO8 a, STACK) => a -> ‚Ñï8
class ToInt a
int :: ToInt a => a -> ‚Ñ§
class ToInt64 a
int64 :: ToInt64 a => a -> ‚Ñ§64
class ToInt32 a
int32 :: ToInt32 a => a -> ‚Ñ§32
class ToInt16 a
int16 :: ToInt16 a => a -> ‚Ñ§16
class ToInt8 a
int8 :: ToInt8 a => a -> ‚Ñ§8
class ToIntO a
intO :: ToIntO a => a -> ùëÇ ‚Ñ§
class ToIntO64 a
intO64 :: ToIntO64 a => a -> ùëÇ ‚Ñ§64
class ToIntO32 a
intO32 :: ToIntO32 a => a -> ùëÇ ‚Ñ§32
class ToIntO16 a
intO16 :: ToIntO16 a => a -> ùëÇ ‚Ñ§16
class ToIntO8 a
intO8 :: ToIntO8 a => a -> ùëÇ ‚Ñ§8
intŒ© :: (ToIntO a, STACK) => a -> ‚Ñ§
intŒ©64 :: (ToIntO64 a, STACK) => a -> ‚Ñ§64
intŒ©32 :: (ToIntO32 a, STACK) => a -> ‚Ñ§32
intŒ©16 :: (ToIntO16 a, STACK) => a -> ‚Ñ§16
intŒ©8 :: (ToIntO8 a, STACK) => a -> ‚Ñ§8
class ToRational a
rat :: ToRational a => a -> ‚Ñö
class ToRationalO a
ratO :: ToRationalO a => a -> ùëÇ ‚Ñö
class ToRational·¥æ a
rat·¥æ :: ToRational·¥æ a => a -> ‚Ñö·¥æ
class ToRational·¥æO a
rat·¥æO :: ToRational·¥æO a => a -> ùëÇ ‚Ñö·¥æ
class ToDouble a
dbl :: ToDouble a => a -> ùîª
class ToDoubleO a
dblO :: ToDoubleO a => a -> ùëÇ ùîª
class ToDouble·¥æ a
dbl·¥æ :: ToDouble·¥æ a => a -> ùîª·¥æ
class ToDouble·¥æO a
dbl·¥æO :: ToDouble·¥æO a => a -> ùëÇ ùîª·¥æ
class ToNumber a
num :: ToNumber a => a -> ‚Ñù
class ToNumber·¥æ a
num·¥æ :: ToNumber·¥æ a => a -> ‚Ñù·¥æ
class ToNumber·¥æO a
num·¥æO :: ToNumber·¥æO a => a -> ùëÇ ‚Ñù·¥æ
ratŒ© :: (ToRationalO a, STACK) => a -> ‚Ñö
rat·¥æŒ© :: (ToRational·¥æO a, STACK) => a -> ‚Ñö·¥æ
dblŒ© :: (ToDoubleO a, STACK) => a -> ùîª
dbl·¥æŒ© :: (ToDouble·¥æO a, STACK) => a -> ùîª·¥æ
num·¥æŒ© :: (ToNumber·¥æO a, STACK) => a -> ‚Ñù·¥æ

module UVMHS.Core.Classes

module UVMHS.Core.Data.Unit
instance UVMHS.Core.Classes.Monoid.Null ()
instance UVMHS.Core.Classes.Monoid.Append ()
instance UVMHS.Core.Classes.Monoid.Monoid ()
instance UVMHS.Core.Classes.Arithmetic.Zero ()
instance UVMHS.Core.Classes.Arithmetic.Plus ()
instance UVMHS.Core.Classes.Arithmetic.Additive ()

module UVMHS.Core.Data.Stream
eqùëÜ :: Eq a => ùëÜ a -> ùëÜ a -> ùîπ
compareùëÜ :: Ord a => ùëÜ a -> ùëÜ a -> Ordering
streamùêº :: forall a. ùêº a -> ùëÜ a
iterùëÜ :: ùëÜ a -> ùêº a
zipWithùëÜ :: (a -> b -> c) -> ùëÜ a -> ùëÜ b -> ùëÜ c
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Init.ùëÜ a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Init.ùëÜ a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùëÜ a)

module UVMHS.Core.Data.Option
iterùëÇ :: ùëÇ a -> ùêº a
elimùëÇ :: (() -> b) -> (a -> b) -> ùëÇ a -> b
isNone :: ùëÇ a -> ùîπ
isSome :: ùëÇ a -> ùîπ
ifNone :: a -> ùëÇ a -> a
ifNoneZ :: a -> ùëÇ a -> a
ifNoneM :: Return m => m a -> ùëÇ a -> m a
ifNoneMZ :: Return m => m a -> ùëÇ a -> m a
first :: ùëÇ a -> ùëÇ a -> ùëÇ a
last :: ùëÇ a -> ùëÇ a -> ùëÇ a
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.Functors.Return UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Init.ùëÇ a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Init.ùëÇ a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Init.ùëÇ a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùëÇ a)
instance UVMHS.Core.Init.ùëÇ a UVMHS.Core.Classes.Morphism.‚áÑ (() UVMHS.Core.Init.‚à® a)

module UVMHS.Core.Data.LazyList
emptyLL :: [a]
singleLL :: a -> [a]
consLL :: a -> [a] -> [a]
snocLL :: [a] -> a -> [a]
appendLL :: [a] -> [a] -> [a]
mapLL :: (a -> b) -> [a] -> [b]
bindLL :: [a] -> (a -> [b]) -> [b]
mapMLL :: Monad m => (a -> m b) -> [a] -> m [b]
instance UVMHS.Core.Classes.Monoid.Null [a]
instance UVMHS.Core.Classes.Monoid.Append [a]
instance UVMHS.Core.Classes.Monoid.Monoid [a]
instance UVMHS.Core.Classes.Functors.Functor []
instance UVMHS.Core.Classes.Functors.Return []
instance UVMHS.Core.Classes.Functors.Bind []
instance UVMHS.Core.Classes.Functors.Monad []
instance UVMHS.Core.Classes.Functors.FunctorM []
instance UVMHS.Core.Classes.Collections.Single a [a]
instance UVMHS.Core.Classes.Collections.ToIter a [a]

module UVMHS.Core.Data.List
emptyùêø :: ùêø a
singleùêø :: a -> ùêø a
consùêø :: a -> ùêø a -> ùêø a
snocùêø :: ùêø a -> a -> ùêø a
unsnocùêø :: ùêø a -> ùëÇ (ùêø a ‚àß a)
appendùêø :: ùêø a -> ùêø a -> ùêø a
mapùêø :: (a -> b) -> ùêø a -> ùêø b
bindùêø :: ùêø a -> (a -> ùêø b) -> ùêø b
mapMùêø :: Monad m => (a -> m b) -> ùêø a -> m (ùêø b)
cart :: ùêø (ùêø a) -> ùêø (ùêø a)
swivelL :: ùêø a -> a -> a ‚àß ùêø a
swivelR :: a -> ùêø a -> ùêø a ‚àß a
iswivelL :: ùêø (a ‚àß i) -> a -> a ‚àß ùêø (i ‚àß a)
iswivelR :: a -> ùêø (i ‚àß a) -> ùêø (a ‚àß i) ‚àß a
zipSameLength :: ùêø a -> ùêø b -> ùëÇ (ùêø (a ‚àß b))
split :: ùêø (a ‚àß b) -> ùêø a ‚àß ùêø b
firstSome :: ùêø (ùëÇ a) -> ùëÇ a
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Init.ùêø a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Init.ùêø a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Init.ùêø a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Init.ùêø
instance UVMHS.Core.Classes.Functors.Return UVMHS.Core.Init.ùêø
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Core.Init.ùêø
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Core.Init.ùêø
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Core.Init.ùêø
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Init.ùêø a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùêø a)

module UVMHS.Core.Data.Function
pipe :: (a -> b) -> (b -> c) -> a -> c
iterateWith :: (a -> ùëÇ a) -> a -> a
iterateFrom :: a -> (a -> ùëÇ a) -> a
instance UVMHS.Core.Classes.Functors.Functor ((->) r)
instance UVMHS.Core.Classes.Functors.Return ((->) r)
instance UVMHS.Core.Classes.Functors.Bind ((->) r)
instance UVMHS.Core.Classes.Functors.Monad ((->) r)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (r -> a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (r -> a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (r -> a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (() -> a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (() -> a)
instance GHC.Show.Show a => GHC.Show.Show (() -> a)

module UVMHS.Core.Data.Choice
elimChoice :: (a -> c) -> (b -> c) -> (a ‚à® b) -> c
mapChoice :: (a‚ÇÅ -> a‚ÇÇ) -> (b‚ÇÅ -> b‚ÇÇ) -> (a‚ÇÅ ‚à® b‚ÇÅ) -> a‚ÇÇ ‚à® b‚ÇÇ
mapInl :: (a‚ÇÅ -> a‚ÇÇ) -> (a‚ÇÅ ‚à® b) -> a‚ÇÇ ‚à® b
mapInr :: (b‚ÇÅ -> b‚ÇÇ) -> (a ‚à® b‚ÇÅ) -> a ‚à® b‚ÇÇ
mapMChoice :: Monad m => (a -> m a') -> (b -> m b') -> (a ‚à® b) -> m (a' ‚à® b')
mapMInl :: Monad m => (a -> m a') -> (a ‚à® b) -> m (a' ‚à® b)
mapMInr :: Monad m => (b -> m b') -> (a ‚à® b) -> m (a ‚à® b')
instance UVMHS.Core.Classes.Functors.Functor ((UVMHS.Core.Init.‚à®) a)
instance UVMHS.Core.Classes.Functors.Return ((UVMHS.Core.Init.‚à®) a)
instance UVMHS.Core.Classes.Functors.Bind ((UVMHS.Core.Init.‚à®) a)
instance UVMHS.Core.Classes.Functors.Monad ((UVMHS.Core.Init.‚à®) a)
instance UVMHS.Core.Classes.Functors.FunctorM ((UVMHS.Core.Init.‚à®) a)
instance UVMHS.Core.Classes.Monoid.Null b => UVMHS.Core.Classes.Monoid.Null (a UVMHS.Core.Init.‚à® b)
instance (UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Append b) => UVMHS.Core.Classes.Monoid.Append (a UVMHS.Core.Init.‚à® b)
instance (UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Monoid b) => UVMHS.Core.Classes.Monoid.Monoid (a UVMHS.Core.Init.‚à® b)

module UVMHS.Core.Data.Bool
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.POrd UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Lattice UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Dual UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.ùîπ

module UVMHS.Core.Data.Arithmetic
zabs :: ‚Ñ§ -> ‚Ñï
qabs :: ‚Ñö -> ‚Ñö·¥æ
numer :: ‚Ñö -> ‚Ñ§
denom :: ‚Ñö -> ‚Ñï
numer·¥æ :: ‚Ñö·¥æ -> ‚Ñï
denom·¥æ :: ‚Ñö·¥æ -> ‚Ñï
truncate :: ùîª -> ‚Ñ§
ceiling :: ùîª -> ‚Ñ§
floor :: ùîª -> ‚Ñ§
truncate·¥æ :: ùîª·¥æ -> ‚Ñï
ceiling·¥æ :: ùîª·¥æ -> ‚Ñï
floor·¥æ :: ùîª·¥æ -> ‚Ñï
minusùîª·¥æ :: ùîª·¥æ -> ùîª·¥æ -> ùîª·¥æ
numberBOp :: (‚Ñ§ -> ‚Ñ§ -> ‚Ñù) -> (‚Ñö -> ‚Ñö -> ‚Ñù) -> (ùîª -> ùîª -> ‚Ñù) -> ‚Ñù -> ‚Ñù -> ‚Ñù
numberBOp·¥æ :: (‚Ñï -> ‚Ñï -> ‚Ñù·¥æ) -> (‚Ñö·¥æ -> ‚Ñö·¥æ -> ‚Ñù·¥æ) -> (ùîª·¥æ -> ùîª·¥æ -> ‚Ñù·¥æ) -> ‚Ñù·¥æ -> ‚Ñù·¥æ -> ‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNat32 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat32 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat16 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat32 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat16 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat8 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt16 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt16 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt16 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt8 UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.‚Ñö
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æ UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Root UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Log UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Efn UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Sin UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Cos UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æO UVMHS.Core.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Root UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Log UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Efn UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Sin UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Cos UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNumber UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNumber·¥æ UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Root UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Log UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Efn UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Sin UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Cos UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æO UVMHS.Core.Init.‚Ñù
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Pow UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Root UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Log UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToRational·¥æO UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Core.Classes.Arithmetic.ToDouble·¥æ UVMHS.Core.Init.‚Ñù·¥æ

module UVMHS.Core.Data.String
emptyùïä :: ùïä -> ùîπ
singleùïä :: ‚ÑÇ -> ùïä
buildùïäC :: ToIter ‚ÑÇ t => t -> ùïä
buildùïäS :: ToIter ùïä t => t -> ùïä
buildùïäCN :: ToIter ‚ÑÇ t => ‚Ñï64 -> t -> ùïä
buildùïäSN :: ToIter ùïä t => ‚Ñï64 -> t -> ùïä
showùïä :: Show a => a -> ùïä
readùïä :: Read a => ùïä -> a
lowerùïä :: ùïä -> ùïä
upperùïä :: ùïä -> ùïä
isEmptyùïä :: ùïä -> ùîπ
lengthùïä :: ùïä -> ‚Ñï
length64ùïä :: ùïä -> ‚Ñï64
splitOnùïä :: ùïä -> ùïä -> ùêº ùïä
replaceùïä :: ùïä -> ùïä -> ùïä -> ùïä
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.Init.ùïä
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.Init.ùïä
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.Init.ùïä
instance UVMHS.Core.Classes.Collections.Single UVMHS.Core.Init.‚ÑÇ UVMHS.Core.Init.ùïä
instance UVMHS.Core.Classes.Collections.ToIter UVMHS.Core.Init.‚ÑÇ UVMHS.Core.Init.ùïä
instance UVMHS.Core.Classes.Collections.Lookup UVMHS.Core.Init.‚Ñï UVMHS.Core.Init.‚ÑÇ UVMHS.Core.Init.ùïä

module UVMHS.Core.Data.Pair
fst :: (a ‚àß b) -> a
snd :: (a ‚àß b) -> b
swap :: (a ‚àß b) -> b ‚àß a
mapPair :: (a‚ÇÅ -> a‚ÇÇ) -> (b‚ÇÅ -> b‚ÇÇ) -> (a‚ÇÅ ‚àß b‚ÇÅ) -> a‚ÇÇ ‚àß b‚ÇÇ
mapBoth :: (a -> a') -> (a ‚àß a) -> a' ‚àß a'
mapFst :: (a‚ÇÅ -> a‚ÇÇ) -> (a‚ÇÅ ‚àß b) -> a‚ÇÇ ‚àß b
mapSnd :: (b‚ÇÅ -> b‚ÇÇ) -> (a ‚àß b‚ÇÅ) -> a ‚àß b‚ÇÇ
mapMPair :: Monad m => (a -> m a') -> (b -> m b') -> (a ‚àß b) -> m (a' ‚àß b')
mapMBoth :: Monad m => (a -> m a) -> (a ‚àß a) -> m (a ‚àß a)
mapMFst :: Monad m => (a -> m a') -> (a ‚àß b) -> m (a' ‚àß b)
mapMSnd :: Monad m => (b -> m b') -> (a ‚àß b) -> m (a ‚àß b')
instance (UVMHS.Core.Classes.Lattice.POrd a, UVMHS.Core.Classes.Lattice.POrd b) => UVMHS.Core.Classes.Lattice.POrd (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Bot a, UVMHS.Core.Classes.Lattice.Bot b) => UVMHS.Core.Classes.Lattice.Bot (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.Join b) => UVMHS.Core.Classes.Lattice.Join (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Lattice.Top b) => UVMHS.Core.Classes.Lattice.Top (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Meet a, UVMHS.Core.Classes.Lattice.Meet b) => UVMHS.Core.Classes.Lattice.Meet (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Dual a, UVMHS.Core.Classes.Lattice.Dual b) => UVMHS.Core.Classes.Lattice.Dual (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Difference a, UVMHS.Core.Classes.Lattice.Difference b) => UVMHS.Core.Classes.Lattice.Difference (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.JoinLattice a, UVMHS.Core.Classes.Lattice.JoinLattice b) => UVMHS.Core.Classes.Lattice.JoinLattice (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.MeetLattice a, UVMHS.Core.Classes.Lattice.MeetLattice b) => UVMHS.Core.Classes.Lattice.MeetLattice (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Lattice a, UVMHS.Core.Classes.Lattice.Lattice b) => UVMHS.Core.Classes.Lattice.Lattice (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Monoid.Null a, UVMHS.Core.Classes.Monoid.Null b) => UVMHS.Core.Classes.Monoid.Null (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Append b) => UVMHS.Core.Classes.Monoid.Append (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Classes.Monoid.Monoid a, UVMHS.Core.Classes.Monoid.Monoid b) => UVMHS.Core.Classes.Monoid.Monoid (a UVMHS.Core.Init.‚àß b)
instance UVMHS.Core.Classes.Functors.Functor ((UVMHS.Core.Init.‚àß) a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Functors.Return ((UVMHS.Core.Init.‚àß) a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Functors.Bind ((UVMHS.Core.Init.‚àß) a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Functors.Monad ((UVMHS.Core.Init.‚àß) a)
instance UVMHS.Core.Classes.Functors.FunctorM ((UVMHS.Core.Init.‚àß) a)

module UVMHS.Core.Data.Lattice
lfp :: POrd a => a -> (a -> a) -> a
lfpN :: POrd a => ‚Ñï -> a -> (a -> a) -> a
gfp :: POrd a => a -> (a -> a) -> a
gfpN :: POrd a => ‚Ñï -> a -> (a -> a) -> a

module UVMHS.Core.Data.Iter
emptyùêº :: ùêº a
consùêº :: a -> ùêº a -> ùêº a
stream :: ToIter a t => t -> ùëÜ a
zipWith :: (ToIter a t‚ÇÅ, ToIter b t‚ÇÇ) => (a -> b -> c) -> t‚ÇÅ -> t‚ÇÇ -> ùêº c
zip :: (ToIter a t‚ÇÅ, ToIter b t‚ÇÇ) => t‚ÇÅ -> t‚ÇÇ -> ùêº (a ‚àß b)
snocùêº :: ùêº a -> a -> ùêº a
isEmpty :: ToIter a t => t -> ùîπ
firstElem :: ToIter a t => t -> ùëÇ a
appendùêº :: ùêº a -> ùêº a -> ùêº a
bindùêº :: forall a b. ùêº a -> (a -> ùêº b) -> ùêº b
mjoinùêº :: forall a. ùêº (ùêº a) -> ùêº a
mapMùêº :: Monad m => (a -> m b) -> ùêº a -> m (ùêº b)
fold :: ToIter a t => b -> (a -> b -> b) -> t -> b
foldFromWith :: ToIter a t => b -> (a -> b -> b) -> t -> b
foldFromOn :: ToIter a t => b -> t -> (a -> b -> b) -> b
foldOnFrom :: ToIter a t => t -> b -> (a -> b -> b) -> b
foldOnWith :: ToIter a t => t -> (a -> b -> b) -> b -> b
foldWithOn :: ToIter a t => (a -> b -> b) -> t -> b -> b
foldWithFrom :: ToIter a t => (a -> b -> b) -> b -> t -> b
foldk :: ToIter a t => b -> (a -> b -> (b -> b) -> b) -> t -> b
foldkFromWith :: ToIter a t => b -> (a -> b -> (b -> b) -> b) -> t -> b
foldkFromOn :: ToIter a t => b -> t -> (a -> b -> (b -> b) -> b) -> b
foldkOnFrom :: ToIter a t => t -> b -> (a -> b -> (b -> b) -> b) -> b
foldkOnWith :: ToIter a t => t -> (a -> b -> (b -> b) -> b) -> b -> b
foldkWithOn :: ToIter a t => (a -> b -> (b -> b) -> b) -> t -> b -> b
foldkWithFrom :: ToIter a t => (a -> b -> (b -> b) -> b) -> b -> t -> b
foldr :: ToIter a t => b -> (a -> b -> b) -> t -> b
foldrFromWith :: ToIter a t => b -> (a -> b -> b) -> t -> b
foldrFromOn :: ToIter a t => b -> t -> (a -> b -> b) -> b
foldrOnFrom :: ToIter a t => t -> b -> (a -> b -> b) -> b
foldrOnWith :: ToIter a t => t -> (a -> b -> b) -> b -> b
foldrWithOn :: ToIter a t => (a -> b -> b) -> t -> b -> b
foldrWithFrom :: ToIter a t => (a -> b -> b) -> b -> t -> b
mfold :: (Monad m, ToIter a t) => b -> (a -> b -> m b) -> t -> m b
mfoldFromWith :: (Monad m, ToIter a t) => b -> (a -> b -> m b) -> t -> m b
mfoldFromOn :: (Monad m, ToIter a t) => b -> t -> (a -> b -> m b) -> m b
mfoldOnFrom :: (Monad m, ToIter a t) => t -> b -> (a -> b -> m b) -> m b
mfoldOnWith :: (Monad m, ToIter a t) => t -> (a -> b -> m b) -> b -> m b
mfoldWithOn :: (Monad m, ToIter a t) => (a -> b -> m b) -> t -> b -> m b
mfoldWithFrom :: (Monad m, ToIter a t) => (a -> b -> m b) -> b -> t -> m b
mfoldk :: (Monad m, ToIter a t) => b -> (a -> b -> (m b -> m b) -> m b) -> t -> m b
mfoldkFromWith :: (Monad m, ToIter a t) => b -> (a -> b -> (m b -> m b) -> m b) -> t -> m b
mfoldkFromOn :: (Monad m, ToIter a t) => b -> t -> (a -> b -> (m b -> m b) -> m b) -> m b
mfoldkOnFrom :: (Monad m, ToIter a t) => t -> b -> (a -> b -> (m b -> m b) -> m b) -> m b
mfoldkOnWith :: (Monad m, ToIter a t) => t -> (a -> b -> (m b -> m b) -> m b) -> b -> m b
mfoldkWithOn :: (Monad m, ToIter a t) => (a -> b -> (m b -> m b) -> m b) -> t -> b -> m b
mfoldkWithFrom :: (Monad m, ToIter a t) => (a -> b -> (m b -> m b) -> m b) -> b -> t -> m b
mfoldr :: (Monad m, ToIter a t) => b -> (a -> b -> m b) -> t -> m b
mfoldrFromWith :: (Monad m, ToIter a t) => b -> (a -> b -> m b) -> t -> m b
mfoldrFromOn :: (Monad m, ToIter a t) => b -> t -> (a -> b -> m b) -> m b
mfoldrOnFrom :: (Monad m, ToIter a t) => t -> b -> (a -> b -> m b) -> m b
mfoldrOnWith :: (Monad m, ToIter a t) => t -> (a -> b -> m b) -> b -> m b
mfoldrWithOn :: (Monad m, ToIter a t) => (a -> b -> m b) -> t -> b -> m b
mfoldrWithFrom :: (Monad m, ToIter a t) => (a -> b -> m b) -> b -> t -> m b
eachWith :: (Monad m, ToIter a t) => (a -> m ()) -> t -> m ()
eachOn :: (Monad m, ToIter a t) => t -> (a -> m ()) -> m ()
eachkWith :: (Monad m, ToIter a t) => (a -> (m () -> m ()) -> m ()) -> t -> m ()
eachkOn :: (Monad m, ToIter a t) => t -> (a -> (m () -> m ()) -> m ()) -> m ()
exec :: (Monad m, ToIter (m ()) t) => t -> m ()
sum :: (ToIter a t, Additive a) => t -> a
product :: (ToIter a t, Multiplicative a) => t -> a
concat :: (Monoid a, ToIter a t) => t -> a
sequence :: (Seqoid a, ToIter a t) => t -> a
compose :: ToIter (a -> a) t => t -> a -> a
mcompose :: Monad m => ToIter (a -> m a) t => t -> a -> m a
wcompose :: Comonad w => ToIter (w a -> a) t => t -> w a -> a
minsFrom :: (ToIter a t, Ord a) => a -> t -> a
maxsFrom :: (ToIter a t, Ord a) => a -> t -> a
joinsFrom :: (ToIter a t, Join a) => a -> t -> a
joins :: (JoinLattice a, ToIter a t) => t -> a
meetsFrom :: (ToIter a t, Meet a) => a -> t -> a
meets :: (MeetLattice a, ToIter a t) => t -> a
or :: ToIter ùîπ t => t -> ùîπ
orf :: ToIter (a -> ùîπ) t => t -> a -> ùîπ
andf :: ToIter (a -> ùîπ) t => t -> a -> ùîπ
and :: ToIter ùîπ t => t -> ùîπ
count :: forall n t a. (Zero n, One n, Plus n, ToIter a t) => t -> n
countWith :: forall n t a. (Zero n, One n, Plus n, ToIter a t) => (a -> ùîπ) -> t -> n
reverse :: ToIter a t => t -> ùêº a
replicateI :: forall n a. (Eq n, Zero n, One n, Plus n) => n -> (n -> a) -> ùêº a
replicate :: forall n a. (Eq n, Zero n, One n, Plus n) => n -> a -> ùêº a
build :: forall n a. (Eq n, Zero n, One n, Plus n) => n -> a -> (a -> a) -> ùêº a
range :: (Eq n, Zero n, One n, Plus n, Minus n) => n -> n -> ùêº n
upto :: (Eq n, Zero n, One n, Plus n) => n -> ùêº n
reiter :: ToIter a t => s -> (a -> s -> s ‚àß b) -> t -> ùêº b
withIndex :: forall n t a. (Zero n, One n, Plus n, ToIter a t) => t -> ùêº (n ‚àß a)
withFirst :: ToIter a t => t -> ùêº (ùîπ ‚àß a)
mapFirst :: ToIter a t => (a -> a) -> t -> ùêº a
mapAfterFirst :: ToIter a t => (a -> a) -> t -> ùêº a
keepN :: (ToIter a t, Eq n, Zero n, One n, Plus n) => n -> t -> ùêº a
withLast :: ToIter a t => t -> ùêº (ùîπ ‚àß a)
mapLast :: ToIter a t => (a -> a) -> t -> ùêº a
mapLastOn :: ToIter a t => t -> (a -> a) -> ùêº a
mapBeforeLast :: ToIter a t => (a -> a) -> t -> ùêº a
filterMap :: ToIter a t => (a -> ùëÇ b) -> t -> ùêº b
filterMapOn :: ToIter a t => t -> (a -> ùëÇ b) -> ùêº b
filter :: ToIter a t => (a -> ùîπ) -> t -> ùêº a
filterOn :: ToIter a t => t -> (a -> ùîπ) -> ùêº a
inbetween :: ToIter a t => a -> t -> ùêº a
alignLeftFill :: ‚ÑÇ -> ‚Ñï -> ùïä -> ùïä
alignLeft :: ‚Ñï -> ùïä -> ùïä
alignRightFill :: ‚ÑÇ -> ‚Ñï -> ùïä -> ùïä
alignRight :: ‚Ñï -> ùïä -> ùïä
list :: ToIter a t => t -> ùêø a
lazyList :: ToIter a t => t -> [a]
string :: ToIter ‚ÑÇ t => t -> ùïä
stringS :: ToIter ùïä t => t -> ùïä
truncateùïä :: ‚Ñï64 -> ùïä -> ùïä -> ùïä
showCollection :: ToIter a t => ùïä -> ùïä -> ùïä -> (a -> ùïä) -> t -> ùïä
showWithùêº :: (a -> ùïä) -> ùêº a -> ùïä
firstMaxByLT :: ToIter a t => (a -> a -> ùîπ) -> t -> ùëÇ a
sortWith :: ToIter a t => (a -> a -> Ordering) -> t -> ùêø a
sortOn :: (ToIter a t, Ord b) => (a -> b) -> t -> ùêø a
sort :: (ToIter a t, Ord a) => t -> ùêø a
materialize :: ToIter a t => t -> ùêº a
mapWhile :: (a -> a) -> (a -> ùîπ) -> ùêº a -> ùêº a
dropWhile :: (a -> ùîπ) -> ùêº a -> ùêº a
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Init.ùêº a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Init.ùêº a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Init.ùêº a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Init.ùêº
instance UVMHS.Core.Classes.Functors.Return UVMHS.Core.Init.ùêº
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Core.Init.ùêº
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Core.Init.ùêº
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Core.Init.ùêº
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Init.ùêº a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùêº a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùëÜ a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùêº a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùêø a)
instance UVMHS.Core.Init.ùïä UVMHS.Core.Classes.Morphism.‚áÑ UVMHS.Core.Init.ùêº UVMHS.Core.Init.‚ÑÇ
instance UVMHS.Core.Classes.Collections.All ()
instance UVMHS.Core.Classes.Collections.All UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Collections.All a => UVMHS.Core.Classes.Collections.All (UVMHS.Core.Init.ùëÇ a)
instance (UVMHS.Core.Classes.Collections.All a, UVMHS.Core.Classes.Collections.All b) => UVMHS.Core.Classes.Collections.All (a UVMHS.Core.Init.‚à® b)
instance (UVMHS.Core.Classes.Collections.All a, UVMHS.Core.Classes.Collections.All b) => UVMHS.Core.Classes.Collections.All (a UVMHS.Core.Init.‚àß b)

module UVMHS.Core.Data.Set
class (CSized s, Ord s, ToIter e s, Single e s, Monoid s, POrd s, JoinLattice s, Meet s, Difference s) => Set e s | s -> e
p√∏ :: Set e s => s
psingle :: Set e s => e -> s
padd :: Set e s => e -> s -> s
prem :: Set e s => e -> s -> s
(‚àà) :: Set e s => e -> s -> ùîπ
(‚äÜ) :: Set e s => s -> s -> ùîπ
(‚à™) :: Set e s => s -> s -> s
(‚à©) :: Set e s => s -> s -> s
(‚àñ) :: Set e s => s -> s -> s
pminView :: Set e s => s -> ùëÇ (e ‚àß s)
pmaxView :: Set e s => s -> ùëÇ (e ‚àß s)
pminElem :: Set e s => s -> ùëÇ e
pmaxElem :: Set e s => s -> ùëÇ e
powùêº :: Set e s => ùêº e -> s
pvals :: Set e s => s -> ùêº e
infix 4 ‚àà
infix 4 ‚äÜ
infixl 5 ‚à™
infixl 6 ‚à©
infixl 5 ‚àñ
(‚äá) :: Set e s => s -> s -> ùîπ
infix 4 ‚äá
(‚àâ) :: Set e s => e -> s -> ùîπ
infix 4 ‚àâ
pow :: forall s t e. (ToIter e t, Set e s) => t -> s
unions :: (Set e s, ToIter s t) => t -> s
intersFrom :: (Set e s, ToIter s t) => s -> t -> s
sdiffsFrom :: (Set e s, ToIter s t) => s -> t -> s
p√∏ùëÉ :: ùëÉ a
psingleùëÉ :: a -> ùëÉ a
paddùëÉ :: Ord a => a -> ùëÉ a -> ùëÉ a
premùëÉ :: Ord a => a -> ùëÉ a -> ùëÉ a
(‚àà‚ô≠) :: Ord a => a -> ùëÉ a -> ùîπ
(‚äÜ‚ô≠) :: Ord a => ùëÉ a -> ùëÉ a -> ùîπ
(‚à™‚ô≠) :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
(‚à©‚ô≠) :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
(‚àñ‚ô≠) :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
pminViewùëÉ :: forall a. ùëÉ a -> ùëÇ (a ‚àß ùëÉ a)
pmaxViewùëÉ :: forall a. ùëÉ a -> ùëÇ (a ‚àß ùëÉ a)
pminElemùëÉ :: forall a. ùëÉ a -> ùëÇ a
pmaxElemùëÉ :: forall a. ùëÉ a -> ùëÇ a
powùêºùëÉ :: Ord a => ùêº a -> ùëÉ a
pvalsùëÉ :: forall a. ùëÉ a -> ùêº a
csizeùëÉ :: ùëÉ a -> ‚Ñï64
showùëÉ :: Show a => ùëÉ a -> ùïä
iterùëÉ :: ùëÉ a -> ùêº a
singleùëÉ :: a -> ùëÉ a
nullùëÉ :: ùëÉ a
appendùëÉ :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
unitùëÉ :: (Ord a, Null a) => ùëÉ a
crossùëÉ :: (Ord a, Append a) => ùëÉ a -> ùëÉ a -> ùëÉ a
zeroùëÉ :: ùëÉ a
plusùëÉ :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
oneùëÉ :: (Ord a, Zero a) => ùëÉ a
timesùëÉ :: (Ord a, Plus a) => ùëÉ a -> ùëÉ a -> ùëÉ a
plteùëÉ :: Ord a => ùëÉ a -> ùëÉ a -> ùîπ
botùëÉ :: ùëÉ a
joinùëÉ :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
meetùëÉ :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
diffùëÉ :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
allùëÉ :: (Ord a, All a) => ùêº (ùëÉ a)
powùëÉ :: (Ord a, ToIter a t) => t -> ùëÉ a
mapùëÉ :: Ord b => (a -> b) -> ùëÉ a -> ùëÉ b
uniquesùëÉ :: (Ord a, ToIter a t) => t -> ùêº a
instance GHC.Classes.Ord e => UVMHS.Core.Data.Set.Set e (UVMHS.Core.Init.ùëÉ e)
instance UVMHS.Core.Classes.Collections.CSized (UVMHS.Core.Init.ùëÉ a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùëÉ a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Init.ùëÉ a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Unit (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Cross (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Prodoid (UVMHS.Core.Init.ùëÉ a)
instance UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Arithmetic.Additive (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Arithmetic.Zero a) => UVMHS.Core.Classes.Arithmetic.One (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Arithmetic.Plus a) => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.POrd (UVMHS.Core.Init.ùëÉ a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.Difference (UVMHS.Core.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Collections.All a) => UVMHS.Core.Classes.Collections.All (UVMHS.Core.Init.ùëÉ a)

module UVMHS.Core.Data.Sequence
q√∏ :: ùëÑ a
consùëÑ :: a -> ùëÑ a -> ùëÑ a
unconsùëÑ :: ùëÑ a -> ùëÇ (a ‚àß ùëÑ a)
snocùëÑ :: ùëÑ a -> a -> ùëÑ a
unsnocùëÑ :: ùëÑ a -> ùëÇ (ùëÑ a ‚àß a)
singleùëÑ :: a -> ùëÑ a
appendùëÑ :: ùëÑ a -> ùëÑ a -> ùëÑ a
mapùëÑ :: (a -> b) -> ùëÑ a -> ùëÑ b
bindùëÑ :: ùëÑ a -> (a -> ùëÑ b) -> ùëÑ b
iterùëÑ :: ùëÑ a -> ùêº a
seqùêº :: ùêº a -> ùëÑ a
seq :: ToIter a t => t -> ùëÑ a
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Init.ùëÑ a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Init.ùëÑ a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Init.ùëÑ a)
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Init.ùëÑ a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Init.ùëÑ
instance UVMHS.Core.Classes.Functors.Return UVMHS.Core.Init.ùëÑ
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Core.Init.ùëÑ
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Core.Init.ùëÑ
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Init.ùëÑ a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Init.ùëÑ a)

module UVMHS.Core.Data.Dict
class (Set k s, FunctorM d, OFunctorM d, KFunctorM k d, OKFunctorM k d, BiFunctorM d, OBiFunctorM d, KBiFunctorM k d, OKBiFunctorM k d, Functor d, OFunctor d, KFunctor k d, OKFunctor k d, BiFunctor d, OBiFunctor d, KBiFunctor k d, OKBiFunctor k d, forall x. CSized (d x), forall x. (Eq x) => Eq (d x), forall x. (Ord x) => Ord (d x), forall x. ToIter (k ‚àß x) (d x), forall x. Single (k ‚àß x) (d x), forall x. Lookup k x (d x), forall x. Null (d x), forall x. (Append x) => Append (d x), forall x. (Monoid x) => Monoid (d x), forall x. (POrd x) => POrd (d x), forall x. Bot (d x), forall x. (Join x) => Join (d x), forall x. (JoinLattice x) => JoinLattice (d x), forall x. (Meet x) => Meet (d x), forall x. (Difference x) => Difference (d x)) => Dict k s d | d -> k, d -> s
d√∏ :: Dict k s d => d a
(‚Ü¶) :: Dict k s d => k -> a -> d a
dadd :: Dict k s d => k -> a -> d a -> d a
drem :: Dict k s d => k -> d a -> d a
dupd :: Dict k s d => k -> (a -> ùëÇ a) -> d a -> d a
dlteBy :: Dict k s d => (a -> a -> ùîπ) -> d a -> d a -> ùîπ
dunionBy :: Dict k s d => (a -> a -> a) -> d a -> d a -> d a
dinterBy :: Dict k s d => (a -> b -> c) -> d a -> d b -> d c
dsdiffBy :: Dict k s d => (a -> b -> ùëÇ a) -> d a -> d b -> d a
(‚ãø) :: forall a. Dict k s d => k -> d a -> ùîπ
(‚´ë) :: (Dict k s d, Eq a) => d a -> d a -> ùîπ
(‚©å) :: Dict k s d => d a -> d a -> d a
(‚©ç) :: Dict k s d => d a -> d a -> d a
(‚ßÖ) :: (Dict k s d, Eq a) => d a -> d a -> d a
dminView :: Dict k s d => d a -> ùëÇ ((k ‚àß a) ‚àß d a)
dmaxView :: Dict k s d => d a -> ùëÇ ((k ‚àß a) ‚àß d a)
dkeyView :: Dict k s d => k -> d a -> ùëÇ (a ‚àß d a)
dminElem :: Dict k s d => d a -> ùëÇ (k ‚àß a)
dmaxElem :: Dict k s d => d a -> ùëÇ (k ‚àß a)
dkeep :: Dict k s d => s -> d a -> d a
dtoss :: Dict k s d => s -> d a -> d a
dictùêº :: Dict k s d => ùêº (k ‚àß a) -> d a
dkeys :: forall a. Dict k s d => d a -> s
dvals :: forall a. Dict k s d => d a -> ùêº a
infixr 1 ‚Ü¶
infix 4 ‚ãø
infix 4 ‚´ë
infixl 5 ‚©å
infixl 6 ‚©ç
infixl 5 ‚ßÖ
dunionByOn :: Dict k s d => d a -> d a -> (a -> a -> a) -> d a
dinterByOn :: Dict k s d => d a -> d b -> (a -> b -> c) -> d c
dinterByM :: (Monad m, Dict k s d) => (a -> b -> m c) -> d a -> d b -> m (d c)
dict :: forall d t a k s. (Dict k s d, ToIter (d a) t) => t -> d a
assoc :: forall d t a k s. (Dict k s d, ToIter (k ‚àß a) t) => t -> d a
d√∏ùê∑ :: forall k a. k ‚á∞ a
(‚Ü¶‚ô≠) :: forall k a. k -> a -> k ‚á∞ a
daddùê∑ :: forall k a. Ord k => k -> a -> (k ‚á∞ a) -> k ‚á∞ a
dremùê∑ :: forall k a. Ord k => k -> (k ‚á∞ a) -> k ‚á∞ a
dupdùê∑ :: forall k a. Ord k => k -> (a -> ùëÇ a) -> (k ‚á∞ a) -> k ‚á∞ a
dlteByùê∑ :: forall k a. Ord k => (a -> a -> ùîπ) -> (k ‚á∞ a) -> (k ‚á∞ a) -> ùîπ
dunionByùê∑ :: forall k a. Ord k => (a -> a -> a) -> (k ‚á∞ a) -> (k ‚á∞ a) -> k ‚á∞ a
dinterByùê∑ :: forall k a b c. Ord k => (a -> b -> c) -> (k ‚á∞ a) -> (k ‚á∞ b) -> k ‚á∞ c
dsdiffByùê∑ :: forall k b a. Ord k => (a -> b -> ùëÇ a) -> (k ‚á∞ a) -> (k ‚á∞ b) -> k ‚á∞ a
(‚ãø‚ô≠) :: forall k a. Ord k => k -> (k ‚á∞ a) -> ùîπ
(‚´ë‚ô≠) :: forall k a. (Ord k, Eq a) => (k ‚á∞ a) -> (k ‚á∞ a) -> ùîπ
(‚©å‚ô≠) :: forall k a. Ord k => (k ‚á∞ a) -> (k ‚á∞ a) -> k ‚á∞ a
(‚©ç‚ô≠) :: forall k a. Ord k => (k ‚á∞ a) -> (k ‚á∞ a) -> k ‚á∞ a
(‚ßÖ‚ô≠) :: forall k a. (Ord k, Eq a) => (k ‚á∞ a) -> (k ‚á∞ a) -> k ‚á∞ a
dminViewùê∑ :: forall k a. (k ‚á∞ a) -> ùëÇ ((k ‚àß a) ‚àß (k ‚á∞ a))
dmaxViewùê∑ :: forall k a. (k ‚á∞ a) -> ùëÇ ((k ‚àß a) ‚àß (k ‚á∞ a))
dkeyViewùê∑ :: forall k a. Ord k => k -> (k ‚á∞ a) -> ùëÇ (a ‚àß (k ‚á∞ a))
dminElemùê∑ :: forall k a. (k ‚á∞ a) -> ùëÇ (k ‚àß a)
dmaxElemùê∑ :: forall k a. (k ‚á∞ a) -> ùëÇ (k ‚àß a)
dkeepùê∑ :: forall k a. Ord k => ùëÉ k -> (k ‚á∞ a) -> k ‚á∞ a
dtossùê∑ :: forall k a. Ord k => ùëÉ k -> (k ‚á∞ a) -> k ‚á∞ a
dictùêºùê∑ :: forall k a. Ord k => ùêº (k ‚àß a) -> k ‚á∞ a
dkeysùê∑ :: forall k a. Ord k => (k ‚á∞ a) -> ùëÉ k
dvalsùê∑ :: forall k a. (k ‚á∞ a) -> ùêº a
mapMùê∑ :: forall m k a b. Monad m => (a -> m b) -> (k ‚á∞ a) -> m (k ‚á∞ b)
omapMùê∑ :: forall m k a b. Monad m => (a -> m (ùëÇ b)) -> (k ‚á∞ a) -> m (k ‚á∞ b)
kmapMùê∑ :: forall m k a b. Monad m => (k -> a -> m b) -> (k ‚á∞ a) -> m (k ‚á∞ b)
kmapAtMùê∑ :: forall m k a. (Monad m, Ord k) => k -> (a -> m a) -> (k ‚á∞ a) -> m (k ‚á∞ a)
okmapMùê∑ :: forall m k a b. Monad m => (k -> a -> m (ùëÇ b)) -> (k ‚á∞ a) -> m (k ‚á∞ b)
okmapAtMùê∑ :: forall m k a. (Monad m, Ord k) => k -> (ùëÇ a -> m (ùëÇ a)) -> (k ‚á∞ a) -> m (k ‚á∞ a)
bimapMùê∑ :: forall m k a b c. (Monad m, Ord k) => (a -> m c) -> (b -> m c) -> (a -> b -> m c) -> (k ‚á∞ a) -> (k ‚á∞ b) -> m (k ‚á∞ c)
obimapMùê∑ :: forall m k a b c. (Monad m, Ord k) => (a -> m (ùëÇ c)) -> (b -> m (ùëÇ c)) -> (a -> b -> m (ùëÇ c)) -> (k ‚á∞ a) -> (k ‚á∞ b) -> m (k ‚á∞ c)
kbimapMùê∑ :: forall m k a b c. (Monad m, Ord k) => (k -> a -> m c) -> (k -> b -> m c) -> (k -> a -> b -> m c) -> (k ‚á∞ a) -> (k ‚á∞ b) -> m (k ‚á∞ c)
okbimapMùê∑ :: forall m k a b c. (Monad m, Ord k) => (k -> a -> m (ùëÇ c)) -> (k -> b -> m (ùëÇ c)) -> (k -> a -> b -> m (ùëÇ c)) -> (k ‚á∞ a) -> (k ‚á∞ b) -> m (k ‚á∞ c)
mapùê∑ :: forall k a b. (a -> b) -> (k ‚á∞ a) -> k ‚á∞ b
omapùê∑ :: forall k a b. (a -> ùëÇ b) -> (k ‚á∞ a) -> k ‚á∞ b
kmapùê∑ :: forall k a b. (k -> a -> b) -> (k ‚á∞ a) -> k ‚á∞ b
kmapAtùê∑ :: forall k a. Ord k => k -> (a -> a) -> (k ‚á∞ a) -> k ‚á∞ a
okmapùê∑ :: forall k a b. (k -> a -> ùëÇ b) -> (k ‚á∞ a) -> k ‚á∞ b
okmapAtùê∑ :: forall k a. Ord k => k -> (ùëÇ a -> ùëÇ a) -> (k ‚á∞ a) -> k ‚á∞ a
bimapùê∑ :: forall k a b c. Ord k => (a -> c) -> (b -> c) -> (a -> b -> c) -> (k ‚á∞ a) -> (k ‚á∞ b) -> k ‚á∞ c
obimapùê∑ :: forall k a b c. Ord k => (a -> ùëÇ c) -> (b -> ùëÇ c) -> (a -> b -> ùëÇ c) -> (k ‚á∞ a) -> (k ‚á∞ b) -> k ‚á∞ c
kbimapùê∑ :: forall k a b c. Ord k => (k -> a -> c) -> (k -> b -> c) -> (k -> a -> b -> c) -> (k ‚á∞ a) -> (k ‚á∞ b) -> k ‚á∞ c
okbimapùê∑ :: forall k a b c. Ord k => (k -> a -> ùëÇ c) -> (k -> b -> ùëÇ c) -> (k -> a -> b -> ùëÇ c) -> (k ‚á∞ a) -> (k ‚á∞ b) -> k ‚á∞ c
csizeùê∑ :: forall k a. (k ‚á∞ a) -> ‚Ñï64
showùê∑ :: (Show k, Show a) => (k ‚á∞ a) -> ùïä
iterùê∑ :: forall k a. (k ‚á∞ a) -> ùêº (k ‚àß a)
singleùê∑ :: (k ‚àß a) -> k ‚á∞ a
lookupùê∑ :: forall k a. Ord k => (k ‚á∞ a) -> k -> ùëÇ a
nullùê∑ :: k ‚á∞ a
appendùê∑ :: (Ord k, Append a) => (k ‚á∞ a) -> (k ‚á∞ a) -> k ‚á∞ a
unitùê∑ :: (Ord k, Null k, Null a) => k ‚á∞ a
crossùê∑ :: (Ord k, Append k, Append a, Cross a) => (k ‚á∞ a) -> (k ‚á∞ a) -> k ‚á∞ a
zeroùê∑ :: k ‚á∞ a
plusùê∑ :: (Ord k, Plus a) => (k ‚á∞ a) -> (k ‚á∞ a) -> k ‚á∞ a
oneùê∑ :: (Ord k, Zero k, Zero a) => k ‚á∞ a
timesùê∑ :: (Ord k, Plus k, Plus a, Times a) => (k ‚á∞ a) -> (k ‚á∞ a) -> k ‚á∞ a
plteùê∑ :: (Ord k, POrd a) => (k ‚á∞ a) -> (k ‚á∞ a) -> ùîπ
botùê∑ :: k ‚á∞ a
joinùê∑ :: (Ord k, Join a) => (k ‚á∞ a) -> (k ‚á∞ a) -> k ‚á∞ a
meetùê∑ :: (Ord k, Meet a) => (k ‚á∞ a) -> (k ‚á∞ a) -> k ‚á∞ a
diffùê∑ :: (Ord k, Difference a) => (k ‚á∞ a) -> (k ‚á∞ a) -> k ‚á∞ a
allùê∑ :: (Ord k, All k, All a) => ùêº (k ‚á∞ a)
dictùê∑ :: (Ord k, ToIter (k ‚á∞ a) t) => t -> k ‚á∞ a
dminKeyùê∑ :: (k ‚á∞ a) -> ùëÇ k
dmaxKeyùê∑ :: (k ‚á∞ a) -> ùëÇ k
data family Elem :: ‚òÖ -> ‚òÖ
data family ESet :: ‚òÖ -> ‚òÖ
data family EDct :: ‚òÖ -> ‚òÖ -> ‚òÖ
class (Set (Elem p) (ESet p), Dict (Elem p) (ESet p) (EDct p)) => ESD p
data StdESD (x :: ‚òÖ)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Data.Dict.Elem (UVMHS.Core.Data.Dict.StdESD a))
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Data.Dict.Elem (UVMHS.Core.Data.Dict.StdESD a))
instance GHC.Classes.Ord e => UVMHS.Core.Classes.Lattice.Difference (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance GHC.Classes.Ord e => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance GHC.Classes.Ord e => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance GHC.Classes.Ord e => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance GHC.Classes.Ord e => UVMHS.Core.Classes.Lattice.POrd (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance GHC.Classes.Ord e => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance GHC.Classes.Ord e => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance GHC.Classes.Ord e => GHC.Classes.Ord (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance GHC.Classes.Eq e => GHC.Classes.Eq (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance UVMHS.Core.Classes.Collections.CSized (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Data.Dict.EDct (UVMHS.Core.Data.Dict.StdESD k))
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Join a) => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Data.Dict.EDct (UVMHS.Core.Data.Dict.StdESD k) a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Join a) => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Data.Dict.EDct (UVMHS.Core.Data.Dict.StdESD k) a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Data.Dict.EDct (UVMHS.Core.Data.Dict.StdESD k) a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Data.Dict.EDct (UVMHS.Core.Data.Dict.StdESD k) a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Data.Dict.EDct (UVMHS.Core.Data.Dict.StdESD k) a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Data.Dict.EDct (UVMHS.Core.Data.Dict.StdESD k) a)
instance (GHC.Classes.Ord k, GHC.Classes.Ord a) => GHC.Classes.Ord (UVMHS.Core.Data.Dict.EDct (UVMHS.Core.Data.Dict.StdESD k) a)
instance (GHC.Classes.Eq k, GHC.Classes.Eq a) => GHC.Classes.Eq (UVMHS.Core.Data.Dict.EDct (UVMHS.Core.Data.Dict.StdESD k) a)
instance GHC.Classes.Ord e => UVMHS.Core.Classes.Collections.ToIter (UVMHS.Core.Data.Dict.Elem (UVMHS.Core.Data.Dict.StdESD e)) (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance GHC.Classes.Ord e => UVMHS.Core.Classes.Collections.Single (UVMHS.Core.Data.Dict.Elem (UVMHS.Core.Data.Dict.StdESD e)) (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance GHC.Classes.Ord e => UVMHS.Core.Data.Set.Set (UVMHS.Core.Data.Dict.Elem (UVMHS.Core.Data.Dict.StdESD e)) (UVMHS.Core.Data.Dict.ESet (UVMHS.Core.Data.Dict.StdESD e))
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.FunctorM (UVMHS.Core.Data.Dict.EDct (UVMHS.Core.Data.Dict.StdESD k))
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Collections.Single (UVMHS.Core.Data.Dict.Elem (UVMHS.Core.Data.Dict.StdESD k) UVMHS.Core.Init.‚àß a) (UVMHS.Core.Data.Dict.EDct (UVMHS.Core.Data.Dict.StdESD k) a)
instance GHC.Classes.Ord k => UVMHS.Core.Data.Dict.Dict k (UVMHS.Core.Init.ùëÉ k) ((UVMHS.Core.Init.‚á∞) k)
instance UVMHS.Core.Classes.Functors.FunctorM ((UVMHS.Core.Init.‚á∞) k)
instance UVMHS.Core.Classes.Functors.OFunctorM ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.KFunctorM k ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.OKFunctorM k ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.BiFunctorM ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.OBiFunctorM ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.KBiFunctorM k ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.OKBiFunctorM k ((UVMHS.Core.Init.‚á∞) k)
instance UVMHS.Core.Classes.Functors.Functor ((UVMHS.Core.Init.‚á∞) k)
instance UVMHS.Core.Classes.Functors.OFunctor ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.KFunctor k ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.OKFunctor k ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.BiFunctor ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.OBiFunctor ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.KBiFunctor k ((UVMHS.Core.Init.‚á∞) k)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Functors.OKBiFunctor k ((UVMHS.Core.Init.‚á∞) k)
instance UVMHS.Core.Classes.Collections.CSized (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Show.Show k, GHC.Show.Show a) => GHC.Show.Show (k UVMHS.Core.Init.‚á∞ a)
instance UVMHS.Core.Classes.Collections.ToIter (k UVMHS.Core.Init.‚àß a) (k UVMHS.Core.Init.‚á∞ a)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Collections.Single (k UVMHS.Core.Init.‚àß a) (k UVMHS.Core.Init.‚á∞ a)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Collections.Lookup k a (k UVMHS.Core.Init.‚á∞ a)
instance UVMHS.Core.Classes.Monoid.Null (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Monoid (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Null k, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Unit (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Append k, UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Cross a) => UVMHS.Core.Classes.Monoid.Cross (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Monoid k, UVMHS.Core.Classes.Monoid.Prodoid a) => UVMHS.Core.Classes.Monoid.Prodoid (k UVMHS.Core.Init.‚á∞ a)
instance UVMHS.Core.Classes.Arithmetic.Zero (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Plus a) => UVMHS.Core.Classes.Arithmetic.Plus (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Plus a) => UVMHS.Core.Classes.Arithmetic.Additive (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Zero k, UVMHS.Core.Classes.Arithmetic.Zero a) => UVMHS.Core.Classes.Arithmetic.One (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Plus k, UVMHS.Core.Classes.Arithmetic.Plus a, UVMHS.Core.Classes.Arithmetic.Times a) => UVMHS.Core.Classes.Arithmetic.Times (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Additive k, UVMHS.Core.Classes.Arithmetic.Multiplicative a) => UVMHS.Core.Classes.Arithmetic.Multiplicative (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.POrd a) => UVMHS.Core.Classes.Lattice.POrd (k UVMHS.Core.Init.‚á∞ a)
instance UVMHS.Core.Classes.Lattice.Bot (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Join a) => UVMHS.Core.Classes.Lattice.Join (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Join a) => UVMHS.Core.Classes.Lattice.JoinLattice (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Meet (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Difference a) => UVMHS.Core.Classes.Lattice.Difference (k UVMHS.Core.Init.‚á∞ a)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Collections.All k, UVMHS.Core.Classes.Collections.All a) => UVMHS.Core.Classes.Collections.All (k UVMHS.Core.Init.‚á∞ a)

module UVMHS.Core.Data.Lens
newtype a ‚ü¢ b
Lens :: (a -> b ‚àß (b -> a)) -> (‚ü¢) a b
[runLens] :: (‚ü¢) a b -> a -> b ‚àß (b -> a)
infixr 1 ‚ü¢
data a ‚å≤ b
Prism :: (b -> a) -> (a -> ùëÇ b) -> (‚å≤) a b
[construct] :: (‚å≤) a b -> b -> a
[view] :: (‚å≤) a b -> a -> ùëÇ b
infixr 1 ‚å≤
class Alter (t :: ‚òÖ -> ‚òÖ -> ‚òÖ)
alter :: Alter t => t a b -> (b -> b) -> a -> a
class AlterM (t :: ‚òÖ -> ‚òÖ -> ‚òÖ)
alterM :: (AlterM t, Monad m) => t a b -> (b -> m b) -> a -> m a
update :: Alter t => t a b -> b -> a -> a
updateM :: (AlterM t, Monad m) => t a b -> m b -> a -> m a
lens :: (a -> b) -> (a -> b -> a) -> a ‚ü¢ b
isoLens :: (a -> b) -> (b -> a) -> a ‚ü¢ b
access :: (a ‚ü¢ b) -> a -> b
prism :: (b -> a) -> (a -> ùëÇ b) -> a ‚å≤ b
isoPrism :: (b -> a) -> (a -> b) -> a ‚å≤ b
viewŒ© :: (a ‚å≤ b) -> a -> b
shape :: (a ‚å≤ b) -> a -> ùîπ
inlL :: (a ‚à® b) ‚å≤ a
inrL :: (a ‚à® b) ‚å≤ b
fstL :: (a ‚àß b) ‚ü¢ a
sndL :: (a ‚àß b) ‚ü¢ b
noneL :: ùëÇ a ‚å≤ ()
someL :: ùëÇ a ‚å≤ a
singleL :: ùêø a ‚å≤ a
consL :: ùêø a ‚å≤ (a ‚àß ùêø a)
singleùëÉL :: Ord a => ùëÉ a ‚å≤ a
singleùëÑL :: Ord a => ùëÑ a ‚å≤ a
singleùê∑L :: Ord k => (k ‚á∞ v) ‚å≤ (k ‚àß v)
keyL :: Ord k => k -> (k ‚á∞ v) ‚ü¢ ùëÇ v
keyLùëÇ :: (Ord k, Null v) => k -> (k ‚á∞ v) ‚ü¢ v
class HasPrism a b
hasPrism :: HasPrism a b => a ‚å≤ b
class HasLens a b
hasLens :: HasLens a b => a ‚ü¢ b
ùõä :: HasPrism a b => b -> a
ùõé :: forall b a. HasPrism a b => a -> ùëÇ b
ùõë :: HasLens a b => a -> b
ùõè :: HasLens a b => b -> a -> a
instance UVMHS.Core.Data.Lens.HasLens a a
instance UVMHS.Core.Data.Lens.HasPrism a a
instance UVMHS.Core.Data.Lens.AlterM (UVMHS.Core.Data.Lens.‚ü¢)
instance UVMHS.Core.Data.Lens.Alter (UVMHS.Core.Data.Lens.‚ü¢)
instance UVMHS.Core.Data.Lens.Alter (UVMHS.Core.Data.Lens.‚å≤)
instance UVMHS.Core.Classes.Morphism.Reflexive (UVMHS.Core.Data.Lens.‚å≤)
instance UVMHS.Core.Classes.Morphism.Transitive (UVMHS.Core.Data.Lens.‚å≤)
instance UVMHS.Core.Classes.Morphism.Category (UVMHS.Core.Data.Lens.‚å≤)
instance UVMHS.Core.Classes.Morphism.Reflexive (UVMHS.Core.Data.Lens.‚ü¢)
instance UVMHS.Core.Classes.Morphism.Transitive (UVMHS.Core.Data.Lens.‚ü¢)
instance UVMHS.Core.Classes.Morphism.Category (UVMHS.Core.Data.Lens.‚ü¢)

module UVMHS.Core.Data.Bitty
shiftL_shim :: Bits a => a -> ‚Ñï64 -> a
shiftR_shim :: Bits a => a -> ‚Ñï64 -> a
bsize_shim :: forall a. FiniteBits a => P a -> ‚Ñï64
instance UVMHS.Core.Classes.Bitty.BitZero UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Bitty.BitOne UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Bitty.BitComp UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Bitty.BitAnd UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Bitty.BitOr UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Bitty.BitXor UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Bitty.BitShiftL UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Bitty.BitShiftR UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Bitty.BitSize UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Bitty.Bitty UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Classes.Bitty.BitZero UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Bitty.BitOne UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Bitty.BitComp UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Bitty.BitAnd UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Bitty.BitOr UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Bitty.BitXor UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Bitty.BitShiftL UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Bitty.BitShiftR UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Bitty.BitSize UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Bitty.Bitty UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Classes.Bitty.BitZero UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Bitty.BitOne UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Bitty.BitComp UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Bitty.BitAnd UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Bitty.BitOr UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Bitty.BitXor UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Bitty.BitShiftL UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Bitty.BitShiftR UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Bitty.BitSize UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Bitty.Bitty UVMHS.Core.Init.‚Ñï32
instance UVMHS.Core.Classes.Bitty.BitZero UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Bitty.BitOne UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Bitty.BitComp UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Bitty.BitAnd UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Bitty.BitOr UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Bitty.BitXor UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Bitty.BitShiftL UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Bitty.BitShiftR UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Bitty.BitSize UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Bitty.Bitty UVMHS.Core.Init.‚Ñï16
instance UVMHS.Core.Classes.Bitty.BitZero UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Bitty.BitOne UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Bitty.BitComp UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Bitty.BitAnd UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Bitty.BitOr UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Bitty.BitXor UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Bitty.BitShiftL UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Bitty.BitShiftR UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Bitty.BitSize UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Bitty.Bitty UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Classes.Bitty.BitZero UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Bitty.BitOne UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Bitty.BitComp UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Bitty.BitAnd UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Bitty.BitOr UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Bitty.BitXor UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Bitty.BitShiftL UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Bitty.BitShiftR UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Bitty.BitSize UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Bitty.Bitty UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Classes.Bitty.BitZero UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Bitty.BitOne UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Bitty.BitComp UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Bitty.BitAnd UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Bitty.BitOr UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Bitty.BitXor UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Bitty.BitShiftL UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Bitty.BitShiftR UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Bitty.BitSize UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Bitty.Bitty UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Core.Classes.Bitty.BitZero UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Bitty.BitOne UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Bitty.BitComp UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Bitty.BitAnd UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Bitty.BitOr UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Bitty.BitXor UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Bitty.BitShiftL UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Bitty.BitShiftR UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Bitty.BitSize UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Bitty.Bitty UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Core.Classes.Bitty.BitZero UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Bitty.BitOne UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Bitty.BitComp UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Bitty.BitAnd UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Bitty.BitOr UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Bitty.BitXor UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Bitty.BitShiftL UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Bitty.BitShiftR UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Bitty.BitSize UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Core.Classes.Bitty.Bitty UVMHS.Core.Init.‚Ñ§8

module UVMHS.Core.Data

module UVMHS.Core.FilePath
newtype ‚Ñô
‚Ñô :: ùïä -> ‚Ñô
[un‚Ñô] :: ‚Ñô -> ùïä
pnull :: ‚Ñô
pappend :: ‚Ñô -> ‚Ñô -> ‚Ñô
pfilename :: ‚Ñô -> ‚Ñô
pbasename :: ‚Ñô -> ‚Ñô
pdirectory :: ‚Ñô -> ‚Ñô
pextension :: ‚Ñô -> ‚Ñô
instance GHC.Show.Show UVMHS.Core.FilePath.‚Ñô
instance GHC.Classes.Ord UVMHS.Core.FilePath.‚Ñô
instance GHC.Classes.Eq UVMHS.Core.FilePath.‚Ñô
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Core.FilePath.‚Ñô
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Core.FilePath.‚Ñô
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Core.FilePath.‚Ñô

module UVMHS.Core.Effects
class MonadIO (m :: ‚òÖ -> ‚òÖ)
io :: MonadIO m => IO a -> m a
class LiftIO t
liftIO :: forall m. (LiftIO t, Monad m) => (forall a. IO a -> m a) -> forall a. IO a -> t m a
class MonadReader r m | m -> r
askL :: MonadReader r m => (r ‚ü¢ r') -> m r'
localL :: forall a r'. MonadReader r m => (r ‚ü¢ r') -> r' -> m a -> m a
class LiftReader t
liftAskL :: forall m r. (LiftReader t, Monad m) => (forall r'. (r ‚ü¢ r') -> m r') -> forall r'. (r ‚ü¢ r') -> t m r'
liftLocalL :: forall m r. (LiftReader t, Monad m) => (forall r' a. (r ‚ü¢ r') -> r' -> m a -> m a) -> forall r' a. (r ‚ü¢ r') -> r' -> t m a -> t m a
class MonadWriter o m | m -> o
tell :: MonadWriter o m => o -> m ()
hijack :: forall a. MonadWriter o m => m a -> m (o ‚àß a)
class LiftWriter t
liftTell :: forall m o. (LiftWriter t, Monad m) => (o -> m ()) -> o -> t m ()
liftHijack :: forall m o. (LiftWriter t, Monad m) => (forall a. m a -> m (o ‚àß a)) -> forall a. t m a -> t m (o ‚àß a)
class MonadState s m | m -> s
get :: MonadState s m => m s
put :: MonadState s m => s -> m ()
class LiftState t
liftGet :: forall m s. (LiftState t, Monad m) => m s -> t m s
liftPut :: forall m s. (LiftState t, Monad m) => (s -> m ()) -> s -> t m ()
class MonadFail m
abort :: forall a. MonadFail m => m a
(‚éÖ) :: forall a. MonadFail m => m a -> m a -> m a
infixl 5 ‚éÖ
class LiftFail t
liftAbort :: forall m. (LiftFail t, Monad m) => (forall a. m a) -> forall a. t m a
liftTry :: forall m. (LiftFail t, Monad m) => (forall a. m a -> m a -> m a) -> forall a. t m a -> t m a -> t m a
class MonadError e m | m -> e
throw :: forall a. MonadError e m => e -> m a
catch :: forall a. MonadError e m => m a -> (e -> m a) -> m a
class LiftError t
liftThrow :: forall m e. (LiftError t, Monad m) => (forall a. e -> m a) -> forall a. e -> t m a
liftCatch :: forall m e. (LiftError t, Monad m) => (forall a. m a -> (e -> m a) -> m a) -> forall a. t m a -> (e -> t m a) -> t m a
class MonadDelay m
delay :: MonadDelay m => (() -> m a) -> m a
class LiftDelay t
liftDelay :: forall m. (LiftDelay t, Monad m) => (forall a. (() -> m a) -> m a) -> forall a. (() -> t m a) -> t m a
class MonadNondet m
mzero :: forall a. MonadNondet m => m a
(‚äû) :: forall a. MonadNondet m => m a -> m a -> m a
infixl 5 ‚äû
class LiftNondet t
liftMzero :: forall m. (LiftNondet t, Monad m) => (forall a. m a) -> forall a. t m a
liftMplus :: forall m. (LiftNondet t, Monad m) => (forall a. m a -> m a -> m a) -> forall a. t m a -> t m a -> t m a
class MonadTop m
mtop :: forall a. MonadTop m => m a
class LiftTop t
liftMtop :: forall m. (LiftTop t, Monad m) => (forall a. m a) -> forall a. t m a
class MonadCont r m | m -> r
callCC :: forall a. MonadCont r m => ((a -> m r) -> m r) -> m a
withC :: forall a. MonadCont r m => (a -> m r) -> m a -> m r
class LiftCont t
liftCallCC :: forall m r. (LiftCont t, Monad m) => (forall a. ((a -> m r) -> m r) -> m a) -> forall a. ((a -> t m r) -> t m r) -> t m a
liftWithC :: forall m r. (LiftCont t, Monad m) => (forall a. (a -> m r) -> m a -> m r) -> forall a. (a -> t m r) -> t m a -> t m r
class MonadUCont m
ucallCC :: forall a. MonadUCont m => (forall u. (a -> m u) -> m u) -> m a
uwithC :: forall a u. MonadUCont m => (a -> m u) -> m a -> m u
class LiftUCont t
liftUCallCC :: forall m. (LiftUCont t, Monad m) => (forall a. (forall u. (a -> m u) -> m u) -> m a) -> forall a. (forall u. (a -> t m u) -> t m u) -> t m a
liftUWithC :: forall m. (LiftUCont t, Monad m) => (forall a u. (a -> m u) -> m a -> m u) -> forall a u. (a -> t m u) -> t m a -> t m u
class MonadBad m
bad :: forall a. MonadBad m => m a
mapEnvL :: (Monad m, MonadReader r‚ÇÅ m) => (r‚ÇÅ ‚ü¢ r‚ÇÇ) -> (r‚ÇÇ -> r‚ÇÇ) -> m a -> m a
ask :: (Monad m, MonadReader r m) => m r
local :: (Monad m, MonadReader r m) => r -> m a -> m a
mapEnv :: (Monad m, MonadReader r m) => (r -> r) -> m a -> m a
tellL :: (Monoid o‚ÇÅ, Monad m, MonadWriter o‚ÇÅ m) => (o‚ÇÅ ‚ü¢ o‚ÇÇ) -> o‚ÇÇ -> m ()
hijackL :: (Monad m, MonadWriter o‚ÇÅ m, Null o‚ÇÇ) => (o‚ÇÅ ‚ü¢ o‚ÇÇ) -> m a -> m (o‚ÇÇ ‚àß a)
mapOut :: (Monad m, MonadWriter o m) => (o -> o) -> m a -> m a
retOut :: forall o m a. (Monad m, MonadWriter o m) => m a -> m o
getL :: (Monad m, MonadState s m) => (s ‚ü¢ a) -> m a
putL :: (Monad m, MonadState s m) => (s ‚ü¢ a) -> a -> m ()
modify :: (Monad m, MonadState s m) => (s -> s) -> m ()
modifyM :: (Monad m, MonadState s m) => (s -> m s) -> m ()
modifyL :: (Monad m, MonadState s m) => (s ‚ü¢ a) -> (a -> a) -> m ()
modifyML :: (Monad m, MonadState s m) => (s ‚ü¢ a) -> (a -> m a) -> m ()
getput :: (Monad m, MonadState s m) => s -> m s
getputL :: (Monad m, MonadState s‚ÇÅ m) => (s‚ÇÅ ‚ü¢ s‚ÇÇ) -> s‚ÇÇ -> m s‚ÇÇ
next :: (Monad m, MonadState s m, Multiplicative s) => m s
nextL :: (Monad m, MonadState s m, Multiplicative a) => (s ‚ü¢ a) -> m a
bump :: (Monad m, MonadState s m, Multiplicative s) => m ()
bumpL :: (Monad m, MonadState s m, Multiplicative a) => (s ‚ü¢ a) -> m ()
localize :: (Monad m, MonadState s m) => s -> m a -> m (s ‚àß a)
localizeL :: (Monad m, MonadState s‚ÇÅ m) => (s‚ÇÅ ‚ü¢ s‚ÇÇ) -> s‚ÇÇ -> m a -> m (s‚ÇÇ ‚àß a)
localState :: (Monad m, MonadState s m) => s -> m a -> m a
localStateL :: (Monad m, MonadState s‚ÇÅ m) => (s‚ÇÅ ‚ü¢ s‚ÇÇ) -> s‚ÇÇ -> m a -> m a
retState :: (Monad m, MonadState s m) => m a -> m s
retStateOut :: (Monad m, MonadState s m, MonadWriter o m) => m a -> m (s ‚àß o)
tellStateL :: (Monad m, MonadState o‚ÇÅ m, Append o‚ÇÇ) => (o‚ÇÅ ‚ü¢ o‚ÇÇ) -> o‚ÇÇ -> m ()
hijackStateL :: (Monad m, MonadState o‚ÇÅ m, Null o‚ÇÇ) => (o‚ÇÅ ‚ü¢ o‚ÇÇ) -> m a -> m (o‚ÇÇ ‚àß a)
localMapStateL :: (Monad m, MonadState s‚ÇÅ m) => (s‚ÇÅ ‚ü¢ s‚ÇÇ) -> (s‚ÇÇ -> s‚ÇÇ) -> m a -> m a
localStateEffectsL :: (Monad m, MonadState s‚ÇÅ m) => (s‚ÇÅ ‚ü¢ s‚ÇÇ) -> m a -> m a
failEff :: (Monad m, MonadFail m) => ùëÇ a -> m a
failObs :: (Monad m, MonadFail m) => m a -> m (ùëÇ a)
abortùëÇ :: (Monad m, MonadFail m) => ùëÇ a -> m a
tries :: (Monad m, MonadFail m, ToIter (m a) t) => t -> m a
guard :: (Monad m, MonadFail m) => ùîπ -> m ()
oneOrMoreSplit :: (Monad m, MonadFail m) => m a -> m (a ‚àß ùêø a)
oneOrMore :: (Monad m, MonadFail m) => m a -> m (ùêø a)
many :: (Monad m, MonadFail m) => m a -> m (ùêø a)
throwEff :: (Monad m, MonadError e m) => m (e ‚à® a) -> m a
throwObs :: (Monad m, MonadError e m) => m a -> m (e ‚à® a)
throwùëÇ :: (Monad m, MonadError e m) => e -> ùëÇ a -> m a
mconcat :: (MonadNondet m, ToIter (m a) t) => t -> m a
from :: (Monad m, MonadNondet m, ToIter a t) => t -> m a
oneOrMoreSplitNT :: (Monad m, MonadNondet m) => m a -> m (a ‚àß ùêø a)
oneOrMoreNT :: (Monad m, MonadNondet m) => m a -> m (ùêø a)
manyNT :: (Monad m, MonadNondet m) => m a -> m (ùêø a)
twoOrMoreSplitNT :: (Monad m, MonadNondet m) => m a -> m ((a ‚àß a) ‚àß ùêø a)
manySepBy :: (Monad m, MonadNondet m) => m () -> m a -> m (ùêø a)
manyPrefBy :: (Monad m, MonadNondet m) => m () -> m a -> m (ùêø a)
mzeroùëÇ :: (Monad m, MonadNondet m) => ùëÇ a -> m a
returnùëÉ :: forall m a. (Monad m, MonadNondet m) => ùëÉ a -> m a
reset :: (Monad m, MonadCont u m) => m u -> m u
modifyC :: (Monad m, MonadCont u m) => (u -> m u) -> m ()
withCOn :: (Monad m, MonadCont u m) => m a -> (a -> m u) -> m u
putEnv :: (Monad m, MonadReader r m, MonadCont u m) => r -> m ()
putEnvL :: (Monad m, MonadReader r m, MonadCont u m) => (r ‚ü¢ r') -> r' -> m ()
modifyEnv :: (Monad m, MonadReader r m, MonadCont u m) => (r -> r) -> m ()
modifyEnvL :: (Monad m, MonadReader r m, MonadCont u m) => (r ‚ü¢ r') -> (r' -> r') -> m ()
ureset :: (Monad m, MonadUCont m) => m a -> m a
umodifyC :: (Monad m, MonadUCont m) => (forall u. u -> m u) -> m ()
uwithCOn :: (Monad m, MonadUCont m) => m a -> (a -> m u) -> m u
uputEnv :: (Monad m, MonadReader r m, MonadUCont m) => r -> m ()
uputEnvL :: (Monad m, MonadReader r m, MonadUCont m) => (r ‚ü¢ r') -> r' -> m ()
umodifyEnv :: (Monad m, MonadReader r m, MonadUCont m) => (r -> r) -> m ()
umodifyEnvL :: (Monad m, MonadReader r m, MonadUCont m) => (r ‚ü¢ r') -> (r' -> r') -> m ()
unextEnvL :: (Monad m, MonadReader r m, MonadUCont m, Zero a, One a, Plus a) => (r ‚ü¢ a) -> m a
deriveAskL :: forall m‚ÇÅ m‚ÇÇ r r'. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadReader r m‚ÇÇ) => (r ‚ü¢ r') -> m‚ÇÅ r'
deriveLocal :: forall m‚ÇÅ m‚ÇÇ r r' a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadReader r m‚ÇÇ) => (r ‚ü¢ r') -> r' -> m‚ÇÅ a -> m‚ÇÅ a
deriveTell :: forall m‚ÇÅ m‚ÇÇ o. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadWriter o m‚ÇÇ) => o -> m‚ÇÅ ()
deriveHijack :: forall m‚ÇÅ m‚ÇÇ o a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadWriter o m‚ÇÇ) => m‚ÇÅ a -> m‚ÇÅ (o ‚àß a)
deriveGet :: forall m‚ÇÅ m‚ÇÇ s. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadState s m‚ÇÇ) => m‚ÇÅ s
derivePut :: forall m‚ÇÅ m‚ÇÇ s. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadState s m‚ÇÇ) => s -> m‚ÇÅ ()
deriveAbort :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadFail m‚ÇÇ) => m‚ÇÅ a
deriveTry :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadFail m‚ÇÇ) => m‚ÇÅ a -> m‚ÇÅ a -> m‚ÇÅ a
deriveThrow :: forall m‚ÇÅ m‚ÇÇ e a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadError e m‚ÇÇ) => e -> m‚ÇÅ a
deriveCatch :: forall m‚ÇÅ m‚ÇÇ e a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadError e m‚ÇÇ) => m‚ÇÅ a -> (e -> m‚ÇÅ a) -> m‚ÇÅ a
deriveMzero :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadNondet m‚ÇÇ) => m‚ÇÅ a
deriveMplus :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadNondet m‚ÇÇ) => m‚ÇÅ a -> m‚ÇÅ a -> m‚ÇÅ a
deriveMtop :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadTop m‚ÇÇ) => m‚ÇÅ a
deriveCallCC :: forall m‚ÇÅ m‚ÇÇ r a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadCont r m‚ÇÇ) => ((a -> m‚ÇÅ r) -> m‚ÇÅ r) -> m‚ÇÅ a
deriveWithC :: forall m‚ÇÅ m‚ÇÇ r a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadCont r m‚ÇÇ) => (a -> m‚ÇÅ r) -> m‚ÇÅ a -> m‚ÇÅ r
instance UVMHS.Core.Effects.MonadNondet UVMHS.Core.Init.ùêº
instance UVMHS.Core.Effects.MonadNondet UVMHS.Core.Init.ùêø
instance UVMHS.Core.Effects.MonadNondet UVMHS.Core.Init.ùëÑ
instance UVMHS.Core.Effects.MonadError e ((UVMHS.Core.Init.‚à®) e)
instance UVMHS.Core.Effects.MonadFail UVMHS.Core.Init.ùëÇ
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.MonadWriter o ((UVMHS.Core.Init.‚àß) o)
instance UVMHS.Core.Effects.MonadReader r ((->) r)

module UVMHS.Core.Chunky
tr‚Ñï8 :: ‚Ñï64 -> ‚Ñï8
toBits‚Ñ§64 :: ‚Ñ§64 -> ‚Ñï64
frBits‚Ñ§64 :: ‚Ñï64 -> ‚Ñ§64
toBitsùîª :: ùîª -> ‚Ñï64
frBitsùîª :: ‚Ñï64 -> ùîª
skipChunk :: Monad m => m ‚Ñï8 -> ‚Ñï64 -> m ()
emptyChunk :: ‚Ñï64 -> ùêº ‚Ñï8
joinBytes :: (‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8) -> ‚Ñï64
splitBytes :: ‚Ñï64 -> (‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8)
class Chunky a
chunkSize :: Chunky a => P a -> ‚Ñï64
fromChunk :: forall m. (Chunky a, Monad m) => m ‚Ñï8 -> m a
toChunk :: Chunky a => a -> ùêº ‚Ñï8
instance (UVMHS.Core.Chunky.Chunky b, a UVMHS.Core.Classes.Morphism.‚áÑ b) => UVMHS.Core.Chunky.Chunky a
instance UVMHS.Core.Chunky.Chunky ()
instance UVMHS.Core.Chunky.Chunky UVMHS.Core.Init.‚Ñï8
instance UVMHS.Core.Chunky.Chunky UVMHS.Core.Init.ùîπ
instance UVMHS.Core.Chunky.Chunky UVMHS.Core.Init.‚ÑÇ
instance UVMHS.Core.Chunky.Chunky UVMHS.Core.Init.‚Ñï64
instance UVMHS.Core.Chunky.Chunky UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Core.Chunky.Chunky UVMHS.Core.Init.ùîª
instance (UVMHS.Core.Chunky.Chunky a, UVMHS.Core.Chunky.Chunky b) => UVMHS.Core.Chunky.Chunky (a UVMHS.Core.Init.‚àß b)
instance (UVMHS.Core.Chunky.Chunky a, UVMHS.Core.Chunky.Chunky b) => UVMHS.Core.Chunky.Chunky (a UVMHS.Core.Init.‚à® b)

module UVMHS.Core.LensDerivedInstances

module UVMHS.Core.Pointed
data AddNull a
Null :: AddNull a
AddNull :: a -> AddNull a
elimAddNull :: b -> (a -> b) -> AddNull a -> b
data ZOM a
NullZOM :: ZOM a
OneZOM :: a -> ZOM a
MoreZOM :: ZOM a
elimZOM :: b -> (a -> b) -> b -> ZOM a -> b
data AddBot a
Bot :: AddBot a
AddBot :: a -> AddBot a
elimAddBot :: b -> (a -> b) -> AddBot a -> b
data AddTop a
AddTop :: a -> AddTop a
Top :: AddTop a
elimAddTop :: b -> (a -> b) -> AddTop a -> b
data AddBT a
BotBT :: AddBT a
AddBT :: a -> AddBT a
TopBT :: AddBT a
addTopL :: AddTop a ‚å≤ a
nullZOML :: ZOM a ‚å≤ ()
oneZOML :: ZOM a ‚å≤ a
moreZOML :: ZOM a ‚å≤ ()
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Pointed.AddNull a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddNull a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddNull a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Pointed.ZOM a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.ZOM a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.ZOM a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Pointed.AddBot a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddBot a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddBot a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Pointed.AddTop a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddTop a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddTop a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Pointed.AddBT a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddBT a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Pointed.AddBT a)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Functors.Return UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Lattice.POrd a => UVMHS.Core.Classes.Lattice.POrd (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Bot a => UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.JoinLattice a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Pointed.AddTop a)
instance (UVMHS.Core.Classes.Lattice.JoinLattice a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Pointed.AddTop a)
instance (UVMHS.Core.Classes.Lattice.Bot a, UVMHS.Core.Classes.Lattice.Difference a) => UVMHS.Core.Classes.Lattice.Difference (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Arithmetic.Zero a => UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Arithmetic.Plus a => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Arithmetic.Additive a => UVMHS.Core.Classes.Arithmetic.Additive (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Arithmetic.Times a => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Functors.Return UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Lattice.POrd a => UVMHS.Core.Classes.Lattice.POrd (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Top a => UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.MeetLattice a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Pointed.AddBot a)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.MeetLattice a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Functors.Return UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Pointed.ZOM a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Pointed.ZOM a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Pointed.ZOM a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Pointed.ZOM
instance UVMHS.Core.Classes.Functors.Return UVMHS.Core.Pointed.ZOM
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Core.Pointed.ZOM
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Core.Pointed.ZOM
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Core.Pointed.ZOM
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Pointed.ZOM a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.Functors.Return UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Core.Pointed.AddNull

module UVMHS.Core.Static
type family (a :: k) ‚â° (b :: k)
type family (x :: ùîπ) ‚©î (y :: ùîπ)
type family (x :: ùîπ) ‚©ì (y :: ùîπ)
type ùêç = Nat
type ùêí = Symbol
type (m :: ùêç) + (n :: ùêç) = m + n
type (m :: ùêç) √ó (n :: ùêç) = m * n
type (m :: ùêç) ^ (n :: ùêç) = m ^ n
type (m :: ùêç) - (n :: ùêç) = m - n
type (m :: ùêç) / (n :: ùêç) = m `Div` n
type (m :: ùêç) % (n :: ùêç) = m `Mod` n
type Log2 (n :: ùêç) = Log2 n
type (m :: ùêç) ‚ãö (n :: ùêç) = CmpNat m n
type (m :: ùêç) ‚â∫ (n :: ùêç) = (m ‚ãö n) ‚â° 'LT ~ 'True
infix 4 ‚â∫
type (m :: ùêç) ‚âç (n :: ùêç) = (m ‚ãö n) ‚â° 'EQ ~ 'True
infix 4 ‚âç
type (m :: ùêç) ‚âª (n :: ùêç) = (m ‚ãö n) ‚â° 'GT ~ 'True
infix 4 ‚âª
type (m :: ùêç) ‚âº (n :: ùêç) = ((m ‚ãö n) ‚â° 'LT) ‚©î ((m ‚ãö n ‚â° 'EQ)) ~ 'True
infix 4 ‚âº
wnlt_UNSAFE :: forall m n. P m -> P n -> W (m ‚â∫ n)
wneq_UNSAFE :: forall m n. P m -> P n -> W (m ‚âç n)
wngt_UNSAFE :: forall m n. P m -> P n -> W (m ‚âª n)
wnlte_UNSAFE :: forall m n. P m -> P n -> W (m ‚âº n)
data (m :: ùêç) < (n :: ùêç)
[W_LT] :: m ‚â∫ n => m < n
infix 4 <
withLT :: (m < n) -> (m ‚â∫ n => a) -> a
nlt_UNSAFE :: forall m n. P m -> P n -> m < n
data (m :: ùêç) ‚â§ (n :: ùêç)
[W_LTE] :: m ‚âº n => m ‚â§ n
infix 4 ‚â§
withLTE :: (m ‚â§ n) -> (m ‚âº n => a) -> a
nlte_UNSAFE :: forall m n. P m -> P n -> m ‚â§ n
irreflLT :: (n < n) -> Void
weakenLT :: (n‚ÇÅ < n‚ÇÇ) -> n‚ÇÅ ‚â§ n‚ÇÇ
succLT :: (n‚ÇÅ < n‚ÇÇ) -> (n‚ÇÅ + 1) ‚â§ n‚ÇÇ
succLTE :: (n‚ÇÅ ‚â§ n‚ÇÇ) -> n‚ÇÅ < (n‚ÇÇ + 1)
(‚äö‚ôØ) :: (n‚ÇÅ ‚â§ n‚ÇÇ) -> (n‚ÇÇ < n‚ÇÉ) -> n‚ÇÅ < n‚ÇÉ
(‚ôØ‚äö) :: (n‚ÇÅ < n‚ÇÇ) -> (n‚ÇÇ ‚â§ n‚ÇÉ) -> n‚ÇÅ < n‚ÇÉ
newtype ‚ÑïS (n :: ùêç)
‚ÑïS_UNSAFE :: ‚Ñï -> ‚ÑïS (n :: ùêç)
[un‚ÑïS] :: ‚ÑïS (n :: ùêç) -> ‚Ñï
newtype ‚Ñï64S (n :: ùêç)
‚Ñï64S_UNSAFE :: ‚Ñï64 -> ‚Ñï64S (n :: ùêç)
[un‚Ñï64S] :: ‚Ñï64S (n :: ùêç) -> ‚Ñï64
newtype ùïäS (s :: ùêí)
ùïäS_UNSAFE :: ùïä -> ùïäS (s :: ùêí)
[unùïäS] :: ùïäS (s :: ùêí) -> ùïä
class (KnownNat n) => ùí© (n :: ùêç)
reify‚Ñï :: ùí© n => P n -> ‚Ñï
class (KnownNat n) => ùí©64 (n :: ùêç)
reify‚Ñï64 :: ùí©64 n => P n -> ‚Ñï64
class (KnownSymbol s) => ùíÆ (s :: ùêí)
reifyùïä :: ùíÆ s => P s -> ùïä
compareùêç :: forall (a :: ùêç) (b :: ùêç). (ùí© a, ùí© b) => ùëÇ (a ‚âü b)
ùïüs :: forall n. ùí© n => ‚ÑïS n
ùïüd :: ‚Ñï -> (forall n. ùí© n => ‚ÑïS n -> a) -> a
ùïü64s :: forall n. ùí©64 n => ‚Ñï64S n
ùïü64d :: ‚Ñï64 -> (forall n. ùí©64 n => ‚Ñï64S n -> a) -> a
ùï§s :: forall s. KnownSymbol s => ùïäS s
ùï§sd :: ùïä -> (forall s. ùíÆ s => ùïäS s -> a) -> a
type family (xs :: [a]) ‚ß∫ (ys :: [a]) :: [a]
type family Sum (ns :: [ùêç])
type family Prod (ns :: [ùêç])
type family AllC (c :: a -> Constraint) (xs :: [a]) :: Constraint
data Spine :: [a] -> ‚òÖ
[NilSpine] :: Spine '[]
[ConsSpine] :: Spine xs -> Spine (x ': xs)
class HasSpine xs
spine :: HasSpine xs => Spine xs
newtype ùïÄ64 (n :: ùêç)
ùïÄ64_UNSAFE :: ‚Ñï64 -> ùïÄ64 (n :: ùêç)
[unùïÄ64] :: ùïÄ64 (n :: ùêç) -> ‚Ñï64
ùïö64 :: forall m n. m ‚â∫ n => ‚Ñï64S m -> ùïÄ64 n
ùïö64d :: forall n. ùí©64 n => ‚Ñï64 -> ùëÇ (ùïÄ64 n)
ùïü64di :: forall n a. ùïÄ64 n -> (forall m. m ‚â∫ n => ‚Ñï64S m -> a) -> a
uptoùïÄ64 :: forall n. ùí©64 n => ‚Ñï64S n -> ùêºS n (ùïÄ64 n)
wkùïÄ64 :: m ‚âº n => ùïÄ64 m -> ùïÄ64 n
newtype ùêºS (n :: ùêç) a
ùêºS_UNSAFE :: ùêº a -> ùêºS (n :: ùêç) a
[unùêºS] :: ùêºS (n :: ùêç) a -> ùêº a
class NullS t
nullS :: NullS t => t 0 a
class SingleS t
ùî¢ :: SingleS t => a -> t 1 a
class AppendS t
(‚ß∫‚ôÆ) :: AppendS t => t n‚ÇÅ a -> t n‚ÇÇ a -> t (n‚ÇÅ + n‚ÇÇ) a
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Static.ùêºS n a)
instance UVMHS.Core.Static.AppendS UVMHS.Core.Static.ùêºS
instance UVMHS.Core.Static.SingleS UVMHS.Core.Static.ùêºS
instance UVMHS.Core.Static.NullS UVMHS.Core.Static.ùêºS
instance UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Static.ùêºS n)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Static.ùêºS n a)
instance UVMHS.Core.Static.HasSpine '[]
instance forall a (xs :: [a]) (x :: a). UVMHS.Core.Static.HasSpine xs => UVMHS.Core.Static.HasSpine (x : xs)
instance GHC.TypeLits.KnownSymbol s => UVMHS.Core.Static.ùíÆ s
instance GHC.TypeNats.KnownNat n => UVMHS.Core.Static.ùí©64 n
instance GHC.TypeNats.KnownNat n => UVMHS.Core.Static.ùí© n
instance UVMHS.Core.Classes.Morphism.Reflexive (UVMHS.Core.Static.‚â§)
instance UVMHS.Core.Classes.Morphism.Transitive (UVMHS.Core.Static.‚â§)
instance UVMHS.Core.Classes.Morphism.Category (UVMHS.Core.Static.‚â§)
instance UVMHS.Core.Classes.Morphism.Transitive (UVMHS.Core.Static.<)

module UVMHS.Core.Time
type Time = UTCTime
type TimeD = NominalDiffTime
secondsTimeD :: TimeD -> ùîª
(‚®∫) :: Time -> Time -> TimeD
infixl 5 ‚®∫
(‚®π) :: Time -> TimeD -> Time
infixl 5 ‚®π
now :: IO Time
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Core.Time.TimeD
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Core.Time.TimeD
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Core.Time.TimeD
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Core.Time.TimeD
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Core.Time.TimeD
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Core.Time.TimeD

module UVMHS.Core.Transformers
newtype (‚ä°) (t‚ÇÅ :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ)) (t‚ÇÇ :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ)) m a
Compose2 :: t‚ÇÅ (t‚ÇÇ m) a -> (‚ä°) (t‚ÇÅ :: (‚òÖ -> ‚òÖ) -> ‚òÖ -> ‚òÖ) (t‚ÇÇ :: (‚òÖ -> ‚òÖ) -> ‚òÖ -> ‚òÖ) m a
[unCompose2] :: (‚ä°) (t‚ÇÅ :: (‚òÖ -> ‚òÖ) -> ‚òÖ -> ‚òÖ) (t‚ÇÇ :: (‚òÖ -> ‚òÖ) -> ‚òÖ -> ‚òÖ) m a -> t‚ÇÅ (t‚ÇÇ m) a
infixl 7 ‚ä°
deriveLiftIO :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftIO t‚ÇÇ) => (forall a. IO a -> m a) -> forall a. IO a -> t‚ÇÅ m a
deriveLiftAskL :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftReader t‚ÇÇ) => (forall r'. (r ‚ü¢ r') -> m r') -> forall r'. (r ‚ü¢ r') -> t‚ÇÅ m r'
deriveLiftLocalL :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftReader t‚ÇÇ) => (forall r' a. (r ‚ü¢ r') -> r' -> m a -> m a) -> forall r' a. (r ‚ü¢ r') -> r' -> t‚ÇÅ m a -> t‚ÇÅ m a
deriveLiftTell :: forall t‚ÇÅ t‚ÇÇ m o. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftWriter t‚ÇÇ) => (o -> m ()) -> o -> t‚ÇÅ m ()
deriveLiftHijack :: forall t‚ÇÅ t‚ÇÇ m o. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftWriter t‚ÇÇ) => (forall a. m a -> m (o ‚àß a)) -> forall a. t‚ÇÅ m a -> t‚ÇÅ m (o ‚àß a)
deriveLiftGet :: forall t‚ÇÅ t‚ÇÇ m s. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftState t‚ÇÇ) => m s -> t‚ÇÅ m s
deriveLiftPut :: forall t‚ÇÅ t‚ÇÇ m s. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftState t‚ÇÇ) => (s -> m ()) -> s -> t‚ÇÅ m ()
deriveLiftAbort :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftFail t‚ÇÇ) => (forall a. m a) -> forall a. t‚ÇÅ m a
deriveLiftTry :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftFail t‚ÇÇ) => (forall a. m a -> m a -> m a) -> forall a. t‚ÇÅ m a -> t‚ÇÅ m a -> t‚ÇÅ m a
deriveLiftThrow :: forall t‚ÇÅ t‚ÇÇ m e. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftError t‚ÇÇ) => (forall a. e -> m a) -> forall a. e -> t‚ÇÅ m a
deriveLiftCatch :: forall t‚ÇÅ t‚ÇÇ m e. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftError t‚ÇÇ) => (forall a. m a -> (e -> m a) -> m a) -> forall a. t‚ÇÅ m a -> (e -> t‚ÇÅ m a) -> t‚ÇÅ m a
deriveLiftDelay :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftDelay t‚ÇÇ) => (forall a. (() -> m a) -> m a) -> forall a. (() -> t‚ÇÅ m a) -> t‚ÇÅ m a
deriveLiftMzero :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftNondet t‚ÇÇ) => (forall a. m a) -> forall a. t‚ÇÅ m a
deriveLiftMplus :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftNondet t‚ÇÇ) => (forall a. m a -> m a -> m a) -> forall a. t‚ÇÅ m a -> t‚ÇÅ m a -> t‚ÇÅ m a
deriveLiftMtop :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftTop t‚ÇÇ) => (forall a. m a) -> forall a. t‚ÇÅ m a
deriveLiftCallCC :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftCont t‚ÇÇ) => (forall a. ((a -> m r) -> m r) -> m a) -> forall a. ((a -> t‚ÇÅ m r) -> t‚ÇÅ m r) -> t‚ÇÅ m a
deriveLiftWithC :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftCont t‚ÇÇ) => (forall a. (a -> m r) -> m a -> m r) -> forall a. (a -> t‚ÇÅ m r) -> t‚ÇÅ m a -> t‚ÇÅ m r
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Functors.Monad m) => UVMHS.Core.Classes.Functors.Functor ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Functors.Monad m) => UVMHS.Core.Classes.Functors.Return ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Functors.Monad m) => UVMHS.Core.Classes.Functors.Bind ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Functors.Monad m) => UVMHS.Core.Classes.Functors.Monad ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (UVMHS.Core.Classes.Functors.Functor2 t‚ÇÅ, UVMHS.Core.Classes.Functors.Functor2 t‚ÇÇ) => UVMHS.Core.Classes.Functors.Functor2 (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftIO t‚ÇÅ, UVMHS.Core.Effects.LiftIO t‚ÇÇ) => UVMHS.Core.Effects.LiftIO (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftReader t‚ÇÅ, UVMHS.Core.Effects.LiftReader t‚ÇÇ) => UVMHS.Core.Effects.LiftReader (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftWriter t‚ÇÅ, UVMHS.Core.Effects.LiftWriter t‚ÇÇ) => UVMHS.Core.Effects.LiftWriter (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftState t‚ÇÅ, UVMHS.Core.Effects.LiftState t‚ÇÇ) => UVMHS.Core.Effects.LiftState (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftFail t‚ÇÅ, UVMHS.Core.Effects.LiftFail t‚ÇÇ) => UVMHS.Core.Effects.LiftFail (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftError t‚ÇÅ, UVMHS.Core.Effects.LiftError t‚ÇÇ) => UVMHS.Core.Effects.LiftError (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftDelay t‚ÇÅ, UVMHS.Core.Effects.LiftDelay t‚ÇÇ) => UVMHS.Core.Effects.LiftDelay (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftNondet t‚ÇÅ, UVMHS.Core.Effects.LiftNondet t‚ÇÇ) => UVMHS.Core.Effects.LiftNondet (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftTop t‚ÇÅ, UVMHS.Core.Effects.LiftTop t‚ÇÇ) => UVMHS.Core.Effects.LiftTop (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Functors.Monad m' => UVMHS.Core.Classes.Functors.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftCont t‚ÇÅ, UVMHS.Core.Effects.LiftCont t‚ÇÇ) => UVMHS.Core.Effects.LiftCont (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)

module UVMHS.Core.Monads
newtype MU m
MU :: m () -> MU m
[unMU] :: MU m -> m ()
newtype ID a
ID :: a -> ID a
[unID] :: ID a -> a
newtype ReaderT r m a
ReaderT :: (r -> m a) -> ReaderT r m a
[unReaderT] :: ReaderT r m a -> r -> m a
runReaderT :: forall r m a. r -> ReaderT r m a -> m a
newtype WriterT o m a
WriterT :: m (o ‚àß a) -> WriterT o m a
[unWriterT] :: WriterT o m a -> m (o ‚àß a)
evalWriterT :: forall o m a. Functor m => WriterT o m a -> m a
newtype StateT s m a
StateT :: (s -> m (s ‚àß a)) -> StateT s m a
[unStateT] :: StateT s m a -> s -> m (s ‚àß a)
runStateT :: forall s m a. s -> StateT s m a -> m (s ‚àß a)
evalStateT :: forall s m a. Functor m => s -> StateT s m a -> m a
type State s = StateT s ID
mkState :: (s -> s ‚àß a) -> State s a
runState :: s -> State s a -> s ‚àß a
evalState :: s -> State s a -> a
newtype FailT m a
FailT :: m (ùëÇ a) -> FailT m a
[unFailT] :: FailT m a -> m (ùëÇ a)
newtype ErrorT e m a
ErrorT :: m (e ‚à® a) -> ErrorT e m a
[unErrorT] :: ErrorT e m a -> m (e ‚à® a)
newtype DelayT m a
DelayT :: (() -> m a) -> DelayT m a
[unDelayT] :: DelayT m a -> () -> m a
runDelayT :: DelayT m a -> m a
newtype NondetT m a
NondetT :: m (ùëÑ a) -> NondetT m a
[unNondetT] :: NondetT m a -> m (ùëÑ a)
newtype ContT u m a
ContT :: ((a -> m u) -> m u) -> ContT u m a
[unContT] :: ContT u m a -> (a -> m u) -> m u
runContT :: (a -> m u) -> ContT u m a -> m u
evalContT :: Return m => ContT u m u -> m u
newtype UContT m a
UContT :: (forall u. (a -> m u) -> m u) -> UContT m a
[unUContT] :: UContT m a -> forall u. (a -> m u) -> m u
runUContT :: forall u m a. (a -> m u) -> UContT m a -> m u
evalUContT :: Return m => UContT m a -> m a
newtype RWST r o s m a
RWST :: ReaderT r (WriterT o (StateT s m)) a -> RWST r o s m a
[unRWST] :: RWST r o s m a -> ReaderT r (WriterT o (StateT s m)) a
mkRWST :: forall r o s m a. Monad m => (r -> s -> m ((s ‚àß o) ‚àß a)) -> RWST r o s m a
runRWST :: forall r o s m a. Monad m => r -> s -> RWST r o s m a -> m ((s ‚àß o) ‚àß a)
evalRWST :: forall r o s m a. Monad m => r -> s -> RWST r o s m a -> m a
type RWS r o s = RWST r o s ID
mkRWS :: forall r o s a. (r -> s -> (s ‚àß o) ‚àß a) -> RWS r o s a
runRWS :: forall r o s a. r -> s -> RWS r o s a -> (s ‚àß o) ‚àß a
evalRWS :: forall r o s a. r -> s -> RWS r o s a -> a
instance UVMHS.Core.Classes.Lattice.Difference a => UVMHS.Core.Classes.Lattice.Difference (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Dual a => UVMHS.Core.Classes.Lattice.Dual (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Lattice.Bot a, UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Top a => UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Lattice.Bot a, UVMHS.Core.Classes.Lattice.Join a) => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Bot a => UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Monoid.Null a, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadDelay m) => UVMHS.Core.Effects.MonadDelay (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Append o) => UVMHS.Core.Classes.Functors.Monad (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Append o) => UVMHS.Core.Classes.Functors.Bind (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Functors.Return m, UVMHS.Core.Classes.Monoid.Null o) => UVMHS.Core.Classes.Functors.Return (UVMHS.Core.Monads.RWST r o s m)
instance UVMHS.Core.Classes.Functors.Functor m => UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Monoid.Null s, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.RWST r o s m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Append o, UVMHS.Core.Classes.Monoid.Append s, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.RWST r o s m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Classes.Monoid.Monoid s, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.RWST r o s m a)
instance UVMHS.Core.Classes.Monoid.Monoid o => UVMHS.Core.Classes.Functors.Functor2 (UVMHS.Core.Monads.RWST r o s)
instance UVMHS.Core.Monads.RWST r o s UVMHS.Core.Classes.Morphism.‚áÑ‚Åº ((UVMHS.Core.Monads.ReaderT r UVMHS.Core.Transformers.‚ä° UVMHS.Core.Monads.WriterT o) UVMHS.Core.Transformers.‚ä° UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Classes.Monoid.Monoid o => UVMHS.Core.Classes.Functors.Transformer (UVMHS.Core.Monads.RWST r o s)
instance forall k (m :: k -> *). UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Monads.UContT m)
instance forall k (m :: k -> *). UVMHS.Core.Classes.Functors.Return (UVMHS.Core.Monads.UContT m)
instance forall k (m :: k -> *). UVMHS.Core.Classes.Functors.Bind (UVMHS.Core.Monads.UContT m)
instance forall k (m :: k -> *). UVMHS.Core.Classes.Functors.Monad (UVMHS.Core.Monads.UContT m)
instance UVMHS.Core.Classes.Functors.Functor2Iso UVMHS.Core.Monads.UContT
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Effects.MonadUCont (UVMHS.Core.Monads.UContT m)
instance UVMHS.Core.Classes.Constraints.Const UVMHS.Core.Classes.Monoid.Null m => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.UContT m a)
instance UVMHS.Core.Classes.Constraints.Const UVMHS.Core.Classes.Monoid.Append m => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.UContT m a)
instance UVMHS.Core.Classes.Constraints.Const UVMHS.Core.Classes.Monoid.Monoid m => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.UContT m a)
instance UVMHS.Core.Classes.Functors.Transformer UVMHS.Core.Monads.UContT
instance UVMHS.Core.Effects.LiftIO UVMHS.Core.Monads.UContT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.UContT m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadReader r m) => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.UContT m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadWriter o m) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.UContT m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadState s m) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.UContT m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.UContT m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.UContT m)
instance UVMHS.Core.Effects.LiftDelay UVMHS.Core.Monads.UContT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadDelay m) => UVMHS.Core.Effects.MonadDelay (UVMHS.Core.Monads.UContT m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.UContT m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.UContT m)
instance forall k (u :: k) (m :: k -> *). UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Monads.ContT u m)
instance forall k (u :: k) (m :: k -> *). UVMHS.Core.Classes.Functors.Return (UVMHS.Core.Monads.ContT u m)
instance forall k (u :: k) (m :: k -> *). UVMHS.Core.Classes.Functors.Bind (UVMHS.Core.Monads.ContT u m)
instance forall k (u :: k) (m :: k -> *). UVMHS.Core.Classes.Functors.Monad (UVMHS.Core.Monads.ContT u m)
instance UVMHS.Core.Classes.Functors.Functor2Iso (UVMHS.Core.Monads.ContT u)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Effects.MonadCont u (UVMHS.Core.Monads.ContT u m)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Monoid.Null u) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ContT u m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Append u) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ContT u m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Monoid u) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.ContT u m a)
instance UVMHS.Core.Classes.Functors.Transformer (UVMHS.Core.Monads.ContT u)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.ContT u)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.ContT u m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadReader r m) => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.ContT u m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadWriter o m) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.ContT (o UVMHS.Core.Init.‚àß r) m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadState s m) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.ContT u m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.ContT u m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.ContT u m)
instance UVMHS.Core.Effects.LiftDelay (UVMHS.Core.Monads.ContT u)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadDelay m) => UVMHS.Core.Effects.MonadDelay (UVMHS.Core.Monads.ContT u m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.ContT u m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.ContT u m)
instance UVMHS.Core.Classes.Functors.Functor m => UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Classes.Functors.Return m => UVMHS.Core.Classes.Functors.Return (UVMHS.Core.Monads.NondetT m)
instance (UVMHS.Core.Classes.Functors.Bind m, UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Monoid m) => UVMHS.Core.Classes.Functors.Bind (UVMHS.Core.Monads.NondetT m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Monoid m) => UVMHS.Core.Classes.Functors.Monad (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Monoid m => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Classes.Functors.Transformer UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftIO UVMHS.Core.Monads.NondetT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Effects.LiftReader UVMHS.Core.Monads.NondetT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadReader r m) => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Effects.LiftWriter UVMHS.Core.Monads.NondetT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadWriter o m) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Effects.LiftState UVMHS.Core.Monads.NondetT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadState s m) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Effects.LiftFail UVMHS.Core.Monads.NondetT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Effects.LiftError UVMHS.Core.Monads.NondetT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Effects.LiftDelay UVMHS.Core.Monads.NondetT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadDelay m) => UVMHS.Core.Effects.MonadDelay (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Effects.LiftNondet UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftTop UVMHS.Core.Monads.NondetT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.NondetT m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Monoid m, UVMHS.Core.Effects.MonadCont (UVMHS.Core.Init.ùëÑ r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Classes.Functors.Functor m => UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Classes.Functors.Return m => UVMHS.Core.Classes.Functors.Return (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Classes.Functors.Bind m => UVMHS.Core.Classes.Functors.Bind (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Classes.Functors.Monad (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Classes.Functors.Functor2 UVMHS.Core.Monads.DelayT
instance forall k (m :: k -> *). UVMHS.Core.Effects.MonadDelay (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Classes.Constraints.Const UVMHS.Core.Classes.Monoid.Null m => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.DelayT m a)
instance UVMHS.Core.Classes.Constraints.Const UVMHS.Core.Classes.Monoid.Append m => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.DelayT m a)
instance (UVMHS.Core.Classes.Constraints.Const UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Constraints.Const UVMHS.Core.Classes.Monoid.Append m) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.DelayT m a)
instance UVMHS.Core.Classes.Functors.Transformer UVMHS.Core.Monads.DelayT
instance UVMHS.Core.Effects.LiftIO UVMHS.Core.Monads.DelayT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Effects.LiftReader UVMHS.Core.Monads.DelayT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadReader r m) => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Effects.LiftWriter UVMHS.Core.Monads.DelayT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadWriter o m) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Effects.LiftState UVMHS.Core.Monads.DelayT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadState s m) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Effects.LiftFail UVMHS.Core.Monads.DelayT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Effects.LiftError UVMHS.Core.Monads.DelayT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Effects.LiftDelay UVMHS.Core.Monads.DelayT
instance UVMHS.Core.Effects.LiftNondet UVMHS.Core.Monads.DelayT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Effects.LiftTop UVMHS.Core.Monads.DelayT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Effects.MonadCont r m => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Effects.MonadUCont m => UVMHS.Core.Effects.MonadUCont (UVMHS.Core.Monads.DelayT m)
instance UVMHS.Core.Classes.Functors.Functor m => UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Functors.Return m => UVMHS.Core.Classes.Functors.Return (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Classes.Functors.Bind (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Classes.Functors.Monad (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Functors.Functor2 (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.ErrorT e m)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ErrorT e m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Append e, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ErrorT e m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Append e, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.ErrorT e m a)
instance UVMHS.Core.Classes.Functors.Transformer (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.ErrorT e)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.ErrorT e)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadReader r m) => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.ErrorT e)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadWriter o m) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.ErrorT e)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadState s m) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.ErrorT e)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftDelay (UVMHS.Core.Monads.ErrorT e)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadDelay m) => UVMHS.Core.Effects.MonadDelay (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.ErrorT e)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.ErrorT e)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.ErrorT e m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadCont (e UVMHS.Core.Init.‚à® r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Functors.Functor m => UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Functors.Return m => UVMHS.Core.Classes.Functors.Return (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Classes.Functors.Bind (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Classes.Functors.Monad (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Functors.Functor2 UVMHS.Core.Monads.FailT
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.FailT m)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.FailT m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.FailT m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.FailT m a)
instance UVMHS.Core.Classes.Functors.Transformer UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftIO UVMHS.Core.Monads.FailT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Effects.LiftReader UVMHS.Core.Monads.FailT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadReader r m) => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Effects.LiftWriter UVMHS.Core.Monads.FailT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadWriter o m) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Effects.LiftState UVMHS.Core.Monads.FailT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadState s m) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Effects.LiftFail UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftError UVMHS.Core.Monads.FailT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Effects.LiftDelay UVMHS.Core.Monads.FailT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadDelay m) => UVMHS.Core.Effects.MonadDelay (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Effects.LiftNondet UVMHS.Core.Monads.FailT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Effects.LiftTop UVMHS.Core.Monads.FailT
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.FailT m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadCont (UVMHS.Core.Init.ùëÇ r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Functors.Functor m => UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Functors.Return m => UVMHS.Core.Classes.Functors.Return (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Functors.Bind m => UVMHS.Core.Classes.Functors.Bind (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Classes.Functors.Monad (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Functors.Functor2 (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Classes.Functors.Return m => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.StateT s m)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Monoid.Null s, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.StateT s m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Append s, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.StateT s m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Monoid s, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.StateT s m a)
instance UVMHS.Core.Classes.Functors.Transformer (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.StateT s)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.StateT s)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadReader r m) => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.StateT s)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadWriter o m) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.StateT s)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.StateT s)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Effects.LiftDelay (UVMHS.Core.Monads.StateT s)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadDelay m) => UVMHS.Core.Effects.MonadDelay (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.StateT s)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.StateT s)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.StateT s m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadCont (s UVMHS.Core.Init.‚àß u) m) => UVMHS.Core.Effects.MonadCont u (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Functors.Functor m => UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Monads.WriterT o m)
instance (UVMHS.Core.Classes.Functors.Return m, UVMHS.Core.Classes.Monoid.Null o) => UVMHS.Core.Classes.Functors.Return (UVMHS.Core.Monads.WriterT o m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Append o) => UVMHS.Core.Classes.Functors.Bind (UVMHS.Core.Monads.WriterT o m)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Classes.Functors.Monad (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Classes.Monoid.Monoid o => UVMHS.Core.Classes.Functors.Functor2 (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Classes.Monoid.Null o) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.WriterT o m)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.WriterT o m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Append o, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.WriterT o m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.WriterT o m a)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Classes.Functors.Transformer (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadReader r m) => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadState s m) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Effects.LiftDelay (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadDelay m) => UVMHS.Core.Effects.MonadDelay (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.WriterT o m)
instance (UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadCont (o UVMHS.Core.Init.‚àß r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Classes.Functors.Functor m => UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Functors.Return m => UVMHS.Core.Classes.Functors.Return (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Functors.Bind m => UVMHS.Core.Classes.Functors.Bind (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Classes.Functors.Monad (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Functors.Functor2 (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.ReaderT r m)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ReaderT r m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ReaderT r m a)
instance (UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Null m, UVMHS.Core.Classes.Constraints.Func UVMHS.Core.Classes.Monoid.Append m, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.ReaderT r m a)
instance UVMHS.Core.Classes.Functors.Transformer (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.ReaderT r)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.ReaderT r)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadWriter o m) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.ReaderT r)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadState s m) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.ReaderT r)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.ReaderT r)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Effects.LiftDelay (UVMHS.Core.Monads.ReaderT r)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadDelay m) => UVMHS.Core.Effects.MonadDelay (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.ReaderT r)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.ReaderT r)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Effects.LiftCont (UVMHS.Core.Monads.ReaderT r)
instance (UVMHS.Core.Classes.Functors.Monad m, UVMHS.Core.Effects.MonadCont r' m) => UVMHS.Core.Effects.MonadCont r' (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Functors.Return UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Comonad.Extract UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Comonad.Cobind UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Comonad.Comonad UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Functors.Return m => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.MU m)
instance UVMHS.Core.Classes.Functors.Bind m => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.MU m)
instance UVMHS.Core.Classes.Functors.Monad m => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.MU m)
instance UVMHS.Core.Effects.MonadIO GHC.Types.IO
instance UVMHS.Core.Classes.Functors.Functor GHC.Types.IO
instance UVMHS.Core.Classes.Functors.Return GHC.Types.IO
instance UVMHS.Core.Classes.Functors.Bind GHC.Types.IO
instance UVMHS.Core.Classes.Functors.Monad GHC.Types.IO

module UVMHS.Core.TH
type THLift = Lift
class MonadQ (m :: ‚òÖ -> ‚òÖ)
qio :: MonadQ m => Q a -> m a
thString :: ùïä -> Exp
thConNames :: Con -> ùêø Name
thTyVarBndrName :: TyVarBndr a -> Name
thSingleClause :: ùêø Pat -> Exp -> Clause
thSingleMatch :: Pat -> Exp -> Match
thViewSimpleCon :: Con -> ùëÇ (Name ‚àß ùêø Type)
thTyConIL :: Info ‚å≤ Dec
thDataDL :: Dec ‚å≤ (((((Cxt ‚àß Name) ‚àß ùêø (TyVarBndr ())) ‚àß ùëÇ Kind) ‚àß ùêø Con) ‚àß ùêø DerivClause)
thNewtypeDL :: Dec ‚å≤ (((((Cxt ‚àß Name) ‚àß ùêø (TyVarBndr ())) ‚àß ùëÇ Kind) ‚àß Con) ‚àß ùêø DerivClause)
thViewADT :: Dec -> ùëÇ (((((Cxt ‚àß Name) ‚àß ùêø (TyVarBndr ())) ‚àß ùëÇ Kind) ‚àß ùêø Con) ‚àß ùêø DerivClause)
thViewSingleConADT :: Dec -> ùëÇ (((((Cxt ‚àß Name) ‚àß ùêø (TyVarBndr ())) ‚àß ùëÇ Kind) ‚àß Con) ‚àß ùêø DerivClause)
thRecCL :: Con ‚å≤ (Name ‚àß ùêø VarStrictType)
thLocùïä :: Q ùïä
thLoc :: Q (TExp ((ùïä -> c) -> c))
thExp :: Q (TExp a) -> Q (TExp ((ùïä -> a -> c) -> c))
thmut :: (Monad (WriterT (ùêº Dec) Q) => WriterT (ùêº Dec) Q ()) -> Q [Dec]
thdec :: Q [Dec] -> WriterT (ùêº Dec) Q ()
instance UVMHS.Core.TH.MonadQ Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Functors.Functor Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Functors.Return Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Functors.Bind Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Functors.Monad Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Effects.MonadIO Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.DSL.Apply Language.Haskell.TH.Syntax.Exp
instance UVMHS.Core.Classes.DSL.Tup Language.Haskell.TH.Syntax.Exp
instance UVMHS.Core.Classes.DSL.Tup Language.Haskell.TH.Syntax.Pat
instance UVMHS.Core.Classes.DSL.Tup Language.Haskell.TH.Syntax.Type
instance UVMHS.Core.Classes.DSL.Apply Language.Haskell.TH.Syntax.Type
instance UVMHS.Core.Classes.DSL.Arrow Language.Haskell.TH.Syntax.Type

module UVMHS.Core.IO
type ùëÖ = IORef
time :: (() -> a) -> IO (a ‚àß TimeD)
throwIO :: IOError -> IO a
trace :: ùïä -> ()
failIO :: ùïä -> IO a
gc :: IO ()
traceM :: Monad m => ùïä -> m ()
shell :: ùïä -> IO ((ùîπ ‚àß ùïä) ‚àß ùïä)
catchIO :: IO a -> (IOError -> IO a) -> IO a
err :: ùïä -> IO ()
(‚Ü¢) :: ùëÖ a -> a -> IO ()
infix 1 ‚Ü¢
ref :: a -> IO (ùëÖ a)
deref :: ùëÖ a -> IO a
io_UNSAFE :: IO a -> a
initUVMHS :: IO ()
owrite :: ùïä -> IO ()
out :: ùïä -> IO ()
outs :: ToIter ùïä t => t -> IO ()
oflush :: IO ()
shout :: Show a => a -> IO ()
ewrite :: ùïä -> IO ()
eflush :: IO ()
redirectErrToOut :: IO ()
iread :: IO ùïä
iargs :: IO (ùêø ùïä)
ilocalArgs :: ùêø ùïä -> IO a -> IO a
abortIOCode :: ‚Ñ§64 -> IO a
abortIO :: IO a
exitIO :: IO a
cleanExit :: IO a -> IO a
fread :: ‚Ñô -> IO ùïä
fwrite :: ‚Ñô -> ùïä -> IO ()
fappend :: ‚Ñô -> ùïä -> IO ()
fcopy :: ‚Ñô -> ‚Ñô -> IO ()
dfilesAll :: IO (ùêø ‚Ñô)
dfiles :: IO (ùêø ‚Ñô)
din :: ‚Ñô -> IO a -> IO a
dtouch :: ‚Ñô -> IO ()
drremove :: ‚Ñô -> IO ()
dcurrent :: IO ‚Ñô
pexists :: ‚Ñô -> IO ùîπ
shellOK :: ùïä -> IO ùïä
shelll :: ùïä -> IO ((ùîπ ‚àß ùïä) ‚àß ùïä)
shelllOK :: ùïä -> IO ùïä
rtime :: ùïä -> (() -> a) -> IO a
timeIO :: IO a -> IO (a ‚àß TimeD)
rtimeIO :: ùïä -> IO a -> IO a
profile :: IO a -> IO ((a ‚àß ùîª) ‚àß ùîª)

-- | The Haskell 2010 type for exceptions in the <a>IO</a> monad. Any I/O
--   operation may raise an <a>IOException</a> instead of returning a
--   result. For a more general type of exception, including also those
--   that arise in pure code, see <a>Exception</a>.
--   
--   In Haskell 2010, this is an opaque type.
type IOError = IOException

-- | Defines the exit codes that a program can return.
data () => ExitCode

module UVMHS.Core.LensDeriving
makeLensLogic :: Cxt -> Name -> ùêø (TyVarBndr ()) -> Name -> Type -> Q (ùêø Dec)
makeLenses :: Name -> Q [Dec]
makePrismLogic :: Cxt -> Name -> ùêø (TyVarBndr ()) -> Name -> ùêø Type -> ‚Ñï -> Q (ùêø Dec)
makePrisms :: Name -> Q [Dec]

module UVMHS.Core.Sized
data ùêºA a
ùêºA :: ‚Ñï64 -> ùêº a -> ùêºA a
[ùëñaSize] :: ùêºA a -> ‚Ñï64
[ùëñaIter] :: ùêºA a -> ùêº a
ùëñaIterL :: forall (a_a2uqJ :: Type). (‚ü¢) (ùêºA a_a2uqJ) (ùêº a_a2uqJ)
ùëñaSizeL :: forall (a_a2uqJ :: Type). (‚ü¢) (ùêºA a_a2uqJ) ‚Ñï64
class ToIterA a t | t -> a
iterA :: ToIterA a t => t -> ùêºA a
iterAI :: (ToIter a t, ASized a) => t -> ùêºA a
data ùêºC a
ùêºC :: ‚Ñï64 -> ùêº a -> ùêºC a
[ùëñcSize] :: ùêºC a -> ‚Ñï64
[ùëñcIter] :: ùêºC a -> ùêº a
ùëñcIterL :: forall (a_a2utb :: Type). (‚ü¢) (ùêºC a_a2utb) (ùêº a_a2utb)
ùëñcSizeL :: forall (a_a2utb :: Type). (‚ü¢) (ùêºC a_a2utb) ‚Ñï64
class ToIterC a t | t -> a
iterC :: ToIterC a t => t -> ùêºC a
iterCI :: ToIter a t => t -> ùêºC a
data ùêºAC a
ùêºAC :: ‚Ñï64 -> ‚Ñï64 -> ùêº a -> ùêºAC a
[ùëñacSize] :: ùêºAC a -> ‚Ñï64
[ùëñacCSize] :: ùêºAC a -> ‚Ñï64
[ùëñacIter] :: ùêºAC a -> ùêº a
ùëñacIterL :: forall (a_a2uBV :: Type). (‚ü¢) (ùêºAC a_a2uBV) (ùêº a_a2uBV)
ùëñacCSizeL :: forall (a_a2uBV :: Type). (‚ü¢) (ùêºAC a_a2uBV) ‚Ñï64
ùëñacSizeL :: forall (a_a2uBV :: Type). (‚ü¢) (ùêºAC a_a2uBV) ‚Ñï64
class ToIterAC a t | t -> a
iterAC :: ToIterAC a t => t -> ùêºAC a
iterACI :: (ToIter a t, ASized a) => t -> ùêºAC a
buildC :: ‚Ñï64 -> a -> (a -> a) -> ùêºC a
uptoC :: ‚Ñï64 -> ùêºC ‚Ñï64
stringCS :: (ToIter ‚ÑÇ t, CSized t) => t -> ùïä
stringSS :: (ToIter ùïä t, ASized t) => t -> ùïä
reiterC :: ToIterC a t => s -> (a -> s -> s ‚àß b) -> t -> ùêºC b
withIndexC :: forall t a. ToIterC a t => t -> ùêºC (‚Ñï64 ‚àß a)
zipWithC :: (ToIterC a t‚ÇÅ, ToIterC b t‚ÇÇ) => (a -> b -> c) -> t‚ÇÅ -> t‚ÇÇ -> ùêºC c
zipC :: (ToIterC a t‚ÇÅ, ToIterC b t‚ÇÇ) => t‚ÇÅ -> t‚ÇÇ -> ùêºC (a ‚àß b)
prodWithùêºC :: (a -> b -> c) -> ùêºC a -> ùêºC b -> ùêºC c
instance UVMHS.Core.Sized.ToIterAC a (UVMHS.Core.Sized.ùêºAC a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Sized.ùêºAC a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Sized.ùêºAC a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Sized.ùêºAC a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Sized.ùêºAC a)
instance UVMHS.Core.Classes.Collections.ASized a => UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Sized.ùêºAC a)
instance UVMHS.Core.Classes.Collections.ASized (UVMHS.Core.Sized.ùêºAC a)
instance UVMHS.Core.Classes.Collections.CSized (UVMHS.Core.Sized.ùêºAC a)
instance UVMHS.Core.Classes.Collections.ASized UVMHS.Core.Init.ùïä
instance (UVMHS.Core.Classes.Collections.ASized a, UVMHS.Core.Classes.Collections.ASized b) => UVMHS.Core.Classes.Collections.ASized (a UVMHS.Core.Init.‚à® b)
instance (UVMHS.Core.Classes.Collections.ASized a, UVMHS.Core.Classes.Collections.ASized b) => UVMHS.Core.Classes.Collections.ASized (a UVMHS.Core.Init.‚àß b)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Sized.ùêºAC a)
instance UVMHS.Core.Sized.ToIterC a (UVMHS.Core.Sized.ùêºC a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Sized.ùêºC a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Sized.ùêºC a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Sized.ùêºC a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Sized.ùêºC a)
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Sized.ùêºC a)
instance UVMHS.Core.Classes.Collections.CSized (UVMHS.Core.Sized.ùêºC a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Sized.ùêºC
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Sized.ùêºC a)
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Core.Sized.ùêºC
instance UVMHS.Core.Sized.ToIterA a (UVMHS.Core.Sized.ùêºA a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Sized.ùêºA a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Sized.ùêºA a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Sized.ùêºA a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Sized.ùêºA a)
instance UVMHS.Core.Classes.Collections.ASized a => UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Sized.ùêºA a)
instance UVMHS.Core.Classes.Collections.ASized (UVMHS.Core.Sized.ùêºA a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Sized.ùêºA a)
instance UVMHS.Core.Classes.Collections.CSized UVMHS.Core.Init.ùïä

module UVMHS.Core.Vector
newtype ùïç a
ùïç :: Vector a -> ùïç a
[unùïç] :: ùïç a -> Vector a
newtype ùïçMut a
ùïçMut :: IOVector a -> ùïçMut a
[unùïçMut] :: ùïçMut a -> IOVector a
newtype ùïå a
ùïå :: Vector a -> ùïå a
[unùïå] :: ùïå a -> Vector a
iterùïç :: ùïç a -> ùêº a
showùïç :: Show a => ùïç a -> ùïä
idxùïç :: ‚Ñï64 -> ùïç a -> ùëÇ a
mapùïç :: (a -> b) -> ùïç a -> ùïç b
mapMùïç :: forall m a b. Monad m => (a -> m b) -> ùïç a -> m (ùïç b)
csizeùïç :: ùïç a -> ‚Ñï64
singleùïç :: a -> ùïç a
nullùïç :: ùïç a
appendùïç :: ùïç a -> ùïç a -> ùïç a
vec :: ToIter a t => t -> ùïç a
vecC :: ToIterC a t => t -> ùïç a
vecF :: ‚Ñï64 -> (‚Ñï64 -> a) -> ùïç a
vecDŒ© :: (‚Ñï64 ‚á∞ a) -> ùïç a
idxùïçŒ© :: ‚Ñï64 -> ùïç a -> a
idxùïçŒ©_UNSAFE :: ‚Ñï64 -> ùïç a -> a
nullsùïç :: Null a => ‚Ñï64 -> ùïç a
vecIMut :: ToIter a t => t -> IO (ùïçMut a)
vecVMut :: ùïç a -> IO (ùïçMut a)
idxùïçMut :: ‚Ñï64 -> ùïçMut a -> IO a
setùïçMut :: ‚Ñï64 -> a -> ùïçMut a -> IO ()
eachIùïçMut :: (‚Ñï64 -> a -> IO ()) -> ùïçMut a -> IO ()
eachùïçMut :: (a -> IO ()) -> ùïçMut a -> IO ()
valuesùïçMut :: ùïçMut a -> IO (ùïç a)
growùïçMut :: ‚Ñï64 -> ùïçMut a -> IO (ùïçMut a)
iterùïå :: Storable a => ùïå a -> ùêº a
showùïå :: (Storable a, Show a) => ùïå a -> ùïä
idxùïå :: Storable a => ‚Ñï64 -> ùïå a -> ùëÇ a
csizeùïå :: Storable a => ùïå a -> ‚Ñï64
zipWithùïå :: (Storable a, Storable b, Storable c) => (a -> b -> c) -> ùïå a -> ùïå b -> ùïå c
mapùïå :: (Storable a, Storable b) => (a -> b) -> ùïå a -> ùïå b
uvec :: (Storable a, ToIter a t) => t -> ùïå a
uvecC :: (Storable a, ToIterC a t) => t -> ùïå a
uvecF :: Storable a => ‚Ñï64 -> (‚Ñï64 -> a) -> ùïå a
uvecDŒ© :: Storable a => (‚Ñï64 ‚á∞ a) -> ùïå a
idxùïåŒ© :: Storable a => ‚Ñï64 -> ùïå a -> a
idxùïåŒ©_UNSAFE :: Storable a => ‚Ñï64 -> ùïå a -> a
mapMùïå :: forall m a b. (Monad m, Storable a, Storable b) => (a -> m b) -> ùïå a -> m (ùïå b)
nullùïå :: (Storable a, Null a) => ‚Ñï64 -> ùïå a
zipWithOnùïå :: (Storable a, Storable b, Storable c) => ùïå a -> ùïå b -> (a -> b -> c) -> ùïå c

-- | The member functions of this class facilitate writing values of
--   primitive types to raw memory (which may have been allocated with the
--   above mentioned routines) and reading values from blocks of raw
--   memory. The class, furthermore, includes support for computing the
--   storage requirements and alignment restrictions of storable types.
--   
--   Memory addresses are represented as values of type <tt><a>Ptr</a>
--   a</tt>, for some <tt>a</tt> which is an instance of class
--   <a>Storable</a>. The type argument to <a>Ptr</a> helps provide some
--   valuable type safety in FFI code (you can't mix pointers of different
--   types without an explicit cast), while helping the Haskell type system
--   figure out which marshalling method is needed for a given pointer.
--   
--   All marshalling between Haskell and a foreign language ultimately
--   boils down to translating Haskell data structures into the binary
--   representation of a corresponding data structure of the foreign
--   language and vice versa. To code this marshalling in Haskell, it is
--   necessary to manipulate primitive data types stored in unstructured
--   memory blocks. The class <a>Storable</a> facilitates this manipulation
--   on all types for which it is instantiated, which are the standard
--   basic types of Haskell, the fixed size <tt>Int</tt> types
--   (<a>Int8</a>, <a>Int16</a>, <a>Int32</a>, <a>Int64</a>), the fixed
--   size <tt>Word</tt> types (<a>Word8</a>, <a>Word16</a>, <a>Word32</a>,
--   <a>Word64</a>), <a>StablePtr</a>, all types from
--   <a>Foreign.C.Types</a>, as well as <a>Ptr</a>.
class () => Storable a

-- | Computes the storage requirements (in bytes) of the argument. The
--   value of the argument is not used.
sizeOf :: Storable a => a -> Int

-- | Computes the alignment constraint of the argument. An alignment
--   constraint <tt>x</tt> is fulfilled by any address divisible by
--   <tt>x</tt>. The alignment must be a power of two if this instance is
--   to be used with <tt>alloca</tt> or <tt>allocaArray</tt>. The value of
--   the argument is not used.
alignment :: Storable a => a -> Int

-- | Read a value from a memory area regarded as an array of values of the
--   same kind. The first argument specifies the start address of the array
--   and the second the index into the array (the first element of the
--   array has index <tt>0</tt>). The following equality holds,
--   
--   <pre>
--   peekElemOff addr idx = IOExts.fixIO $ \result -&gt;
--     peek (addr `plusPtr` (idx * sizeOf result))
--   </pre>
--   
--   Note that this is only a specification, not necessarily the concrete
--   implementation of the function.
peekElemOff :: Storable a => Ptr a -> Int -> IO a

-- | Write a value to a memory area regarded as an array of values of the
--   same kind. The following equality holds:
--   
--   <pre>
--   pokeElemOff addr idx x = 
--     poke (addr `plusPtr` (idx * sizeOf x)) x
--   </pre>
pokeElemOff :: Storable a => Ptr a -> Int -> a -> IO ()

-- | Read a value from a memory location given by a base address and
--   offset. The following equality holds:
--   
--   <pre>
--   peekByteOff addr off = peek (addr `plusPtr` off)
--   </pre>
peekByteOff :: Storable a => Ptr b -> Int -> IO a

-- | Write a value to a memory location given by a base address and offset.
--   The following equality holds:
--   
--   <pre>
--   pokeByteOff addr off x = poke (addr `plusPtr` off) x
--   </pre>
pokeByteOff :: Storable a => Ptr b -> Int -> a -> IO ()

-- | Read a value from the given memory location.
--   
--   Note that the peek and poke functions might require properly aligned
--   addresses to function correctly. This is architecture dependent; thus,
--   portable code should ensure that when peeking or poking values of some
--   type <tt>a</tt>, the alignment constraint for <tt>a</tt>, as given by
--   the function <a>alignment</a> is fulfilled.
peek :: Storable a => Ptr a -> IO a

-- | Write the given value to the given memory location. Alignment
--   restrictions might apply; see <a>peek</a>.
poke :: Storable a => Ptr a -> a -> IO ()
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Vector.ùïç a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Vector.ùïç a)
instance (Foreign.Storable.Storable a, GHC.Classes.Ord a) => GHC.Classes.Ord (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, GHC.Classes.Eq a) => GHC.Classes.Eq (UVMHS.Core.Vector.ùïå a)
instance Foreign.Storable.Storable a => UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, GHC.Show.Show a) => GHC.Show.Show (UVMHS.Core.Vector.ùïå a)
instance Foreign.Storable.Storable a => UVMHS.Core.Classes.Collections.Lookup UVMHS.Core.Init.‚Ñï64 a (UVMHS.Core.Vector.ùïå a)
instance Foreign.Storable.Storable a => UVMHS.Core.Classes.Collections.CSized (UVMHS.Core.Vector.ùïå a)
instance Foreign.Storable.Storable a => UVMHS.Core.Sized.ToIterC a (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, UVMHS.Core.Classes.Lattice.Join a) => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, UVMHS.Core.Classes.Arithmetic.Plus a) => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, UVMHS.Core.Classes.Arithmetic.Minus a) => UVMHS.Core.Classes.Arithmetic.Minus (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, UVMHS.Core.Classes.Arithmetic.Times a) => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, UVMHS.Core.Classes.Arithmetic.Divide a) => UVMHS.Core.Classes.Arithmetic.Divide (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, UVMHS.Core.Classes.Arithmetic.DivMod a) => UVMHS.Core.Classes.Arithmetic.DivMod (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, UVMHS.Core.Classes.Arithmetic.Pow a) => UVMHS.Core.Classes.Arithmetic.Pow (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, UVMHS.Core.Classes.Arithmetic.Pon a) => UVMHS.Core.Classes.Arithmetic.Pon (UVMHS.Core.Vector.ùïå a)
instance (Foreign.Storable.Storable a, UVMHS.Core.Classes.Arithmetic.Root a) => UVMHS.Core.Classes.Arithmetic.Root (UVMHS.Core.Vector.ùïå a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Vector.ùïç a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Collections.Lookup UVMHS.Core.Init.‚Ñï64 a (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.Vector.ùïç
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Core.Vector.ùïç
instance UVMHS.Core.Classes.Collections.CSized (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Sized.ToIterC a (UVMHS.Core.Vector.ùïç a)

module UVMHS.Core.VectorSparse
data ùëâ a
ùëâ :: IntMap a -> ùëâ a
[unùëâ] :: ùëâ a -> IntMap a
lookupùëâ :: ùëâ a -> ‚Ñ§64 -> ùëÇ a
singleùëâ :: (‚Ñ§64 ‚àß a) -> ùëâ a
subDictByùëâ :: (a -> a -> ùîπ) -> ùëâ a -> ùëâ a -> ùîπ
w√∏ :: ùëâ a
unionWithùëâ :: (a -> a -> a) -> ùëâ a -> ùëâ a -> ùëâ a
(‚Ü¶‚ôÆ) :: ‚Ñ§64 -> a -> ùëâ a
(‚ãµ‚ôÆ) :: ‚Ñ§64 -> ùëâ a -> ùîπ
(‚©å‚ôÆ) :: ùëâ a -> ùëâ a -> ùëâ a
(‚©ç‚ôÆ) :: ùëâ a -> ùëâ a -> ùëâ a
deleteùëâ :: ‚Ñ§64 -> ùëâ a -> ùëâ a
sizeùëâ :: ùëâ a -> ‚Ñï
(‚äé‚ôÆ) :: Additive a => ùëâ a -> ùëâ a -> ùëâ a
unionsWithùëâ :: ToIter (ùëâ a) t => (a -> a -> a) -> t -> ùëâ a
interWithùëâ :: (a -> b -> c) -> ùëâ a -> ùëâ b -> ùëâ c
minViewùëâ :: ùëâ a -> ùëÇ ((‚Ñ§64 ‚àß a) ‚àß ùëâ a)
maxViewùëâ :: ùëâ a -> ùëÇ ((‚Ñ§64 ‚àß a) ‚àß ùëâ a)
minKeyùëâ :: ùëâ a -> ùëÇ ‚Ñ§64
maxKeyùëâ :: ùëâ a -> ùëÇ ‚Ñ§64
viewùëâ :: ‚Ñ§64 -> ùëâ a -> ùëÇ (a ‚àß ùëâ a)
withoutùëâ :: ùëÉ ‚Ñ§64 -> ùëâ a -> ùëâ a
restrictùëâ :: ùëÉ ‚Ñ§64 -> ùëâ a -> ùëâ a
keysùëâ :: ùëâ a -> ùêº ‚Ñ§64
valuesùëâ :: ùëâ a -> ùêº a
mapùëâ :: (a -> b) -> ùëâ a -> ùëâ b
mapKùëâ :: (‚Ñ§64 -> a -> b) -> ùëâ a -> ùëâ b
iterùëâ :: ùëâ a -> ùêº (‚Ñ§64 ‚àß a)
spvecùêº :: ùêº (‚Ñ§64 ‚àß a) -> ùëâ a
spvec :: ToIter (ùëâ a) t => t -> ùëâ a
assocùëâ :: ToIter (‚Ñ§64 ‚àß a) t => t -> ùëâ a
joinùëâ :: (Ord a, Ord b) => ùëâ (ùëÉ a) -> ùëâ (ùëÉ b) -> ùëâ (ùëÉ (a ‚àß b))
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.VectorSparse.ùëâ a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Collections.Lookup UVMHS.Core.Init.‚Ñ§64 a (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Collections.Single (UVMHS.Core.Init.‚Ñ§64 UVMHS.Core.Init.‚àß a) (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Lattice.POrd a => UVMHS.Core.Classes.Lattice.POrd (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Unit (UVMHS.Core.VectorSparse.ùëâ a)
instance (UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Cross a) => UVMHS.Core.Classes.Monoid.Cross (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Monoid.Prodoid a => UVMHS.Core.Classes.Monoid.Prodoid (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Arithmetic.Plus a => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Arithmetic.Plus a => UVMHS.Core.Classes.Arithmetic.Additive (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Arithmetic.Zero a => UVMHS.Core.Classes.Arithmetic.One (UVMHS.Core.VectorSparse.ùëâ a)
instance (UVMHS.Core.Classes.Arithmetic.Plus a, UVMHS.Core.Classes.Arithmetic.Times a) => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Arithmetic.Multiplicative a => UVMHS.Core.Classes.Arithmetic.Multiplicative (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.VectorSparse.ùëâ a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Core.VectorSparse.ùëâ
instance UVMHS.Core.Classes.Collections.ToIter (UVMHS.Core.Init.‚Ñ§64 UVMHS.Core.Init.‚àß a) (UVMHS.Core.VectorSparse.ùëâ a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.VectorSparse.ùëâ a)

module UVMHS.Core.VectorStatic
newtype ùïçSV n a
ùïçSV :: (ùïÄ64 n -> a) -> ùïçSV n a
[unùïçSV] :: ùïçSV n a -> ùïÄ64 n -> a
newtype ùïçS n a
ùïçS_UNSAFE :: Vector a -> ùïçS n a
[unùïçS] :: ùïçS n a -> Vector a
newtype ùïåS n a
ùïåS_UNSAFE :: Vector a -> ùïåS n a
[unùïåS] :: ùïåS n a -> Vector a
data ùïÑS (ns :: [ùêç]) a
[NilùïÑS] :: a -> ùïÑS '[] a
[ConsùïÑS] :: ùïçS n (ùïÑS ns a) -> ùïÑS (n ': ns) a
(‚ãÖ) :: (ùí© n, Additive a, Times a) => ùïçS n a -> ùïçS n a -> a
infixl 6 ‚ãÖ
(‚úñ) :: (ùí© m, ùí© n, ùí© o, Additive a, Times a) => ùïçS m (ùïçS o a) -> ùïçS n (ùïçS o a) -> ùïçS m (ùïçS n a)
infixl 6 ‚úñ
iterùïçS :: ùïçS n a -> ùêº a
showùïçS :: Show a => ùïçS n a -> ùïä
idxùïçS :: ùïÄ64 n -> ùïçS n a -> a
idxCheckedùïçS :: ‚Ñï64 -> ùïçS n a -> ùëÇ a
nullùïçS :: (ùí© n, Null a) => ‚Ñï64S n -> ùïçS n a
mapùïçS :: ùí© n => (a -> b) -> ùïçS n a -> ùïçS n b
constùïçS :: ùí© n => ‚Ñï64S n -> a -> ùïçS n a
svecF :: forall n a. ùí© n => ‚Ñï64S n -> (ùïÄ64 n -> a) -> ùïçS n a
svec :: forall n a. ùí© n => ùêºS n a -> ùïçS n a
iterùïçSS :: ùïçS n a -> ùêºS n a
svirt :: ùí© n => ùïçS n a -> ùïçSV n a
svirt2 :: (ùí© m, ùí© n) => ùïçS m (ùïçS n a) -> ùïçSV m (ùïçSV n a)
sconc :: ùí© n => ‚Ñï64S n -> ùïçSV n a -> ùïçS n a
sconc2 :: (ùí© m, ùí© n) => ‚Ñï64S m -> ‚Ñï64S n -> ùïçSV m (ùïçSV n a) -> ùïçS m (ùïçS n a)
ùê≠ :: (ùí© m, ùí© n) => ùïçS m (ùïçS n a) -> ùïçS n (ùïçS m a)
dùïç :: ùïç a -> (forall n. ùí©64 n => ùïçS n a -> b) -> b
iterùïåS :: Storable a => ùïåS n a -> ùêº a
showùïåS :: (Storable a, Show a) => ùïåS n a -> ùïä
idxùïåS :: Storable a => ùïÄ64 n -> ùïåS n a -> a
idxCheckedùïåS :: Storable a => ‚Ñï64 -> ùïåS n a -> ùëÇ a
nullùïåS :: (ùí© n, Storable a, Null a) => ‚Ñï64S n -> ùïåS n a
suvec :: forall n a. (ùí© n, Storable a) => ùêºS n a -> ùïåS n a
suvecF :: forall n a. (ùí© n, Storable a) => ‚Ñï64S n -> (ùïÄ64 n -> a) -> ùïåS n a
iterùïåSS :: Storable a => ùïåS n a -> ùêºS n a
mapùïåS :: (ùí© n, Storable a, Storable b) => (a -> b) -> ùïåS n a -> ùïåS n b
dùïå :: Storable a => ùïå a -> (forall n. ùí©64 n => ùïåS n a -> b) -> b
zeroùïÑS :: (AllC ùí© ns, Zero a) => Spine ns -> ùïÑS ns a
mapUnderùïÑS :: AllC ùí© ns => Spine ns -> (ùïÑS ms‚ÇÅ a -> ùïÑS ms‚ÇÇ b) -> ùïÑS (ns ‚ß∫ ms‚ÇÅ) a -> ùïÑS (ns ‚ß∫ ms‚ÇÇ) b

-- | The member functions of this class facilitate writing values of
--   primitive types to raw memory (which may have been allocated with the
--   above mentioned routines) and reading values from blocks of raw
--   memory. The class, furthermore, includes support for computing the
--   storage requirements and alignment restrictions of storable types.
--   
--   Memory addresses are represented as values of type <tt><a>Ptr</a>
--   a</tt>, for some <tt>a</tt> which is an instance of class
--   <a>Storable</a>. The type argument to <a>Ptr</a> helps provide some
--   valuable type safety in FFI code (you can't mix pointers of different
--   types without an explicit cast), while helping the Haskell type system
--   figure out which marshalling method is needed for a given pointer.
--   
--   All marshalling between Haskell and a foreign language ultimately
--   boils down to translating Haskell data structures into the binary
--   representation of a corresponding data structure of the foreign
--   language and vice versa. To code this marshalling in Haskell, it is
--   necessary to manipulate primitive data types stored in unstructured
--   memory blocks. The class <a>Storable</a> facilitates this manipulation
--   on all types for which it is instantiated, which are the standard
--   basic types of Haskell, the fixed size <tt>Int</tt> types
--   (<a>Int8</a>, <a>Int16</a>, <a>Int32</a>, <a>Int64</a>), the fixed
--   size <tt>Word</tt> types (<a>Word8</a>, <a>Word16</a>, <a>Word32</a>,
--   <a>Word64</a>), <a>StablePtr</a>, all types from
--   <a>Foreign.C.Types</a>, as well as <a>Ptr</a>.
class () => Storable a

-- | Computes the storage requirements (in bytes) of the argument. The
--   value of the argument is not used.
sizeOf :: Storable a => a -> Int

-- | Computes the alignment constraint of the argument. An alignment
--   constraint <tt>x</tt> is fulfilled by any address divisible by
--   <tt>x</tt>. The alignment must be a power of two if this instance is
--   to be used with <tt>alloca</tt> or <tt>allocaArray</tt>. The value of
--   the argument is not used.
alignment :: Storable a => a -> Int

-- | Read a value from a memory area regarded as an array of values of the
--   same kind. The first argument specifies the start address of the array
--   and the second the index into the array (the first element of the
--   array has index <tt>0</tt>). The following equality holds,
--   
--   <pre>
--   peekElemOff addr idx = IOExts.fixIO $ \result -&gt;
--     peek (addr `plusPtr` (idx * sizeOf result))
--   </pre>
--   
--   Note that this is only a specification, not necessarily the concrete
--   implementation of the function.
peekElemOff :: Storable a => Ptr a -> Int -> IO a

-- | Write a value to a memory area regarded as an array of values of the
--   same kind. The following equality holds:
--   
--   <pre>
--   pokeElemOff addr idx x = 
--     poke (addr `plusPtr` (idx * sizeOf x)) x
--   </pre>
pokeElemOff :: Storable a => Ptr a -> Int -> a -> IO ()

-- | Read a value from a memory location given by a base address and
--   offset. The following equality holds:
--   
--   <pre>
--   peekByteOff addr off = peek (addr `plusPtr` off)
--   </pre>
peekByteOff :: Storable a => Ptr b -> Int -> IO a

-- | Write a value to a memory location given by a base address and offset.
--   The following equality holds:
--   
--   <pre>
--   pokeByteOff addr off x = poke (addr `plusPtr` off) x
--   </pre>
pokeByteOff :: Storable a => Ptr b -> Int -> a -> IO ()

-- | Read a value from the given memory location.
--   
--   Note that the peek and poke functions might require properly aligned
--   addresses to function correctly. This is architecture dependent; thus,
--   portable code should ensure that when peeking or poking values of some
--   type <tt>a</tt>, the alignment constraint for <tt>a</tt>, as given by
--   the function <a>alignment</a> is fulfilled.
peek :: Storable a => Ptr a -> IO a

-- | Write the given value to the given memory location. Alignment
--   restrictions might apply; see <a>peek</a>.
poke :: Storable a => Ptr a -> a -> IO ()
instance forall k (n :: k) a. GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.VectorStatic.ùïçS n a)
instance forall k (n :: k) a. GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.VectorStatic.ùïçS n a)
instance forall k (n :: k) a. (Foreign.Storable.Storable a, GHC.Classes.Ord a) => GHC.Classes.Ord (UVMHS.Core.VectorStatic.ùïåS n a)
instance forall k (n :: k) a. (Foreign.Storable.Storable a, GHC.Classes.Eq a) => GHC.Classes.Eq (UVMHS.Core.VectorStatic.ùïåS n a)
instance (UVMHS.Core.Static.HasSpine ns, UVMHS.Core.Static.AllC UVMHS.Core.Static.ùí© ns, UVMHS.Core.Classes.Arithmetic.Zero a) => UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Core.VectorStatic.ùïÑS ns a)
instance (UVMHS.Core.Static.AllC UVMHS.Core.Static.ùí© ns, UVMHS.Core.Classes.Arithmetic.Plus a) => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Core.VectorStatic.ùïÑS ns a)
instance (UVMHS.Core.Static.AllC UVMHS.Core.Static.ùí© ns, UVMHS.Core.Classes.Arithmetic.Times a) => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Core.VectorStatic.ùïÑS ns a)
instance forall k a (n :: k). Foreign.Storable.Storable a => UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.VectorStatic.ùïåS n a)
instance forall k a (n :: k). (Foreign.Storable.Storable a, GHC.Show.Show a) => GHC.Show.Show (UVMHS.Core.VectorStatic.ùïåS n a)
instance Foreign.Storable.Storable a => UVMHS.Core.Classes.Collections.Access (UVMHS.Core.Static.ùïÄ64 n) a (UVMHS.Core.VectorStatic.ùïåS n a)
instance forall k a (n :: k). Foreign.Storable.Storable a => UVMHS.Core.Classes.Collections.Lookup UVMHS.Core.Init.‚Ñï64 a (UVMHS.Core.VectorStatic.ùïåS n a)
instance (UVMHS.Core.Static.ùí© n, Foreign.Storable.Storable a, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.VectorStatic.ùïåS n a)
instance forall k a (n :: k). UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.VectorStatic.ùïçS n a)
instance forall k a (n :: k). GHC.Show.Show a => GHC.Show.Show (UVMHS.Core.VectorStatic.ùïçS n a)
instance UVMHS.Core.Classes.Collections.Access (UVMHS.Core.Static.ùïÄ64 n) a (UVMHS.Core.VectorStatic.ùïçS n a)
instance forall k a (n :: k). UVMHS.Core.Classes.Collections.Lookup UVMHS.Core.Init.‚Ñï64 a (UVMHS.Core.VectorStatic.ùïçS n a)
instance (UVMHS.Core.Static.ùí© n, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.VectorStatic.ùïçS n a)
instance UVMHS.Core.Static.ùí© n => UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.VectorStatic.ùïçS n)
instance (UVMHS.Core.Static.ùí© n, UVMHS.Core.Classes.Arithmetic.Zero a) => UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Core.VectorStatic.ùïçS n a)
instance (UVMHS.Core.Static.ùí© n, UVMHS.Core.Classes.Arithmetic.One a) => UVMHS.Core.Classes.Arithmetic.One (UVMHS.Core.VectorStatic.ùïçS n a)
instance (UVMHS.Core.Static.ùí© n, UVMHS.Core.Classes.Arithmetic.Plus a) => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Core.VectorStatic.ùïçS n a)
instance (UVMHS.Core.Static.ùí© n, UVMHS.Core.Classes.Arithmetic.Times a) => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Core.VectorStatic.ùïçS n a)
instance UVMHS.Core.Classes.Functors.Functor (UVMHS.Core.VectorStatic.ùïçSV n)
instance UVMHS.Core.Classes.Collections.Access (UVMHS.Core.Static.ùïÄ64 n) a (UVMHS.Core.VectorStatic.ùïçSV n a)

module UVMHS.Core

module UVMHS.Lib.GTree

module UVMHS.Lib.Graph
type Graph a = a ‚á∞ ùëÉ a
graphTranspose :: forall a. Ord a => Graph a -> Graph a
kosaraju :: forall a. Ord a => Graph a -> a ‚á∞ a
sccGroups :: forall a. Ord a => (a ‚á∞ ùëÉ a) -> (a ‚á∞ a) ‚àß (a ‚á∞ (ùëÉ a ‚àß ùëÉ a))
sccEachGroupM :: forall a b m. (Ord a, Monad m) => ùêº a -> (a ‚á∞ ùëÉ a) -> (ùîπ -> ùêº a -> m (ùêº b)) -> m (ùêº b)
sccEachGroup :: forall a b. Ord a => ùêº a -> (a ‚á∞ ùëÉ a) -> (ùîπ -> ùêº a -> ùêº b) -> ùêº b

module UVMHS.Lib.Neural

module UVMHS.Lib.Options
option :: ùêø ‚ÑÇ -> ùêø ùïä -> ArgDescr a -> ùïä -> OptDescr a
noArg :: a -> ArgDescr a
reqArg :: (ùïä -> a) -> ùïä -> ArgDescr a
optArg :: (ùëÇ ùïä -> a) -> ùïä -> ArgDescr a
optUsageInfo :: ùïä -> ùêø (OptDescr a) -> ùïä
parseOptions :: ùêø (OptDescr a) -> ùêø ùïä -> (ùêø a ‚àß ùêø ùïä) ‚àß ùêø ùïä

-- | Describes whether an option takes an argument or not, and if so how
--   the argument is injected into a value of type <tt>a</tt>.
data () => ArgDescr a

-- | Each <a>OptDescr</a> describes a single option.
--   
--   The arguments to <a>Option</a> are:
--   
--   <ul>
--   <li>list of short option characters</li>
--   <li>list of long option strings (without "--")</li>
--   <li>argument descriptor</li>
--   <li>explanation of option for user</li>
--   </ul>
data () => OptDescr a

module UVMHS.Lib.Pipeline

-- | A <a>Pipeline</a> is essentially just a list of annotated monadic
--   functions. Its definitions uses a GADT to capture chaining `a ‚Üí m b`
--   with `b ‚Üí m c` as a <a>Pipeline</a> from <tt>a</tt> to <tt>c</tt>, and
--   where <tt>b</tt> ends up existentially quantified in the chain.
--   
--   A <a>Pipeline</a> ùí∏ m i a b` imposes constraint <tt>ùí∏</tt> on all
--   intermediate result types of monadic computations in the list,
--   annotates each function in the list with a value of type <tt>i</tt>,
--   and ultimately consumes a value of type <tt>a</tt> and produces a
--   value of type `m b`.
data Pipeline ùí∏ m i a b
[UnitPipeline] :: Pipeline ùí∏ m i a a
[StepPipeline] :: ùí∏ b => Pipeline ùí∏ m i a b -> i -> (b -> m c) -> Pipeline ùí∏ m i a c
runPipeline :: Monad m => Pipeline ùí∏ m i a b -> a -> m b

module UVMHS.Lib.Pretty.Color
data Color3Bit
DefaultColor :: Color3Bit
Black :: Color3Bit
Red :: Color3Bit
Green :: Color3Bit
Yellow :: Color3Bit
Blue :: Color3Bit
Magenta :: Color3Bit
Cyan :: Color3Bit
GrayLight :: Color3Bit
GrayDark :: Color3Bit
RedLight :: Color3Bit
GreenLight :: Color3Bit
YellowLight :: Color3Bit
BlueLight :: Color3Bit
PinkLight :: Color3Bit
TealLight :: Color3Bit
White :: Color3Bit
data Color
Color :: Color3Bit -> Color
Color8 :: ‚Ñï8 -> Color
Color24 :: ‚Ñï8 -> ‚Ñï8 -> ‚Ñï8 -> Color
defaultColor :: Color
black :: Color
red :: Color
green :: Color
yellow :: Color
blue :: Color
pink :: Color
teal :: Color
grayLight :: Color
grayDark :: Color
redLight :: Color
greenLight :: Color
yellowLight :: Color
blueLight :: Color
pinkLight :: Color
tealLight :: Color
white :: Color
highlight :: Color
altBlack :: Color
altWhite :: Color
altNight :: Color
altNightLight :: Color
altRed :: Color
altRedLight :: Color
altGreen :: Color
altGreenLight :: Color
altOrange :: Color
altOrangeLight :: Color
altBlue :: Color
altBlueLight :: Color
altPurple :: Color
altPurpleLight :: Color
altTeal :: Color
altTealLight :: Color
altGray :: Color
altGrayLight :: Color
allColors :: ùêø (ùïä ‚àß Color)
instance GHC.Show.Show UVMHS.Lib.Pretty.Color.Color3Bit
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Color.Color3Bit
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Color.Color3Bit
instance GHC.Show.Show UVMHS.Lib.Pretty.Color.Color
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Color.Color
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Color.Color

module UVMHS.Lib.Pretty.Annotation
data Format
FG :: Color -> Format
NOFG :: Format
BG :: Color -> Format
NOBG :: Format
UL :: Format
NOUL :: Format
BD :: Format
NOBD :: Format
IT :: Format
NOIT :: Format
data Formats
Formats :: ùëÇ Color -> ùëÇ Color -> ùëÇ ùîπ -> ùëÇ ùîπ -> ùëÇ ùîπ -> Formats
[fgFormats] :: Formats -> ùëÇ Color
[bgFormats] :: Formats -> ùëÇ Color
[ulFormats] :: Formats -> ùëÇ ùîπ
[bdFormats] :: Formats -> ùëÇ ùîπ
[itFormats] :: Formats -> ùëÇ ùîπ
format :: Format -> Formats
formats :: ToIter Format t => t -> Formats
override :: ùêø Format
data Annotation
Annotation :: Formats -> ùëÇ (‚ÑÇ ‚àß Formats) -> Annotation
[annotationFormats] :: Annotation -> Formats
[annotationUndertag] :: Annotation -> ùëÇ (‚ÑÇ ‚àß Formats)
formatAnnotation :: Formats -> Annotation
undertagAnnotation :: ‚ÑÇ -> Formats -> Annotation
instance GHC.Show.Show UVMHS.Lib.Pretty.Annotation.Format
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Annotation.Format
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Annotation.Format
instance GHC.Show.Show UVMHS.Lib.Pretty.Annotation.Formats
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Annotation.Formats
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Annotation.Formats
instance GHC.Show.Show UVMHS.Lib.Pretty.Annotation.Annotation
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Annotation.Annotation
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Annotation.Annotation
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Annotation.Annotation
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Annotation.Annotation
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Annotation.Annotation
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Annotation.Formats
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Annotation.Formats
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Annotation.Formats

module UVMHS.Lib.Pretty.Shape
data ShapeM
ShapeM :: {-# UNPACK #-}‚Ñï64 -> {-# UNPACK #-}‚Ñï64 -> {-# UNPACK #-}‚Ñï64 -> {-# UNPACK #-}‚Ñï64 -> ShapeM
[shapeMFirstLength] :: ShapeM -> {-# UNPACK #-}‚Ñï64
[shapeMMidMaxLength] :: ShapeM -> {-# UNPACK #-}‚Ñï64
[shapeMLastLength] :: ShapeM -> {-# UNPACK #-}‚Ñï64
[shapeMNewlines] :: ShapeM -> {-# UNPACK #-}‚Ñï64
shapeMNewlinesL :: (‚ü¢) ShapeM ‚Ñï64
shapeMLastLengthL :: (‚ü¢) ShapeM ‚Ñï64
shapeMMidMaxLengthL :: (‚ü¢) ShapeM ‚Ñï64
shapeMFirstLengthL :: (‚ü¢) ShapeM ‚Ñï64
data Shape
SingleLine :: {-# UNPACK #-}‚Ñï64 -> Shape
MultiLine :: {-# UNPACK #-}ShapeM -> Shape
multiLineL :: (‚å≤) Shape ShapeM
singleLineL :: (‚å≤) Shape ‚Ñï64
shapeFirstLength :: Shape -> ‚Ñï64
shapeLastLength :: Shape -> ‚Ñï64
newlineShapeM :: ShapeM
newlineShape :: Shape
boxShape :: ‚Ñï64 -> ‚Ñï64 -> Shape
shapeWidth :: Shape -> ‚Ñï64
shapeNewlines :: Shape -> ‚Ñï64
data ShapeA
ShapeA :: ùîπ -> Shape -> ShapeA
[shapeIAligned] :: ShapeA -> ùîπ
[shapeIShape] :: ShapeA -> Shape
shapeIShapeL :: (‚ü¢) ShapeA Shape
shapeIAlignedL :: (‚ü¢) ShapeA ùîπ
alignShapeA :: ShapeA -> ShapeA
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Shape.ShapeA
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Shape.ShapeA
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Shape.ShapeA
instance GHC.Show.Show UVMHS.Lib.Pretty.Shape.ShapeA
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Shape.ShapeA
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Shape.ShapeA
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Shape.Shape
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Shape.Shape
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Shape.Shape
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Lib.Pretty.Shape.Shape
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Lib.Pretty.Shape.Shape
instance GHC.Show.Show UVMHS.Lib.Pretty.Shape.Shape
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Shape.Shape
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Shape.Shape
instance GHC.Show.Show UVMHS.Lib.Pretty.Shape.ShapeM
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Shape.ShapeM
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Shape.ShapeM

module UVMHS.Lib.Rand
class MonadRand m
rng :: MonadRand m => State RG a -> m a
newtype RG
RG :: StdGen -> RG
[unRG] :: RG -> StdGen
wrapPrimRandu :: (StdGen -> (a, StdGen)) -> State RG a
wrapPrimRandr :: ((a, a) -> StdGen -> (a, StdGen)) -> a -> a -> State RG a
class RandUniform a
prandu :: RandUniform a => State RG a
class RandRange a
prandr :: RandRange a => a -> a -> State RG a
prandrRadius :: (RandRange a, Zero a, Minus a) => a -> State RG a
class Fuzzy a
fuzzy :: Fuzzy a => FuzzyM a
data FuzzyEnv
FuzzyEnv :: ‚Ñï64 -> ‚Ñï64 -> FuzzyEnv
[fuzzyEnvRadius] :: FuzzyEnv -> ‚Ñï64
[fuzzyEnvDepth] :: FuzzyEnv -> ‚Ñï64
newtype FuzzyM a
FuzzyM :: RWS FuzzyEnv () RG a -> FuzzyM a
[unRandM] :: FuzzyM a -> RWS FuzzyEnv () RG a
fuzzyEnvDepthL :: (‚ü¢) FuzzyEnv ‚Ñï64
fuzzyEnvRadiusL :: (‚ü¢) FuzzyEnv ‚Ñï64
mkFuzzyM :: (FuzzyEnv -> RG -> RG ‚àß a) -> FuzzyM a
runFuzzyM :: FuzzyEnv -> RG -> FuzzyM a -> RG ‚àß a
runFuzzyMRG :: FuzzyEnv -> FuzzyM a -> State RG a
fuzzyRec :: FuzzyM a -> FuzzyM a
randu :: forall a m. (MonadRand m, RandUniform a) => m a
randr :: forall a m. (MonadRand m, RandRange a) => a -> a -> m a
randrRadius :: forall a m. (MonadRand m, RandRange a, Zero a, Minus a) => a -> m a
rand :: forall a m. (MonadRand m, Fuzzy a) => ‚Ñï64 -> ‚Ñï64 -> m a
wrchoose :: forall t m a. (Monad m, MonadRand m, ToIter (‚Ñï64 ‚àß (() -> m a)) t) => t -> m a
rchoose :: (Monad m, MonadRand m, ToIter (() -> m a) t) => t -> m a
randTny :: forall a m. (MonadRand m, Fuzzy a) => m a
randSml :: forall a m. (MonadRand m, Fuzzy a) => m a
randMed :: forall a m. (MonadRand m, Fuzzy a) => m a
randLrg :: forall a m. (MonadRand m, Fuzzy a) => m a
untilPass :: Monad m => (a -> ùîπ) -> m a -> m a
instance UVMHS.Lib.Rand.MonadRand UVMHS.Lib.Rand.FuzzyM
instance UVMHS.Lib.Rand.RandUniform UVMHS.Core.Init.ùîπ
instance UVMHS.Lib.Rand.RandUniform UVMHS.Core.Init.‚Ñï64
instance UVMHS.Lib.Rand.RandUniform UVMHS.Core.Init.‚Ñï32
instance UVMHS.Lib.Rand.RandUniform UVMHS.Core.Init.‚Ñï16
instance UVMHS.Lib.Rand.RandUniform UVMHS.Core.Init.‚Ñï8
instance UVMHS.Lib.Rand.RandUniform UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Lib.Rand.RandUniform UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Lib.Rand.RandUniform UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Lib.Rand.RandUniform UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Lib.Rand.RandRange UVMHS.Core.Init.‚Ñï64
instance UVMHS.Lib.Rand.RandRange UVMHS.Core.Init.‚Ñï32
instance UVMHS.Lib.Rand.RandRange UVMHS.Core.Init.‚Ñï16
instance UVMHS.Lib.Rand.RandRange UVMHS.Core.Init.‚Ñï8
instance UVMHS.Lib.Rand.RandRange UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Lib.Rand.RandRange UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Lib.Rand.RandRange UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Lib.Rand.RandRange UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Lib.Rand.RandRange UVMHS.Core.Init.ùîª
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Core.Init.‚Ñï64
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Core.Init.‚Ñï32
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Core.Init.‚Ñï16
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Core.Init.‚Ñï8
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Core.Init.ùîª
instance UVMHS.Lib.Rand.Fuzzy ()
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Core.Init.ùîπ
instance UVMHS.Lib.Rand.Fuzzy a => UVMHS.Lib.Rand.Fuzzy (UVMHS.Core.Init.ùëÇ a)
instance (UVMHS.Lib.Rand.Fuzzy a, UVMHS.Lib.Rand.Fuzzy b) => UVMHS.Lib.Rand.Fuzzy (a UVMHS.Core.Init.‚à® b)
instance (UVMHS.Lib.Rand.Fuzzy a, UVMHS.Lib.Rand.Fuzzy b) => UVMHS.Lib.Rand.Fuzzy (a UVMHS.Core.Init.‚àß b)
instance UVMHS.Lib.Rand.Fuzzy a => UVMHS.Lib.Rand.Fuzzy (UVMHS.Core.Init.ùêø a)
instance (GHC.Classes.Ord k, UVMHS.Lib.Rand.Fuzzy k, UVMHS.Lib.Rand.Fuzzy v) => UVMHS.Lib.Rand.Fuzzy (k UVMHS.Core.Init.‚á∞ v)
instance UVMHS.Lib.Rand.Fuzzy a => UVMHS.Lib.Rand.Fuzzy (() -> a)
instance UVMHS.Core.Effects.MonadState UVMHS.Lib.Rand.RG UVMHS.Lib.Rand.FuzzyM
instance UVMHS.Core.Effects.MonadReader UVMHS.Lib.Rand.FuzzyEnv UVMHS.Lib.Rand.FuzzyM
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Lib.Rand.FuzzyM
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Lib.Rand.FuzzyM
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Lib.Rand.FuzzyM
instance UVMHS.Core.Classes.Functors.Return UVMHS.Lib.Rand.FuzzyM
instance UVMHS.Lib.Rand.MonadRand GHC.Types.IO

module UVMHS.Lib.Sep
data Sep i a
SepE :: a -> Sep i a
SepN :: a -> i -> ùêºC (a ‚àß i) -> a -> Sep i a
sepI :: Null a => i -> Sep i a
mapSep :: (i -> j) -> (a -> b) -> Sep i a -> Sep j b
mapSepI :: (i -> j) -> Sep i a -> Sep j a
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Sep.Sep i a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Sep.Sep i a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Sep.Sep i a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Lib.Sep.Sep a a)
instance UVMHS.Core.Classes.Functors.Functor (UVMHS.Lib.Sep.Sep i)
instance UVMHS.Core.Classes.Collections.CSized (UVMHS.Lib.Sep.Sep i a)

module UVMHS.Lib.TreeAnnote
class Annote i a | a -> i
annote :: Annote i a => i -> a -> a
data ùëá i a
Nùëá :: ùëá i a
Bùëá :: ùëá i a -> ùëá i a -> ùëá i a
Lùëá :: a -> ùëá i a
Aùëá :: i -> ùëá i a -> ùëá i a
foldùëáWith :: Monoid b => (a -> b) -> (i -> b -> b) -> ùëá i a -> b
foldùëáOn :: Monoid b => ùëá i a -> (a -> b) -> (i -> b -> b) -> b
data ùëáV i a
ùëáV :: (forall b. Monoid b => (a -> b) -> (i -> b -> b) -> b) -> ùëáV i a
[unùëáV] :: ùëáV i a -> forall b. Monoid b => (a -> b) -> (i -> b -> b) -> b
foldùëáVOn :: Monoid b => ùëáV i a -> (a -> b) -> (i -> b -> b) -> b
foldùëáVWith :: Monoid b => (a -> b) -> (i -> b -> b) -> ùëáV i a -> b
nullùëáV :: ùëáV i a
appendùëáV :: ùëáV i a -> ùëáV i a -> ùëáV i a
singleùëáV :: a -> ùëáV i a
annoteùëáV :: i -> ùëáV i a -> ùëáV i a
mapùëáV :: (i -> j) -> (a -> b) -> ùëáV i a -> ùëáV j b
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.TreeAnnote.ùëáV i a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.TreeAnnote.ùëáV i a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.TreeAnnote.ùëáV i a)
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Lib.TreeAnnote.ùëáV i a)
instance UVMHS.Lib.TreeAnnote.Annote i (UVMHS.Lib.TreeAnnote.ùëáV i a)
instance UVMHS.Core.Classes.Functors.Functor (UVMHS.Lib.TreeAnnote.ùëáV i)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.TreeAnnote.ùëá i a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.TreeAnnote.ùëá i a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.TreeAnnote.ùëá i a)
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Lib.TreeAnnote.ùëá i a)
instance UVMHS.Lib.TreeAnnote.Annote i (UVMHS.Lib.TreeAnnote.ùëá i a)
instance UVMHS.Core.Classes.Functors.Functor (UVMHS.Lib.TreeAnnote.ùëá i)

module UVMHS.Lib.Pretty.Common
data ChunkI
RawChunkI :: ‚Ñï64 -> ùïä -> ChunkI
NewlineChunkI :: ‚Ñï64 -> ChunkI
rawChunksI :: ùïä -> ChunkI
splitChunksI :: ùïä -> ùêº ChunkI
shapeIChunk :: ChunkI -> Shape
extendNewlinesIChunk :: ‚Ñï64 -> ChunkI -> ChunkI
data ChunkO
RawChunkO :: ‚Ñï64 -> ùïä -> ChunkO
PaddingChunkO :: ‚Ñï64 -> ChunkO
shapeOChunk :: ChunkO -> Shape
type TreeI = ùëáV Annotation (ùêº ChunkI)
type TreeO = ùëáV Formats (Sep () (ùêºA ChunkO))
chunkIO :: ChunkO -> ChunkI
treeIO :: TreeO -> TreeI
data SummaryI
SummaryI :: ùîπ -> ShapeA -> TreeI -> SummaryI
[summaryIForceBreak] :: SummaryI -> ùîπ
[summaryIShape] :: SummaryI -> ShapeA
[summaryIContents] :: SummaryI -> TreeI
summaryIContentsL :: (‚ü¢) SummaryI TreeI
summaryIShapeL :: (‚ü¢) SummaryI ShapeA
summaryIForceBreakL :: (‚ü¢) SummaryI ùîπ
alignSummary :: SummaryI -> SummaryI
summaryChunksI :: ùêº ChunkI -> SummaryI
annotateSummaryI :: Annotation -> SummaryI -> SummaryI
data SummaryO
SummaryO :: Shape -> TreeO -> SummaryO
[summaryOShape] :: SummaryO -> Shape
[summaryOContents] :: SummaryO -> TreeO
summaryOContentsL :: (‚ü¢) SummaryO TreeO
summaryOShapeL :: (‚ü¢) SummaryO Shape
summaryChunksO :: Sep () (ùêºA ChunkO) -> SummaryO
annotateSummaryO :: Formats -> SummaryO -> SummaryO
data HAlign
LH :: HAlign
CH :: HAlign
RH :: HAlign
data VAlign
TV :: VAlign
CV :: VAlign
BV :: VAlign
hvalign :: HAlign -> VAlign -> ‚Ñï64 -> ‚Ñï64 -> SummaryO -> SummaryO
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Common.SummaryO
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Common.SummaryO
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Common.SummaryO
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Common.SummaryI
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Common.SummaryI
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Common.SummaryI
instance GHC.Show.Show UVMHS.Lib.Pretty.Common.ChunkI
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Common.ChunkI
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Common.ChunkI
instance GHC.Show.Show UVMHS.Lib.Pretty.Common.ChunkO
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Common.ChunkO
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Common.ChunkO
instance UVMHS.Core.Classes.Collections.ASized UVMHS.Lib.Pretty.Common.ChunkO

module UVMHS.Lib.Pretty.RenderUndertags
data RenderUTEnv
RenderUTEnv :: ùëÇ (‚ÑÇ ‚àß Formats) -> RenderUTEnv
[renderUTEnvUnderFormat] :: RenderUTEnv -> ùëÇ (‚ÑÇ ‚àß Formats)
renderUTEnvUnderFormatL :: (‚ü¢) RenderUTEnv (ùëÇ ((‚àß) ‚ÑÇ Formats))
renderUTEnv‚ÇÄ :: RenderUTEnv
data RenderUTState
RenderUTState :: ‚Ñï64 -> ùêº (((‚Ñï64 ‚àß ‚Ñï64) ‚àß ‚ÑÇ) ‚àß Formats) -> RenderUTState
[t2StateCol] :: RenderUTState -> ‚Ñï64
[t2StateUnders] :: RenderUTState -> ùêº (((‚Ñï64 ‚àß ‚Ñï64) ‚àß ‚ÑÇ) ‚àß Formats)
t2StateUndersL :: (‚ü¢) RenderUTState (ùêº ((‚àß) ((‚àß) ((‚àß) ‚Ñï64 ‚Ñï64) ‚ÑÇ) Formats))
t2StateColL :: (‚ü¢) RenderUTState ‚Ñï64
t2State‚ÇÄ :: RenderUTState
type RenderUTM = RWS RenderUTEnv SummaryO RenderUTState
newtype RenderUT
RenderUT :: RenderUTM () -> RenderUT
[unRenderUT] :: RenderUT -> RenderUTM ()
onRenderUT :: (RenderUTM () -> RenderUTM ()) -> RenderUT -> RenderUT
onRenderUT2 :: (RenderUTM () -> RenderUTM () -> RenderUTM ()) -> RenderUT -> RenderUT -> RenderUT
buildUndertags :: ‚Ñï64 -> RenderUTM ()
renderNewline :: ‚Ñï64 -> RenderUTM ()
renderRaw :: ‚Ñï64 -> ùïä -> RenderUTM ()
renderPadding :: ‚Ñï64 -> RenderUTM ()
renderUndertags :: RenderUTM ()
renderChunkUndertags :: ChunkI -> RenderUTM ()
annotateRenderUT :: Annotation -> RenderUTM () -> RenderUTM ()
compileRenderUT :: TreeI -> RenderUT
execRenderUT :: TreeI -> SummaryO
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.RenderUndertags.RenderUT
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.RenderUndertags.RenderUT
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.RenderUndertags.RenderUT

module UVMHS.Lib.Pretty.DocA
data DocAEnv
DocAEnv :: ùëÇ ‚Ñï64 -> ùëÇ ‚Ñï64 -> ‚Ñï64 -> DocAEnv
[docAEnvMaxLineWidth] :: DocAEnv -> ùëÇ ‚Ñï64
[docAEnvMaxRibbonWidth] :: DocAEnv -> ùëÇ ‚Ñï64
[docAEnvNest] :: DocAEnv -> ‚Ñï64
docAEnvNestL :: (‚ü¢) DocAEnv ‚Ñï64
docAEnvMaxRibbonWidthL :: (‚ü¢) DocAEnv (ùëÇ ‚Ñï64)
docAEnvMaxLineWidthL :: (‚ü¢) DocAEnv (ùëÇ ‚Ñï64)
docAEnv‚ÇÄ :: DocAEnv
data DocAState
DocAState :: ‚Ñï64 -> ‚Ñï64 -> ‚Ñï64 -> DocAState
[docAStateRib] :: DocAState -> ‚Ñï64
[docAStateRow] :: DocAState -> ‚Ñï64
[docAStateCol] :: DocAState -> ‚Ñï64
docAStateColL :: (‚ü¢) DocAState ‚Ñï64
docAStateRowL :: (‚ü¢) DocAState ‚Ñï64
docAStateRibL :: (‚ü¢) DocAState ‚Ñï64
docAState‚ÇÄ :: DocAState
type DocAM = RWS DocAEnv TreeI DocAState
data DocA
StaticDocA :: SummaryI -> DocA
DynamicDocA :: SummaryI -> DocAM () -> DocA
dynamicDocAL :: (‚å≤) DocA ((‚àß) SummaryI (DocAM ()))
staticDocAL :: (‚å≤) DocA SummaryI
staticDocA :: DocA -> SummaryI
dynamicDocA :: DocA -> DocAM ()
renderSummaryI :: SummaryI -> DocAM ()
stringDocA :: ùïä -> DocA
docAModal :: DocA -> DocA -> DocA
annotateDocA :: Annotation -> DocA -> DocA
groupDocAM :: SummaryI -> DocAM () -> DocAM ()
groupDocA :: DocA -> DocA
alignDocAM :: DocAM a -> DocAM a
alignDocA :: DocA -> DocA
execDocAWith :: (DocAM () -> DocAM ()) -> DocA -> TreeI
execDocA :: DocA -> TreeI
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.DocA.DocA
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.DocA.DocA
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.DocA.DocA
instance GHC.Show.Show UVMHS.Lib.Pretty.DocA.DocAState
instance GHC.Classes.Ord UVMHS.Lib.Pretty.DocA.DocAState
instance GHC.Classes.Eq UVMHS.Lib.Pretty.DocA.DocAState
instance GHC.Show.Show UVMHS.Lib.Pretty.DocA.DocAEnv
instance GHC.Classes.Ord UVMHS.Lib.Pretty.DocA.DocAEnv
instance GHC.Classes.Eq UVMHS.Lib.Pretty.DocA.DocAEnv

module UVMHS.Lib.Pretty.Doc
data PrettyParams
PrettyParams :: Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> Formats -> ‚Ñï64 -> PrettyParams
[punctuationFormat] :: PrettyParams -> Formats
[keywordFormat] :: PrettyParams -> Formats
[constructorFormat] :: PrettyParams -> Formats
[operatorFormat] :: PrettyParams -> Formats
[primitiveFormat] :: PrettyParams -> Formats
[binderFormat] :: PrettyParams -> Formats
[literalFormat] :: PrettyParams -> Formats
[highlightFormat] :: PrettyParams -> Formats
[headerFormat] :: PrettyParams -> Formats
[commentFormat] :: PrettyParams -> Formats
[errorFormat] :: PrettyParams -> Formats
[lineNumberFormat] :: PrettyParams -> Formats
[annotationFormat] :: PrettyParams -> Formats
[appLevel] :: PrettyParams -> ‚Ñï64
appLevelL :: (‚ü¢) PrettyParams ‚Ñï64
annotationFormatL :: (‚ü¢) PrettyParams Formats
lineNumberFormatL :: (‚ü¢) PrettyParams Formats
errorFormatL :: (‚ü¢) PrettyParams Formats
commentFormatL :: (‚ü¢) PrettyParams Formats
headerFormatL :: (‚ü¢) PrettyParams Formats
highlightFormatL :: (‚ü¢) PrettyParams Formats
literalFormatL :: (‚ü¢) PrettyParams Formats
binderFormatL :: (‚ü¢) PrettyParams Formats
primitiveFormatL :: (‚ü¢) PrettyParams Formats
operatorFormatL :: (‚ü¢) PrettyParams Formats
constructorFormatL :: (‚ü¢) PrettyParams Formats
keywordFormatL :: (‚ü¢) PrettyParams Formats
punctuationFormatL :: (‚ü¢) PrettyParams Formats
prettyParams‚ÇÄ :: PrettyParams
data DocEnv
DocEnv :: PrettyParams -> ‚Ñï64 -> ùîπ -> DocEnv
[docEnvPrettyParams] :: DocEnv -> PrettyParams
[docEnvPrecLevel] :: DocEnv -> ‚Ñï64
[docEnvPrecBumped] :: DocEnv -> ùîπ
docEnvPrecBumpedL :: (‚ü¢) DocEnv ùîπ
docEnvPrecLevelL :: (‚ü¢) DocEnv ‚Ñï64
docEnvPrettyParamsL :: (‚ü¢) DocEnv PrettyParams
docEnv‚ÇÄ :: DocEnv
type DocM = RWS DocEnv DocA ()
newtype Doc
Doc :: DocM () -> Doc
[unDoc] :: Doc -> DocM ()
execDocWith :: (DocM () -> DocM ()) -> Doc -> DocA
execDoc :: Doc -> DocA
onDoc :: (DocM () -> DocM ()) -> Doc -> Doc
onDoc2 :: (DocM () -> DocM () -> DocM ()) -> Doc -> Doc -> Doc
docShape :: Doc -> ShapeA
ppForceBreak :: Doc
ppWithForcedBreak :: Doc -> Doc
ppAnnotate :: Annotation -> Doc -> Doc
ppFormat :: Formats -> Doc -> Doc
ppFormatParam :: (PrettyParams ‚ü¢ Formats) -> Doc -> Doc
ppUndertag :: ‚ÑÇ -> Formats -> Doc -> Doc
ppGroup :: Doc -> Doc
ppAlign :: Doc -> Doc
ppGA :: Doc -> Doc
ppString :: ùïä -> Doc
ppStringModal :: ùïä -> ùïä -> Doc
ppModal :: Doc -> Doc -> Doc
ppFG :: Color -> Doc -> Doc
ppBG :: Color -> Doc -> Doc
ppUL :: Doc -> Doc
ppBD :: Doc -> Doc
ppIT :: Doc -> Doc
ppUT :: ‚ÑÇ -> Color -> Doc -> Doc
ppPunFmt :: Doc -> Doc
ppPun :: ùïä -> Doc
ppKeyFmt :: Doc -> Doc
ppKey :: ùïä -> Doc
ppConFmt :: Doc -> Doc
ppCon :: ùïä -> Doc
ppOpFmt :: Doc -> Doc
ppOp :: ùïä -> Doc
ppPrimFmt :: Doc -> Doc
ppPrim :: ùïä -> Doc
ppBdrFmt :: Doc -> Doc
ppBdr :: ùïä -> Doc
ppLitFmt :: Doc -> Doc
ppLit :: ùïä -> Doc
ppHlFmt :: Doc -> Doc
ppHl :: ùïä -> Doc
ppHeaderFmt :: Doc -> Doc
ppHeader :: ùïä -> Doc
ppCommentFmt :: Doc -> Doc
ppComment :: ùïä -> Doc
ppErrFmt :: Doc -> Doc
ppErr :: ùïä -> Doc
ppLineNumFmt :: Doc -> Doc
ppLineNum :: ùïä -> Doc
ppAnnotation :: Doc -> Doc
ppCxt :: ùïä -> Doc -> Doc
ppSpace :: ‚Ñï64 -> Doc
ppNewline :: Doc
ppIndented :: Doc -> Doc
ppSpaceIfBreak :: Doc
ppSpaceIfNoBreak :: Doc
ppNewlineIfBreak :: Doc
ppSpaceNewlineIfBreak :: Doc
ppHangIfBreak :: Doc -> Doc
ppHorizontal :: ToIter Doc t => t -> Doc
ppVertical :: ToIter Doc t => t -> Doc
ppSeparated :: ToIter Doc t => t -> Doc
ppSetLevel :: ‚Ñï64 -> Doc -> Doc
ppSetBotLevel :: Doc -> Doc
ppBump :: Doc -> Doc
ppClosed :: Doc -> Doc -> Doc -> Doc
ppParens :: Doc -> Doc
ppLevel :: ‚Ñï64 -> Doc -> Doc
ppInfLevel :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInflLevel :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInfrLevel :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppPreLevel :: ‚Ñï64 -> Doc -> Doc -> Doc
ppPostLevel :: ‚Ñï64 -> Doc -> Doc -> Doc
ppInf :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInfl :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInfr :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppPre :: ‚Ñï64 -> Doc -> Doc -> Doc
ppPost :: ‚Ñï64 -> Doc -> Doc -> Doc
ppInfSep :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInflSep :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInfrSep :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppPreSep :: ‚Ñï64 -> Doc -> Doc -> Doc
ppPostSep :: ‚Ñï64 -> Doc -> Doc -> Doc
ppInf' :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInfl' :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInfr' :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInfSep' :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInflSep' :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppInfrSep' :: ‚Ñï64 -> Doc -> Doc -> Doc -> Doc
ppApp :: ToIter Doc t => Doc -> t -> Doc
ppCollection :: ToIter Doc t => Doc -> Doc -> Doc -> t -> Doc
ppRecord :: ToIter (Doc ‚àß Doc) t => Doc -> t -> Doc
ppBake :: Doc -> TreeI
ppEmbed :: TreeI -> Doc
matrixHelper :: (ùí© m, ùí© n) => ùïçS n HAlign -> ùïçS m VAlign -> ùïçS m (ùïçS n SummaryO) -> ùïçS n ‚Ñï64 ‚àß ùïçS m (ùïçS n SummaryO)
ppMatrix :: (ùí© m, ùí© n) => ùïçS n HAlign -> ùïçS m VAlign -> ùïçS m (ùïçS n Doc) -> Doc
ppMatrixCells :: (ùí© m, ùí© n) => ùïçS n HAlign -> ùïçS m VAlign -> ùïçS m (ùïçS n Doc) -> Doc
class Pretty a
pretty :: Pretty a => a -> Doc
class PrettyM m a | a -> m
mpretty :: PrettyM m a => a -> m Doc
escape :: ‚ÑÇ -> ùêº ‚ÑÇ
colorsDemo :: Doc
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Pretty.Doc.Doc
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.Void
instance UVMHS.Lib.Pretty.Doc.Pretty ()
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîπ
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï64
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï32
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï16
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï8
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§64
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§32
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§16
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§8
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñö
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñö·¥æ
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîª
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîª·¥æ
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñù
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñù·¥æ
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Time.Time
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Time.TimeD
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚ÑÇ
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùïä
instance (UVMHS.Lib.Pretty.Doc.Pretty a, UVMHS.Lib.Pretty.Doc.Pretty b) => UVMHS.Lib.Pretty.Doc.Pretty (a, b)
instance (UVMHS.Lib.Pretty.Doc.Pretty a, UVMHS.Lib.Pretty.Doc.Pretty b) => UVMHS.Lib.Pretty.Doc.Pretty (a UVMHS.Core.Init.‚àß b)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (() -> a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùêø a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty [a]
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùêº a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Sized.ùêºC a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÑ a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÉ a)
instance (UVMHS.Lib.Pretty.Doc.Pretty k, UVMHS.Lib.Pretty.Doc.Pretty v) => UVMHS.Lib.Pretty.Doc.Pretty (k UVMHS.Core.Init.‚á∞ v)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Vector.ùïç a)
instance forall k a (n :: k). UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.VectorStatic.ùïçS n a)
instance (Foreign.Storable.Storable a, UVMHS.Lib.Pretty.Doc.Pretty a) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Vector.ùïå a)
instance forall k a (n :: k). (Foreign.Storable.Storable a, UVMHS.Lib.Pretty.Doc.Pretty a) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.VectorStatic.ùïåS n a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Pointed.ZOM a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Lib.Pretty.Doc.Pretty GHC.Stack.Types.CallStack
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Doc.Doc
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Doc.Doc
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Doc.Doc
instance GHC.Show.Show UVMHS.Lib.Pretty.Doc.DocEnv
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Doc.DocEnv
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Doc.DocEnv
instance GHC.Show.Show UVMHS.Lib.Pretty.Doc.PrettyParams
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Doc.PrettyParams
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Doc.PrettyParams

module UVMHS.Lib.Pretty.RenderANSI
data ANSIEnv
ANSIEnv :: ùîπ -> Formats -> ANSIEnv
[ansiEnvDoFormat] :: ANSIEnv -> ùîπ
[ansiEnvFormats] :: ANSIEnv -> Formats
ansiEnvFormatsL :: (‚ü¢) ANSIEnv Formats
ansiEnvDoFormatL :: (‚ü¢) ANSIEnv ùîπ
ansiEnv‚ÇÄ :: ANSIEnv
type RenderANSIM = RWS ANSIEnv (ùêºA ùïä) ()
sgrLeader :: ùïä
sgrCloser :: ùïä
sgrReset :: ùïä
sgrFg :: Color -> ùïä
sgrBg :: Color -> ùïä
sgrUl :: ùîπ -> ùïä
sgrBd :: ùîπ -> ùïä
sgrIt :: ùîπ -> ùïä
sgrFormat :: Formats -> ùêºA ùïä
tellSgrFormat :: RenderANSIM ()
localFormat :: Formats -> RenderANSIM () -> RenderANSIM ()
renderChunkANSI :: ChunkO -> ùêºA ùïä
formatRenderANSI :: Formats -> RenderANSIM () -> RenderANSIM ()
compileOTree :: TreeO -> RenderANSIM ()
execRenderANSIWith :: (RenderANSIM () -> RenderANSIM ()) -> TreeO -> ùêºA ùïä
execRenderANSI :: TreeO -> ùêºA ùïä
gv_PPRINT_COLOR :: IORef ùîπ
ppRenderWith :: (RenderANSIM () -> RenderANSIM ()) -> (DocAM () -> DocAM ()) -> (DocM () -> DocM ()) -> Doc -> ùïä
ppRender :: Doc -> ùïä
ppRenderNoFmt :: Doc -> ùïä
ppRenderYesFmt :: Doc -> ùïä
ppRenderWide :: Doc -> ùïä
ppRenderNarrow :: Doc -> ùïä
ppRenderNoFmtWide :: Doc -> ùïä
ppRenderNoFmtNarrow :: Doc -> ùïä
ppshow :: Pretty a => a -> ùïä
pprint :: Pretty a => a -> IO ()
ppColorOn :: IO ()
ppColorOff :: IO ()
pptrace :: Pretty a => a -> ()
pptraceM :: (Monad m, Pretty a) => a -> m ()
ppabort :: Pretty a => a -> IO b
debugShape :: Doc -> IO ()
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Doc.Doc
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Doc.Doc
instance GHC.Show.Show UVMHS.Lib.Pretty.RenderANSI.ANSIEnv
instance GHC.Classes.Ord UVMHS.Lib.Pretty.RenderANSI.ANSIEnv
instance GHC.Classes.Eq UVMHS.Lib.Pretty.RenderANSI.ANSIEnv

module UVMHS.Lib.Pretty.Deriving
makePrettySumLogic :: Cxt -> Name -> ùêø (TyVarBndr ()) -> ùêø (Name ‚àß ùêø Type) -> Q (ùêø Dec)
makePrettySum :: Name -> Q [Dec]
makePrettyUnionLogic :: Cxt -> Name -> ùêø (TyVarBndr ()) -> ùêø (Name ‚àß ùêø Type) -> Q (ùêø Dec)
makePrettyUnion :: Name -> Q [Dec]
makePrettyRecordLogic :: Cxt -> Name -> ùêø (TyVarBndr ()) -> Name -> ùêø (Name ‚àß Type) -> Q (ùêø Dec)
makePrettyRecord :: Name -> Q [Dec]

module UVMHS.Lib.Pretty.DerivedInstances
instance (UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÇ UVMHS.Lib.Pretty.Color.Color), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÇ UVMHS.Core.Init.ùîπ)) => UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Pretty.Annotation.Formats
instance (UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Pretty.Color.Color3Bit, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï8) => UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Pretty.Color.Color
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Pretty.Color.Color3Bit
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Monads.ID a)
instance (UVMHS.Lib.Pretty.Doc.Pretty a, UVMHS.Lib.Pretty.Doc.Pretty b) => UVMHS.Lib.Pretty.Doc.Pretty (a UVMHS.Core.Init.‚à® b)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÇ a)

module UVMHS.Lib.Pretty

module UVMHS.Lib.Parser.Loc
data Loc
Loc :: (‚Ñï64 ‚àß ‚Ñï64) -> ‚Ñï64 -> ‚Ñï64 -> Loc
[locPos] :: Loc -> ‚Ñï64 ‚àß ‚Ñï64
[locRow] :: Loc -> ‚Ñï64
[locCol] :: Loc -> ‚Ñï64
locColL :: (‚ü¢) Loc ‚Ñï64
locRowL :: (‚ü¢) Loc ‚Ñï64
locPosL :: (‚ü¢) Loc ((‚àß) ‚Ñï64 ‚Ñï64)
bumpRow‚ÇÅ :: Loc -> Loc
bumpCol‚ÇÅ :: Loc -> Loc
bumpCol‚ÇÇ :: Loc -> Loc
data LocRange
LocRange :: AddBT Loc -> AddBT Loc -> LocRange
[locRangeBegin] :: LocRange -> AddBT Loc
[locRangeEnd] :: LocRange -> AddBT Loc
locRangeEndL :: (‚ü¢) LocRange (AddBT Loc)
locRangeBeginL :: (‚ü¢) LocRange (AddBT Loc)
bumpColEnd‚ÇÇ :: LocRange -> LocRange
locRange‚ÇÄ :: LocRange
instance UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Pointed.AddBT UVMHS.Lib.Parser.Loc.Loc) => UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.Loc.LocRange
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Lib.Parser.Loc.LocRange
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Lib.Parser.Loc.LocRange
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Lib.Parser.Loc.LocRange
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Lib.Parser.Loc.LocRange
instance GHC.Show.Show UVMHS.Lib.Parser.Loc.LocRange
instance GHC.Classes.Ord UVMHS.Lib.Parser.Loc.LocRange
instance GHC.Classes.Eq UVMHS.Lib.Parser.Loc.LocRange
instance (UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.‚Ñï64 UVMHS.Core.Init.‚àß UVMHS.Core.Init.‚Ñï64), UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï64) => UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.Loc.Loc
instance GHC.Classes.Eq UVMHS.Lib.Parser.Loc.Loc
instance GHC.Classes.Ord UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Lib.Parser.Loc.Loc
instance GHC.Show.Show UVMHS.Lib.Parser.Loc.Loc

module UVMHS.Lib.Logging
newtype LogLevel
LogLevel :: ‚Ñï64 -> LogLevel
[unLogLevel] :: LogLevel -> ‚Ñï64
newtype LogDepth
LogDepth :: ‚Ñï64 -> LogDepth
[unLogDepth] :: LogDepth -> ‚Ñï64
data LogOptions
LogOptions :: ‚Ñï64 -> ‚Ñï64 -> ùîπ -> LogOptions
[logOptionsLevel] :: LogOptions -> ‚Ñï64
[logOptionsDepth] :: LogOptions -> ‚Ñï64
[logOptionsShowLevel] :: LogOptions -> ùîπ
logOptionsShowLevelL :: (‚ü¢) LogOptions ùîπ
logOptionsDepthL :: (‚ü¢) LogOptions ‚Ñï64
logOptionsLevelL :: (‚ü¢) LogOptions ‚Ñï64
logOptions‚ÇÄ :: LogOptions
pplog :: (Monad m, MonadIO m, MonadReader r m, HasLens r LogOptions) => ‚Ñï64 -> (() -> Doc) -> m ()
pplogd :: (Monad m, MonadIO m, MonadReader r m, HasLens r LogOptions) => ‚Ñï64 -> (() -> Doc) -> m ()
pplogdIndent :: (Monad m, MonadIO m, MonadReader r m, HasLens r LogOptions) => m a -> m a
pplogdIndentReset :: (Monad m, MonadIO m, MonadReader r m, HasLens r LogOptions) => m a -> m a
whenLogLevel :: (Monad m, MonadReader r m, HasLens r LogOptions) => ‚Ñï64 -> (() -> m ()) -> m ()
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Logging.LogLevel
instance GHC.Show.Show UVMHS.Lib.Logging.LogLevel
instance GHC.Classes.Ord UVMHS.Lib.Logging.LogLevel
instance GHC.Classes.Eq UVMHS.Lib.Logging.LogLevel
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Logging.LogDepth
instance GHC.Show.Show UVMHS.Lib.Logging.LogDepth
instance GHC.Classes.Ord UVMHS.Lib.Logging.LogDepth
instance GHC.Classes.Eq UVMHS.Lib.Logging.LogDepth
instance GHC.Show.Show UVMHS.Lib.Logging.LogOptions
instance GHC.Classes.Ord UVMHS.Lib.Logging.LogOptions
instance GHC.Classes.Eq UVMHS.Lib.Logging.LogOptions

module UVMHS.Lib.Dataframe
data FrameType
B_FT :: FrameType
N_FT :: FrameType
Z_FT :: FrameType
D_FT :: FrameType
S_FT :: FrameType
s_FTL :: (‚å≤) FrameType ()
d_FTL :: (‚å≤) FrameType ()
z_FTL :: (‚å≤) FrameType ()
n_FTL :: (‚å≤) FrameType ()
b_FTL :: (‚å≤) FrameType ()
frameTypeCode :: FrameType -> ùïä
data FrameVal
B_FV :: ùîπ -> FrameVal
N_FV :: ‚Ñï64 -> FrameVal
Z_FV :: ‚Ñ§64 -> FrameVal
D_FV :: ùîª -> FrameVal
S_FV :: ùïä -> FrameVal
s_FVL :: (‚å≤) FrameVal ùïä
d_FVL :: (‚å≤) FrameVal ùîª
z_FVL :: (‚å≤) FrameVal ‚Ñ§64
n_FVL :: (‚å≤) FrameVal ‚Ñï64
b_FVL :: (‚å≤) FrameVal ùîπ
data FrameCol
B_FC :: ùïå ùîπ -> FrameCol
N_FC :: ùïå ‚Ñï64 -> FrameCol
Z_FC :: ùïå ‚Ñ§64 -> FrameCol
D_FC :: ùïå ùîª -> FrameCol
S_FC :: ùïç ùïä -> FrameCol
s_FCL :: (‚å≤) FrameCol (ùïç ùïä)
d_FCL :: (‚å≤) FrameCol (ùïå ùîª)
z_FCL :: (‚å≤) FrameCol (ùïå ‚Ñ§64)
n_FCL :: (‚å≤) FrameCol (ùïå ‚Ñï64)
b_FCL :: (‚å≤) FrameCol (ùïå ùîπ)
frameColType :: FrameCol -> FrameType
frameColPack :: FrameType -> ùêºC FrameVal -> ùëÇ FrameCol
frameColUnpack :: FrameCol -> ùêºC FrameVal
frameColIndex :: ‚Ñï64 -> FrameCol -> ùëÇ FrameVal
data FrameGrouping v
B_FG :: (ùîπ ‚á∞ v) -> FrameGrouping v
N_FG :: (‚Ñï64 ‚á∞ v) -> FrameGrouping v
Z_FG :: (‚Ñ§64 ‚á∞ v) -> FrameGrouping v
D_FG :: (ùîª ‚á∞ v) -> FrameGrouping v
S_FG :: (ùïä ‚á∞ v) -> FrameGrouping v
frameGroupingInterWithM :: (Monad m, MonadFail m) => (v‚ÇÅ -> v‚ÇÇ -> m v‚ÇÉ) -> FrameGrouping v‚ÇÅ -> FrameGrouping v‚ÇÇ -> m (FrameGrouping v‚ÇÉ)
data FrameData
Vec_FD :: ‚Ñï64 -> (ùïä ‚á∞ FrameCol) -> FrameData
Grp_FD :: ùïä -> FrameGrouping FrameData -> FrameData
data Frame
Frame :: ùëÉ ùïä -> ùïç ùïä -> (ùïä ‚á∞ FrameType) -> (ùïä ‚á∞ FrameType) -> ((ùïä ‚á∞ FrameVal) ‚á∞ (‚Ñï64 ‚àß (ùïä ‚á∞ FrameCol))) -> Frame
[frameColP] :: Frame -> ùëÉ ùïä
[frameColV] :: Frame -> ùïç ùïä
[frameColT] :: Frame -> ùïä ‚á∞ FrameType
[frameGrpT] :: Frame -> ùïä ‚á∞ FrameType
[frameData] :: Frame -> (ùïä ‚á∞ FrameVal) ‚á∞ (‚Ñï64 ‚àß (ùïä ‚á∞ FrameCol))
frameProduct :: Frame -> Frame -> ùëÇ Frame
frameGroup :: ùïä -> ùïä -> Frame -> ùëÇ Frame
frameUngroup :: ùïä -> ùïä -> Frame -> ùëÇ Frame
frameValParse :: ùïä -> FrameType -> IO FrameVal
frameParse :: ùïä -> IO Frame
instance GHC.Show.Show UVMHS.Lib.Dataframe.FrameData
instance GHC.Classes.Ord UVMHS.Lib.Dataframe.FrameData
instance GHC.Classes.Eq UVMHS.Lib.Dataframe.FrameData
instance GHC.Show.Show UVMHS.Lib.Dataframe.Frame
instance GHC.Classes.Ord UVMHS.Lib.Dataframe.Frame
instance GHC.Classes.Eq UVMHS.Lib.Dataframe.Frame
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Dataframe.Frame
instance (UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùîπ UVMHS.Core.Init.‚á∞ v), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.‚Ñï64 UVMHS.Core.Init.‚á∞ v), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.‚Ñ§64 UVMHS.Core.Init.‚á∞ v), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùîª UVMHS.Core.Init.‚á∞ v), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùïä UVMHS.Core.Init.‚á∞ v)) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Dataframe.FrameGrouping v)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Lib.Dataframe.FrameGrouping
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Lib.Dataframe.FrameGrouping
instance GHC.Show.Show v => GHC.Show.Show (UVMHS.Lib.Dataframe.FrameGrouping v)
instance GHC.Classes.Ord v => GHC.Classes.Ord (UVMHS.Lib.Dataframe.FrameGrouping v)
instance GHC.Classes.Eq v => GHC.Classes.Eq (UVMHS.Lib.Dataframe.FrameGrouping v)
instance GHC.Show.Show UVMHS.Lib.Dataframe.FrameCol
instance GHC.Classes.Ord UVMHS.Lib.Dataframe.FrameCol
instance GHC.Classes.Eq UVMHS.Lib.Dataframe.FrameCol
instance (UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîπ, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï64, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§64, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîª, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Dataframe.FrameVal
instance GHC.Show.Show UVMHS.Lib.Dataframe.FrameVal
instance GHC.Classes.Ord UVMHS.Lib.Dataframe.FrameVal
instance GHC.Classes.Eq UVMHS.Lib.Dataframe.FrameVal
instance GHC.Show.Show UVMHS.Lib.Dataframe.FrameType
instance GHC.Classes.Ord UVMHS.Lib.Dataframe.FrameType
instance GHC.Classes.Eq UVMHS.Lib.Dataframe.FrameType

module UVMHS.Lib.Annotated
data ùê¥ e a
ùê¥ :: e -> a -> ùê¥ e a
[atag] :: ùê¥ e a -> e
[aval] :: ùê¥ e a -> a
avalL :: forall (e_a3Hel :: Type) (a_a3Hem :: Type). (‚ü¢) (ùê¥ e_a3Hel a_a3Hem) a_a3Hem
atagL :: forall (e_a3Hel :: Type) (a_a3Hem :: Type). (‚ü¢) (ùê¥ e_a3Hel a_a3Hem) e_a3Hel
mapùê¥ :: (e -> e') -> (a -> b) -> ùê¥ e a -> ùê¥ e' b
mapATag :: (e -> e') -> ùê¥ e a -> ùê¥ e' a
mapAVal :: (a -> b) -> ùê¥ e a -> ùê¥ e b
mapMùê¥ :: Monad m => (e -> m e') -> (a -> m b) -> ùê¥ e a -> m (ùê¥ e' b)
mapMATag :: Monad m => (e -> m e') -> ùê¥ e a -> m (ùê¥ e' a)
mapMAVal :: Monad m => (a -> m b) -> ùê¥ e a -> m (ùê¥ e b)
untag :: ((() -> e) -> b -> b) -> ùê¥ e a -> (a -> b) -> b
untagWith :: ((() -> e) -> b -> b) -> (a -> b) -> ùê¥ e a -> b
retag :: Monad m => m e -> a -> m (ùê¥ e a)
instance (UVMHS.Lib.Pretty.Doc.Pretty e, UVMHS.Lib.Pretty.Doc.Pretty a) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Annotated.ùê¥ e a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Lib.Annotated.ùê¥ t a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Lib.Annotated.ùê¥ t a)
instance UVMHS.Core.Classes.Comonad.Extract (UVMHS.Lib.Annotated.ùê¥ t)
instance UVMHS.Core.Classes.Comonad.Cobind (UVMHS.Lib.Annotated.ùê¥ t)
instance UVMHS.Core.Classes.Functors.Functor (UVMHS.Lib.Annotated.ùê¥ t)
instance UVMHS.Core.Classes.Functors.FunctorM (UVMHS.Lib.Annotated.ùê¥ t)
instance UVMHS.Core.Classes.Comonad.Comonad (UVMHS.Lib.Annotated.ùê¥ t)
instance (UVMHS.Core.Classes.Monoid.Null e, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Annotated.ùê¥ e a)
instance (UVMHS.Core.Classes.Monoid.Append e, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Annotated.ùê¥ e a)
instance (GHC.Show.Show e, GHC.Show.Show a) => GHC.Show.Show (UVMHS.Lib.Annotated.ùê¥ e a)

module UVMHS.Lib.AD
data ADF a
ADF :: a -> a -> ADF a
[adfVal] :: ADF a -> a
[adfDer] :: ADF a -> a
adfDerL :: forall (a_a3G3F :: Type). (‚ü¢) (ADF a_a3G3F) a_a3G3F
adfValL :: forall (a_a3G3F :: Type). (‚ü¢) (ADF a_a3G3F) a_a3G3F
constADF :: Zero a => a -> ADF a
sensADF :: a -> a -> ADF a
plusADF :: Plus a => ADF a -> ADF a -> ADF a
timesADF :: (Plus a, Times a) => ADF a -> ADF a -> ADF a
data ADB a
ADB :: a -> (a -> a -> a) -> ADB a
[adbVal] :: ADB a -> a
[adbDer] :: ADB a -> a -> a -> a
adbDerL :: forall (a_a3GnY :: Type). (‚ü¢) (ADB a_a3GnY) (a_a3GnY -> a_a3GnY -> a_a3GnY)
adbValL :: forall (a_a3GnY :: Type). (‚ü¢) (ADB a_a3GnY) a_a3GnY
constADB :: Zero a => a -> ADB a
sensADB :: a -> (a -> a -> a) -> ADB a
plusADB :: Plus a => ADB a -> ADB a -> ADB a
timesADB :: Times a => ADB a -> ADB a -> ADB a
data ADFF (ns :: [ùêç]) (f :: [ùêç] -> ‚òÖ -> ‚òÖ) (ms :: [ùêç]) (a :: ‚òÖ)
ADFF :: f (ns ‚ß∫ ms) a -> f (ns ‚ß∫ ms) a -> ADFF (ns :: [ùêç]) (f :: [ùêç] -> ‚òÖ -> ‚òÖ) (ms :: [ùêç]) (a :: ‚òÖ)
[adffVal] :: ADFF (ns :: [ùêç]) (f :: [ùêç] -> ‚òÖ -> ‚òÖ) (ms :: [ùêç]) (a :: ‚òÖ) -> f (ns ‚ß∫ ms) a
[adffDer] :: ADFF (ns :: [ùêç]) (f :: [ùêç] -> ‚òÖ -> ‚òÖ) (ms :: [ùêç]) (a :: ‚òÖ) -> f (ns ‚ß∫ ms) a
adffDerL :: forall (ns_a3GGH :: [ùêç]) (f_a3GGI :: [ùêç] -> Type -> Type) (ms_a3GGJ :: [ùêç]) (a_a3GGK :: Type). (‚ü¢) (ADFF ns_a3GGH f_a3GGI ms_a3GGJ a_a3GGK) (f_a3GGI ((‚ß∫) ns_a3GGH ms_a3GGJ) a_a3GGK)
adffValL :: forall (ns_a3GGH :: [ùêç]) (f_a3GGI :: [ùêç] -> Type -> Type) (ms_a3GGJ :: [ùêç]) (a_a3GGK :: Type). (‚ü¢) (ADFF ns_a3GGH f_a3GGI ms_a3GGJ a_a3GGK) (f_a3GGI ((‚ß∫) ns_a3GGH ms_a3GGJ) a_a3GGK)
constADFF :: Zero (f (ns ‚ß∫ ms) a) => f (ns ‚ß∫ ms) a -> ADFF ns f ms a
sensADFF :: f (ns ‚ß∫ ms) a -> f (ns ‚ß∫ ms) a -> ADFF ns f ms a
plusADFF :: Plus (f (ns ‚ß∫ ms) a) => ADFF ns f ms a -> ADFF ns f ms a -> ADFF ns f ms a
timesADFF :: (Plus (f (ns ‚ß∫ ms) a), Times (f (ns ‚ß∫ ms) a)) => ADFF ns f ms a -> ADFF ns f ms a -> ADFF ns f ms a
data ADFB (ns :: [ùêç]) (f :: [ùêç] -> ‚òÖ -> ‚òÖ) (ms :: [ùêç]) (a :: ‚òÖ)
ADFB :: f (ns ‚ß∫ ms) a -> (f (ns ‚ß∫ ms) a -> f (ns ‚ß∫ ms) a -> f (ns ‚ß∫ ms) a) -> ADFB (ns :: [ùêç]) (f :: [ùêç] -> ‚òÖ -> ‚òÖ) (ms :: [ùêç]) (a :: ‚òÖ)
[adfbVal] :: ADFB (ns :: [ùêç]) (f :: [ùêç] -> ‚òÖ -> ‚òÖ) (ms :: [ùêç]) (a :: ‚òÖ) -> f (ns ‚ß∫ ms) a
[adfbDer] :: ADFB (ns :: [ùêç]) (f :: [ùêç] -> ‚òÖ -> ‚òÖ) (ms :: [ùêç]) (a :: ‚òÖ) -> f (ns ‚ß∫ ms) a -> f (ns ‚ß∫ ms) a -> f (ns ‚ß∫ ms) a
adfbDerL :: forall (ns_a3GSj :: [ùêç]) (f_a3GSk :: [ùêç] -> Type -> Type) (ms_a3GSl :: [ùêç]) (a_a3GSm :: Type). (‚ü¢) (ADFB ns_a3GSj f_a3GSk ms_a3GSl a_a3GSm) (f_a3GSk ((‚ß∫) ns_a3GSj ms_a3GSl) a_a3GSm -> f_a3GSk ((‚ß∫) ns_a3GSj ms_a3GSl) a_a3GSm -> f_a3GSk ((‚ß∫) ns_a3GSj ms_a3GSl) a_a3GSm)
adfbValL :: forall (ns_a3GSj :: [ùêç]) (f_a3GSk :: [ùêç] -> Type -> Type) (ms_a3GSl :: [ùêç]) (a_a3GSm :: Type). (‚ü¢) (ADFB ns_a3GSj f_a3GSk ms_a3GSl a_a3GSm) (f_a3GSk ((‚ß∫) ns_a3GSj ms_a3GSl) a_a3GSm)
constADFB :: f (ns ‚ß∫ ms) a -> ADFB ns f ms a
sensADFB :: f (ns ‚ß∫ ms) a -> (f (ns ‚ß∫ ms) a -> f (ns ‚ß∫ ms) a -> f (ns ‚ß∫ ms) a) -> ADFB ns f ms a
plusADFB :: Plus (f (ns ‚ß∫ ms) a) => ADFB ns f ms a -> ADFB ns f ms a -> ADFB ns f ms a
timesADFB :: (Plus (f (ns ‚ß∫ ms) a), Times (f (ns ‚ß∫ ms) a)) => ADFB ns f ms a -> ADFB ns f ms a -> ADFB ns f ms a
instance (UVMHS.Lib.Pretty.Doc.Pretty (f (ns UVMHS.Core.Static.‚ß∫ ms) a), UVMHS.Lib.Pretty.Doc.Pretty (f (ns UVMHS.Core.Static.‚ß∫ ms) a -> f (ns UVMHS.Core.Static.‚ß∫ ms) a -> f (ns UVMHS.Core.Static.‚ß∫ ms) a)) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.AD.ADFB ns f ms a)
instance UVMHS.Lib.Pretty.Doc.Pretty (f (ns UVMHS.Core.Static.‚ß∫ ms) a) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.AD.ADFF ns f ms a)
instance (UVMHS.Lib.Pretty.Doc.Pretty a, UVMHS.Lib.Pretty.Doc.Pretty (a -> a -> a)) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.AD.ADB a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.AD.ADF a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Lib.AD.ADF a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Lib.AD.ADF a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Lib.AD.ADF a)

module UVMHS.Lib.TreeNested
data ùëáA a
ùëáA :: ùêº a -> ùêº (ùïä ‚àß ùëáA a) -> ùëáA a
[valsùëáA] :: ùëáA a -> ùêº a
[nestùëáA] :: ùëáA a -> ùêº (ùïä ‚àß ùëáA a)
foldùëáAWith :: Monoid b => (ùêº a -> b) -> (ùïä -> b -> b) -> ùëáA a -> b
foldùëáAOn :: Monoid b => ùëáA a -> (ùêº a -> b) -> (ùïä -> b -> b) -> b
keyùëáA :: ùïä -> ùëáA a -> ùëáA a
valùëáA :: a -> ùëáA a
keysùëáA :: ùêø ùïä -> ùëáA a -> ùëáA a
data ùëáD a
ùëáD :: ùêº a -> (ùïä ‚á∞ ùëáD a) -> ùëáD a
[valsùëáD] :: ùëáD a -> ùêº a
[nestùëáD] :: ùëáD a -> ùïä ‚á∞ ùëáD a
foldùëáDWith :: Monoid b => (ùêº a -> b) -> (ùïä -> b -> b) -> ùëáD a -> b
foldùëáDOn :: Monoid b => ùëáD a -> (ùêº a -> b) -> (ùïä -> b -> b) -> b
keyùëáD :: ùïä -> ùëáD a -> ùëáD a
valùëáD :: a -> ùëáD a
keysùëáD :: ùêø ùïä -> ùëáD a -> ùëáD a
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Lib.TreeNested.ùëáA a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Lib.TreeNested.ùëáD a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.TreeNested.ùëáD a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.TreeNested.ùëáD a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.TreeNested.ùëáD a)
instance UVMHS.Core.Classes.Monoid.Eps (UVMHS.Lib.TreeNested.ùëáD a)
instance UVMHS.Core.Classes.Monoid.Seq (UVMHS.Lib.TreeNested.ùëáD a)
instance UVMHS.Core.Classes.Monoid.Seqoid (UVMHS.Lib.TreeNested.ùëáD a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.TreeNested.ùëáD a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.TreeNested.ùëáA a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.TreeNested.ùëáA a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.TreeNested.ùëáA a)
instance UVMHS.Core.Classes.Monoid.Eps (UVMHS.Lib.TreeNested.ùëáA a)
instance UVMHS.Core.Classes.Monoid.Seq (UVMHS.Lib.TreeNested.ùëáA a)
instance UVMHS.Core.Classes.Monoid.Seqoid (UVMHS.Lib.TreeNested.ùëáA a)
instance UVMHS.Lib.Pretty.Doc.Pretty a => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.TreeNested.ùëáA a)

module UVMHS.Lib.Testing
data Test
Test :: Doc -> Doc -> ‚Ñï64 -> IO (Doc ‚àß (() -> ùîπ)) -> Test
[testSrcLoc] :: Test -> Doc
[testSrcShow] :: Test -> Doc
[testValIter] :: Test -> ‚Ñï64
[testResult] :: Test -> IO (Doc ‚àß (() -> ùîπ))
data TestsOut
TestsOut :: (ùêø ùïä ‚á∞ ùêº ((Doc ‚àß Doc) ‚àß Doc)) -> (ùêø ùïä ‚á∞ (‚Ñï ‚àß ‚Ñï)) -> TestsOut
[testsOutFailures] :: TestsOut -> ùêø ùïä ‚á∞ ùêº ((Doc ‚àß Doc) ‚àß Doc)
[testsOutMetrics] :: TestsOut -> ùêø ùïä ‚á∞ (‚Ñï ‚àß ‚Ñï)
ùî± :: ùïä -> Q Exp -> Q Exp -> Q [Dec]
eqTest :: (Eq a, Pretty a) => ùêø ùïä -> ùïä -> ùïä -> ùïä -> a -> a -> ùëáD Test
fuzzTest :: Pretty a => ùêø ùïä -> ùïä -> ùïä -> ùïä -> ‚Ñï64 -> IO a -> (a -> ùîπ) -> ùëáD Test
runTests :: ùîπ -> ùëáD Test -> IO ()
ùî±T :: (Eq a, Pretty a) => ùïä -> Code Q a -> Code Q a -> Q [Dec]
ùî£ :: ùïä -> ‚Ñï64 -> Q Exp -> Q Exp -> Q [Dec]
ùî£T :: Pretty a => ùïä -> ‚Ñï64 -> Code Q (IO a) -> Code Q (a -> ùîπ) -> Q [Dec]
buildTests :: Q [Dec]
testModules :: ùîπ -> [ùïä] -> Code Q (IO ())
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Testing.TestsOut
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Testing.TestsOut
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Testing.TestsOut

module UVMHS.Lib.Window
data WindowL i a
ZerWindowL :: a -> WindowL i a
OneWindowL :: ùîπ -> a -> i -> a -> WindowL i a
eWindowL :: a -> WindowL i a
iWindowL :: Null a => i -> WindowL i a
overflowL :: WindowL i a -> ùîπ
mapWindowL :: (i -> j) -> (a -> b) -> WindowL i a -> WindowL j b
data WindowR i a
ZerWindowR :: a -> WindowR i a
OneWindowR :: ùîπ -> a -> i -> a -> WindowR i a
eWindowR :: a -> WindowR i a
iWindowR :: Null a => i -> WindowR i a
overflowR :: WindowR i a -> ùîπ
mapWindowR :: (i -> j) -> (a -> b) -> WindowR i a -> WindowR j b
renderWindowL :: WindowL Doc Doc -> Doc
renderWindowR :: WindowR Doc Doc -> Doc
instance (UVMHS.Lib.Pretty.Doc.Pretty a, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîπ, UVMHS.Lib.Pretty.Doc.Pretty i) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Window.WindowR i a)
instance (UVMHS.Lib.Pretty.Doc.Pretty a, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîπ, UVMHS.Lib.Pretty.Doc.Pretty i) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Window.WindowL i a)
instance (GHC.Show.Show i, GHC.Show.Show a) => GHC.Show.Show (UVMHS.Lib.Window.WindowL i a)
instance (GHC.Classes.Ord i, GHC.Classes.Ord a) => GHC.Classes.Ord (UVMHS.Lib.Window.WindowL i a)
instance (GHC.Classes.Eq i, GHC.Classes.Eq a) => GHC.Classes.Eq (UVMHS.Lib.Window.WindowL i a)
instance (GHC.Show.Show i, GHC.Show.Show a) => GHC.Show.Show (UVMHS.Lib.Window.WindowR i a)
instance (GHC.Classes.Ord i, GHC.Classes.Ord a) => GHC.Classes.Ord (UVMHS.Lib.Window.WindowR i a)
instance (GHC.Classes.Eq i, GHC.Classes.Eq a) => GHC.Classes.Eq (UVMHS.Lib.Window.WindowR i a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Window.WindowR i a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Window.WindowR i a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Window.WindowR i a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Lib.Window.WindowR a a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Window.WindowL i a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Window.WindowL i a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Window.WindowL i a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Lib.Window.WindowL a a)

module UVMHS.Lib.Parser.ParserError
data ParserErrorInfo
ParserErrorInfo :: WindowR Doc Doc -> WindowR Doc Doc -> ùïä -> ùêº ùïä -> ParserErrorInfo
[parserErrorInfoPrefix] :: ParserErrorInfo -> WindowR Doc Doc
[parserErrorInfoContext] :: ParserErrorInfo -> WindowR Doc Doc
[parserErrorInfoStackHead] :: ParserErrorInfo -> ùïä
[parserErrorInfoStackTail] :: ParserErrorInfo -> ùêº ùïä
data ParserError t
ParserError :: AddBT Loc -> WindowR Doc Doc -> WindowL Doc Doc -> ùêº ParserErrorInfo -> ParserError t
[parserErrorTokenLoc] :: ParserError t -> AddBT Loc
[parserErrorTokenContext] :: ParserError t -> WindowR Doc Doc
[parserErrorTokenSuffix] :: ParserError t -> WindowL Doc Doc
[parserErrorFailures] :: ParserError t -> ùêº ParserErrorInfo
data ParserErrorStackTraces
ParserErrorStackTraces :: ùëÉ ùïä -> (ùïä ‚á∞ ParserErrorStackTraces) -> ParserErrorStackTraces
[parserErrorStackTracesMessages] :: ParserErrorStackTraces -> ùëÉ ùïä
[parserErrorStackTracesChain] :: ParserErrorStackTraces -> ùïä ‚á∞ ParserErrorStackTraces
parserErrorStackTracesChainL :: (‚ü¢) ParserErrorStackTraces ((‚á∞) ùïä ParserErrorStackTraces)
parserErrorStackTracesMessagesL :: (‚ü¢) ParserErrorStackTraces (ùëÉ ùïä)
stackTraces :: ùïä -> ùêº ùïä -> ParserErrorStackTraces
parserErrorFailuresMap :: ùêº ParserErrorInfo -> (ùïä ‚àß ùîπ) ‚á∞ ((WindowR Doc Doc ‚àß WindowR Doc Doc) ‚àß ParserErrorStackTraces)
displaySourceError :: ùïä -> AddNull (ParserError t) -> Doc
displayErrorTraces :: ParserErrorStackTraces -> Doc
instance (UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÉ UVMHS.Core.Init.ùïä), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùïä UVMHS.Core.Init.‚á∞ UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces)) => UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance GHC.Classes.Ord UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance GHC.Classes.Eq UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance forall k (t :: k). UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.ParserError.ParserError t)

module UVMHS.Lib.Parser.ParserContext
data ParserContext
ParserContext :: LocRange -> WindowL Doc Doc -> WindowR Doc Doc -> WindowR Doc Doc -> ParserContext
[parserContextLocRange] :: ParserContext -> LocRange
[parserContextDisplayL] :: ParserContext -> WindowL Doc Doc
[parserContextDisplayR] :: ParserContext -> WindowR Doc Doc
[parserContextError] :: ParserContext -> WindowR Doc Doc
parserContextErrorL :: (‚ü¢) ParserContext (WindowR Doc Doc)
parserContextDisplayRL :: (‚ü¢) ParserContext (WindowR Doc Doc)
parserContextDisplayLL :: (‚ü¢) ParserContext (WindowL Doc Doc)
parserContextLocRangeL :: (‚ü¢) ParserContext LocRange
formatParserContext :: Formats -> ParserContext -> ParserContext
data SrcCxt
SrcCxt :: ùïä -> LocRange -> WindowR Doc Doc -> WindowL Doc Doc -> WindowL Doc Doc -> SrcCxt
[srcCxtSourceName] :: SrcCxt -> ùïä
[srcCxtLocRange] :: SrcCxt -> LocRange
[srcCxtPrefix] :: SrcCxt -> WindowR Doc Doc
[srcCxtContext] :: SrcCxt -> WindowL Doc Doc
[srcCxtSuffix] :: SrcCxt -> WindowL Doc Doc
srcCxt‚ÇÄ :: SrcCxt
instance GHC.Classes.Ord UVMHS.Lib.Parser.ParserContext.SrcCxt
instance GHC.Classes.Eq UVMHS.Lib.Parser.ParserContext.SrcCxt
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.ParserContext.SrcCxt
instance GHC.Show.Show UVMHS.Lib.Parser.ParserContext.SrcCxt
instance (UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.Loc.LocRange, UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Window.WindowL UVMHS.Lib.Pretty.Doc.Doc UVMHS.Lib.Pretty.Doc.Doc), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Window.WindowR UVMHS.Lib.Pretty.Doc.Doc UVMHS.Lib.Pretty.Doc.Doc)) => UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Parser.ParserContext.ParserContext
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Parser.ParserContext.ParserContext
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Parser.ParserContext.ParserContext

module UVMHS.Lib.Parser.ParserInput
data PreParserToken t
PreParserToken :: t -> ùîπ -> ParserContext -> PreParserToken t
[preParserTokenValue] :: PreParserToken t -> t
[preParserTokenSkip] :: PreParserToken t -> ùîπ
[preParserTokenContext] :: PreParserToken t -> ParserContext
preParserTokenContextL :: forall (t_a4lzV :: Type). (‚ü¢) (PreParserToken t_a4lzV) ParserContext
preParserTokenSkipL :: forall (t_a4lzV :: Type). (‚ü¢) (PreParserToken t_a4lzV) ùîπ
preParserTokenValueL :: forall (t_a4lzV :: Type). (‚ü¢) (PreParserToken t_a4lzV) t_a4lzV
data ParserToken t
ParserToken :: t -> ùîπ -> ParserContext -> WindowL Doc Doc -> ParserToken t
[parserTokenValue] :: ParserToken t -> t
[parserTokenSkip] :: ParserToken t -> ùîπ
[parserTokenContext] :: ParserToken t -> ParserContext
[parserTokenSuffix] :: ParserToken t -> WindowL Doc Doc
parserTokenSuffixL :: forall (t_a4lDV :: Type). (‚ü¢) (ParserToken t_a4lDV) (WindowL Doc Doc)
parserTokenContextL :: forall (t_a4lDV :: Type). (‚ü¢) (ParserToken t_a4lDV) ParserContext
parserTokenSkipL :: forall (t_a4lDV :: Type). (‚ü¢) (ParserToken t_a4lDV) ùîπ
parserTokenValueL :: forall (t_a4lDV :: Type). (‚ü¢) (ParserToken t_a4lDV) t_a4lDV
renderNLDisplay :: Doc
renderNLError :: Doc
renderEOFDisplay :: Doc
renderEOFError :: Doc
eofContext :: AddBT Loc -> ParserContext
nlContext :: Loc -> ParserContext
charContext :: Loc -> ‚ÑÇ -> ParserContext
preTokens :: ùïä -> ùïç (PreParserToken ‚ÑÇ)
finalizeTokens :: ùïç (PreParserToken t) -> ùïç (ParserToken t)
tokens :: ùïä -> ùïç (ParserToken ‚ÑÇ)
instance (UVMHS.Lib.Pretty.Doc.Pretty t, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîπ, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext, UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Window.WindowL UVMHS.Lib.Pretty.Doc.Doc UVMHS.Lib.Pretty.Doc.Doc)) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.ParserInput.ParserToken t)
instance (UVMHS.Lib.Pretty.Doc.Pretty t, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîπ, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.ParserInput.PreParserToken t)

module UVMHS.Lib.Parser.Regex
class Classified c t | t -> c
classify :: Classified c t => t -> c
data RegexResult o u
RegexResult :: ‚Ñï64 -> Formats -> ùëÇ o -> u -> RegexResult o u
[regexResultLevel] :: RegexResult o u -> ‚Ñï64
[regexResultFormats] :: RegexResult o u -> Formats
[regexResultOutput] :: RegexResult o u -> ùëÇ o
[regexResultUpdate] :: RegexResult o u -> u
newtype RegexInfo o u
RegexInfo :: ùëÇ (RegexResult o u) -> RegexInfo o u
[regexInfoResult] :: RegexInfo o u -> ùëÇ (RegexResult o u)
newtype Regex c t o u
Regex :: ùê¥ (RegexInfo o u) (RegexU c t o u) -> Regex c t o u
[unRegex] :: Regex c t o u -> ùê¥ (RegexInfo o u) (RegexU c t o u)
data RegexU c t o u
NullR :: RegexU c t o u
ResR :: RegexResult o u -> RegexU c t o u
AtomR :: RegexResult o u -> RegexAtom c t o u -> RegexU c t o u
SumsR :: ùëÉ (Regex c t o u) -> RegexU c t o u
SeqsR :: ùêø (Regex c t o u) -> RegexU c t o u
StarR :: RegexResult o u -> Regex c t o u -> RegexU c t o u
data RegexAtom c t o u
TokRA :: t -> RegexAtom c t o u
NTokRA :: ùëÉ t -> RegexAtom c t o u
ClassRA :: c -> RegexAtom c t o u
nullRegex :: Zero u => Regex c t o u
resRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => RegexResult o u -> Regex c t o u
epsRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => Regex c t o u
retRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => ‚Ñï64 -> Formats -> ùëÇ o -> u -> Regex c t o u
outRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => ‚Ñï64 -> Formats -> o -> Regex c t o u
lepsRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => ‚Ñï64 -> Regex c t o u
fepsRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => Formats -> Regex c t o u
oepsRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => o -> Regex c t o u
uepsRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => u -> Regex c t o u
atomRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => RegexAtom c t o u -> Regex c t o u
tokRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => t -> Regex c t o u
ntokRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => ùëÉ t -> Regex c t o u
classRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => c -> Regex c t o u
consEpsRegex :: (Ord c, Ord t, Ord o, Ord u, Plus u) => RegexResult o u -> Regex c t o u -> Regex c t o u
consEpsRegexU :: (Ord c, Ord t, Ord o, Ord u, Plus u) => RegexResult o u -> RegexU c t o u -> RegexU c t o u
snocEpsRegex :: (Ord c, Ord t, Ord o, Ord u, Plus u) => RegexResult o u -> Regex c t o u -> Regex c t o u
snocEpsRegexU :: (Ord c, Ord t, Ord o, Ord u, Plus u) => RegexResult o u -> RegexU c t o u -> RegexU c t o u
sumRegex :: (Ord c, Ord t, Ord o, Ord u, Plus u) => Regex c t o u -> Regex c t o u -> Regex c t o u
seqRegex :: (Ord c, Ord t, Ord o, Ord u, Additive u) => Regex c t o u -> Regex c t o u -> Regex c t o u
starRegex :: (Ord c, Ord t, Ord o, Ord u, Zero u) => Regex c t o u -> Regex c t o u
derRegex :: (Ord c, Ord t, Classified c t, Ord o, Ord u, Additive u) => (t ‚à® c) -> Regex c t o u -> Regex c t o u
derRegexAtom :: (Ord c, Ord t, Classified c t, Ord o, Ord u, Additive u) => (t ‚à® c) -> RegexAtom c t o u -> Regex c t o u
derRegexSequence :: (Ord t, Ord c, Classified c t, Ord o, Ord u, Additive u) => (t ‚à® c) -> ùêø (Regex c t o u) -> Regex c t o u
regexLits :: Ord t => Regex c t o u -> ùëÉ t
regexLitsAtom :: Ord t => RegexAtom c t o u -> ùëÉ t
data RegexState c t o u
RegexState :: ‚Ñï64 -> (Regex c t o u ‚á∞ ‚Ñï64) -> ((t ‚à® c) ‚á∞ (‚Ñï64 ‚á∞ ‚Ñï64)) -> (‚Ñï64 ‚á∞ ùëÇ (RegexResult o u)) -> (‚Ñï64 ‚á∞ ùîπ) -> RegexState c t o u
[regexStateNextID] :: RegexState c t o u -> ‚Ñï64
[regexStateMap] :: RegexState c t o u -> Regex c t o u ‚á∞ ‚Ñï64
[regexStateTransitions] :: RegexState c t o u -> (t ‚à® c) ‚á∞ (‚Ñï64 ‚á∞ ‚Ñï64)
[regexStateResults] :: RegexState c t o u -> ‚Ñï64 ‚á∞ ùëÇ (RegexResult o u)
[regexStateDead] :: RegexState c t o u -> ‚Ñï64 ‚á∞ ùîπ
regexStateDeadL :: forall (c_a4qUc :: Type) (t_a4qUd :: Type) (o_a4qUe :: Type) (u_a4qUf :: Type). (‚ü¢) (RegexState c_a4qUc t_a4qUd o_a4qUe u_a4qUf) ((‚á∞) ‚Ñï64 ùîπ)
regexStateResultsL :: forall (c_a4qUc :: Type) (t_a4qUd :: Type) (o_a4qUe :: Type) (u_a4qUf :: Type). (‚ü¢) (RegexState c_a4qUc t_a4qUd o_a4qUe u_a4qUf) ((‚á∞) ‚Ñï64 (ùëÇ (RegexResult o_a4qUe u_a4qUf)))
regexStateTransitionsL :: forall (c_a4qUc :: Type) (t_a4qUd :: Type) (o_a4qUe :: Type) (u_a4qUf :: Type). (‚ü¢) (RegexState c_a4qUc t_a4qUd o_a4qUe u_a4qUf) ((‚á∞) ((‚à®) t_a4qUd c_a4qUc) ((‚á∞) ‚Ñï64 ‚Ñï64))
regexStateMapL :: forall (c_a4qUc :: Type) (t_a4qUd :: Type) (o_a4qUe :: Type) (u_a4qUf :: Type). (‚ü¢) (RegexState c_a4qUc t_a4qUd o_a4qUe u_a4qUf) ((‚á∞) (Regex c_a4qUc t_a4qUd o_a4qUe u_a4qUf) ‚Ñï64)
regexStateNextIDL :: forall (c_a4qUc :: Type) (t_a4qUd :: Type) (o_a4qUe :: Type) (u_a4qUf :: Type). (‚ü¢) (RegexState c_a4qUc t_a4qUd o_a4qUe u_a4qUf) ‚Ñï64
regexState‚ÇÄ :: RegexState c t o u
data DFA c t o u
DFA :: ùëÉ t -> ‚Ñï64 -> ((t ‚à® c) ‚á∞ ùïç ‚Ñï64) -> ùïç (ùëÇ (RegexResult o u)) -> ùïç ùîπ -> DFA c t o u
[dfaLits] :: DFA c t o u -> ùëÉ t
[dfaStart] :: DFA c t o u -> ‚Ñï64
[dfaTransitions] :: DFA c t o u -> (t ‚à® c) ‚á∞ ùïç ‚Ñï64
[dfaSuccess] :: DFA c t o u -> ùïç (ùëÇ (RegexResult o u))
[dfaDead] :: DFA c t o u -> ùïç ùîπ
compileRegex :: forall c t o u. (Pretty t, Pretty o, Pretty u, Ord c, Ord t, Classified c t, All c, Ord o, Ord u, Additive u) => Regex c t o u -> DFA c t o u
data LexDFAState t
LexDFAState :: WindowR Doc Doc -> ParserContext -> ùëÜ (ParserToken t) -> ùêºC t -> LexDFAState t
[lexDFAStatePrefix] :: LexDFAState t -> WindowR Doc Doc
[lexDFAStateContext] :: LexDFAState t -> ParserContext
[lexDFAStateInput] :: LexDFAState t -> ùëÜ (ParserToken t)
[lexDFAStateTokens] :: LexDFAState t -> ùêºC t
data Lexer c t o u w
Lexer :: (u -> DFA c t o u) -> (ùêºC t -> ùëÇ o -> ùîπ ‚àß w) -> u -> Lexer c t o u w
[lexerDFA] :: Lexer c t o u w -> u -> DFA c t o u
[lexerMkToken] :: Lexer c t o u w -> ùêºC t -> ùëÇ o -> ùîπ ‚àß w
[lexerInitState] :: Lexer c t o u w -> u
tokenize :: forall c t o u w. (Show u, Ord c, Ord t, Pretty t, Classified c t, Eq o, Eq u, Plus u) => Lexer c t o u w -> ùïä -> ùïç (ParserToken t) -> Doc ‚à® ùïç (PreParserToken w)
tokenizeFIO :: forall c t o u w w'. (Show u, Ord c, Ord t, Pretty t, Classified c t, Eq o, Eq u, Plus u) => Lexer c t o u w -> ùïä -> (ùïç (PreParserToken w) -> ùïç (PreParserToken w')) -> ùïç (ParserToken t) -> IO (ùïç (ParserToken w'))
tokenizeIO :: forall c t o u w. (Show u, Ord c, Ord t, Pretty t, Classified c t, Eq o, Eq u, Plus u) => Lexer c t o u w -> ùïä -> ùïç (ParserToken t) -> IO (ùïç (ParserToken w))
tokenizeFIOMain :: forall c t o u w w'. (Show u, Ord c, Ord t, Pretty t, Classified c t, Eq o, Eq u, Plus u, Pretty w') => Lexer c t o u w -> ùïä -> (ùïç (PreParserToken w) -> ùïç (PreParserToken w')) -> ùïç (ParserToken t) -> IO ()
tokenizeIOMain :: forall c t o u w. (Show u, Ord c, Ord t, Pretty t, Classified c t, Eq o, Eq u, Plus u, Pretty w) => Lexer c t o u w -> ùïä -> ùïç (ParserToken t) -> IO ()
data CharClass
LetterClass :: CharClass
NumberClass :: CharClass
SpaceClass :: CharClass
NewlineClass :: CharClass
OtherClass :: CharClass
lWord :: (Zero u, Ord o, Ord u, Additive u) => ùïä -> Regex CharClass ‚ÑÇ o u
lSpaceOrNl :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lSpace :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lNl :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lName :: (Zero u, Ord u, Ord o, Additive u) => Regex CharClass ‚ÑÇ o u
lNatPre :: (Zero u, Ord u, Ord o, Additive u) => Regex CharClass ‚ÑÇ o u
lNat :: (Zero u, Ord u, Ord o, Additive u) => Regex CharClass ‚ÑÇ o u
lNatCoded :: (Zero u, Ord u, Ord o, Additive u) => Regex CharClass ‚ÑÇ o u
lIntPre :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lInt :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lDbl :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lString :: (Zero u, Ord o, Ord u, Additive u) => Regex CharClass ‚ÑÇ o u
lComment :: Ord o => Regex CharClass ‚ÑÇ o ‚Ñï64
lCommentMLOpen :: Ord o => Regex CharClass ‚ÑÇ o ‚Ñï64
lCommentMLBodyOpen :: Ord o => Regex CharClass ‚ÑÇ o ‚Ñï64
lCommentMLBodyClose :: Ord o => Regex CharClass ‚ÑÇ o ‚Ñï64
lCommentMLBody :: Ord o => Regex CharClass ‚ÑÇ o ‚Ñï64
data TokenClassBasic
SpaceCBasic :: TokenClassBasic
CommentCBasic :: TokenClassBasic
SyntaxCBasic :: TokenClassBasic
StringCBasic :: TokenClassBasic
NameCBasic :: TokenClassBasic
NaturalCBasic :: TokenClassBasic
IntegerCBasic :: TokenClassBasic
DoubleCBasic :: TokenClassBasic
CharCBasic :: TokenClassBasic
charCBasicL :: (‚å≤) TokenClassBasic ()
doubleCBasicL :: (‚å≤) TokenClassBasic ()
integerCBasicL :: (‚å≤) TokenClassBasic ()
naturalCBasicL :: (‚å≤) TokenClassBasic ()
nameCBasicL :: (‚å≤) TokenClassBasic ()
stringCBasicL :: (‚å≤) TokenClassBasic ()
syntaxCBasicL :: (‚å≤) TokenClassBasic ()
commentCBasicL :: (‚å≤) TokenClassBasic ()
spaceCBasicL :: (‚å≤) TokenClassBasic ()
data TokenBasic
SpaceTBasic :: ùïä -> TokenBasic
CommentTBasic :: ùïä -> TokenBasic
SyntaxTBasic :: ùïä -> TokenBasic
StringTBasic :: ùïä -> TokenBasic
NameTBasic :: ùïä -> TokenBasic
NaturalTBasic :: ‚Ñï -> TokenBasic
IntegerTBasic :: ‚Ñ§ -> TokenBasic
DoubleTBasic :: ùîª -> TokenBasic
CharTBasic :: ‚ÑÇ -> TokenBasic
charTBasicL :: (‚å≤) TokenBasic ‚ÑÇ
doubleTBasicL :: (‚å≤) TokenBasic ùîª
integerTBasicL :: (‚å≤) TokenBasic ‚Ñ§
naturalTBasicL :: (‚å≤) TokenBasic ‚Ñï
nameTBasicL :: (‚å≤) TokenBasic ùïä
stringTBasicL :: (‚å≤) TokenBasic ùïä
syntaxTBasicL :: (‚å≤) TokenBasic ùïä
commentTBasicL :: (‚å≤) TokenBasic ùïä
spaceTBasicL :: (‚å≤) TokenBasic ùïä
mkTokenBasic :: ùêºC ‚ÑÇ -> ùëÇ TokenClassBasic -> ùîπ ‚àß TokenBasic
lSyntaxBasic :: (Ord u, Additive u) => ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> Regex CharClass ‚ÑÇ TokenClassBasic u
lTokenBasic :: ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> Regex CharClass ‚ÑÇ TokenClassBasic ‚Ñï64
lCommentMLBasic :: Regex CharClass ‚ÑÇ TokenClassBasic ‚Ñï64
dfaBasic :: ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ‚Ñï64 -> DFA CharClass ‚ÑÇ TokenClassBasic ‚Ñï64
lexerBasic :: ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> Lexer CharClass ‚ÑÇ TokenClassBasic ‚Ñï64 TokenBasic
data IndentCommand
OpenIC :: IndentCommand
CloseIC :: IndentCommand
NewlineIC :: IndentCommand
blockifyTokens :: forall t. ùêø (AddBT Loc) -> (t -> ùîπ) -> (t -> ùîπ) -> (IndentCommand -> t) -> ùïç (PreParserToken t) -> ùïç (PreParserToken t)
blockifyTokensTL :: (t -> ùîπ) -> (t -> ùîπ) -> (IndentCommand -> t) -> ùïç (PreParserToken t) -> ùïç (PreParserToken t)
data TokenClassWSBasic
SpaceCWSBasic :: TokenClassWSBasic
NewlineCWSBasic :: TokenClassWSBasic
CommentCWSBasic :: TokenClassWSBasic
SyntaxCWSBasic :: TokenClassWSBasic
BlockCWSBasic :: TokenClassWSBasic
StringCWSBasic :: TokenClassWSBasic
NameCWSBasic :: TokenClassWSBasic
NaturalCWSBasic :: TokenClassWSBasic
IntegerCWSBasic :: TokenClassWSBasic
DoubleCWSBasic :: TokenClassWSBasic
doubleCWSBasicL :: (‚å≤) TokenClassWSBasic ()
integerCWSBasicL :: (‚å≤) TokenClassWSBasic ()
naturalCWSBasicL :: (‚å≤) TokenClassWSBasic ()
nameCWSBasicL :: (‚å≤) TokenClassWSBasic ()
stringCWSBasicL :: (‚å≤) TokenClassWSBasic ()
blockCWSBasicL :: (‚å≤) TokenClassWSBasic ()
syntaxCWSBasicL :: (‚å≤) TokenClassWSBasic ()
commentCWSBasicL :: (‚å≤) TokenClassWSBasic ()
newlineCWSBasicL :: (‚å≤) TokenClassWSBasic ()
spaceCWSBasicL :: (‚å≤) TokenClassWSBasic ()
data TokenWSBasic
SpaceTWSBasic :: ùïä -> TokenWSBasic
NewlineTWSBasic :: ùïä -> TokenWSBasic
CommentTWSBasic :: ùïä -> TokenWSBasic
SyntaxTWSBasic :: ùïä -> TokenWSBasic
BlockTWSBasic :: ùïä -> TokenWSBasic
StringTWSBasic :: ùïä -> TokenWSBasic
NameTWSBasic :: ùïä -> TokenWSBasic
NaturalTWSBasic :: ‚Ñï -> TokenWSBasic
IntegerTWSBasic :: ‚Ñ§ -> TokenWSBasic
DoubleTWSBasic :: ùîª -> TokenWSBasic
OpenTWSBasic :: TokenWSBasic
CloseTWSBasic :: TokenWSBasic
DelimiterTWSBasic :: TokenWSBasic
delimiterTWSBasicL :: (‚å≤) TokenWSBasic ()
closeTWSBasicL :: (‚å≤) TokenWSBasic ()
openTWSBasicL :: (‚å≤) TokenWSBasic ()
doubleTWSBasicL :: (‚å≤) TokenWSBasic ùîª
integerTWSBasicL :: (‚å≤) TokenWSBasic ‚Ñ§
naturalTWSBasicL :: (‚å≤) TokenWSBasic ‚Ñï
nameTWSBasicL :: (‚å≤) TokenWSBasic ùïä
stringTWSBasicL :: (‚å≤) TokenWSBasic ùïä
blockTWSBasicL :: (‚å≤) TokenWSBasic ùïä
syntaxTWSBasicL :: (‚å≤) TokenWSBasic ùïä
commentTWSBasicL :: (‚å≤) TokenWSBasic ùïä
newlineTWSBasicL :: (‚å≤) TokenWSBasic ùïä
spaceTWSBasicL :: (‚å≤) TokenWSBasic ùïä
mkTokenWSBasic :: ùêºC ‚ÑÇ -> ùëÇ TokenClassWSBasic -> ùîπ ‚àß TokenWSBasic
lSyntaxWSBasic :: (Ord u, Additive u) => ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> Regex CharClass ‚ÑÇ TokenClassWSBasic u
lBlocksWSBasic :: (Ord u, Additive u) => ùêø ùïä -> Regex CharClass ‚ÑÇ TokenClassWSBasic u
lTokenWSBasic :: ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> Regex CharClass ‚ÑÇ TokenClassWSBasic ‚Ñï64
lCommentMLWSBasic :: Regex CharClass ‚ÑÇ TokenClassWSBasic ‚Ñï64
dfaWSBasic :: ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ‚Ñï64 -> DFA CharClass ‚ÑÇ TokenClassWSBasic ‚Ñï64
lexerWSBasic :: ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> ùêø ùïä -> Lexer CharClass ‚ÑÇ TokenClassWSBasic ‚Ñï64 TokenWSBasic
mkIndentTokenWSBasic :: IndentCommand -> TokenWSBasic
blockifyTokensWSBasic :: ùïç (PreParserToken TokenWSBasic) -> ùïç (PreParserToken TokenWSBasic)
instance (UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùïä, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîª) => UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.Regex.TokenWSBasic
instance GHC.Show.Show UVMHS.Lib.Parser.Regex.TokenWSBasic
instance GHC.Classes.Ord UVMHS.Lib.Parser.Regex.TokenWSBasic
instance GHC.Classes.Eq UVMHS.Lib.Parser.Regex.TokenWSBasic
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.Regex.TokenClassWSBasic
instance GHC.Show.Show UVMHS.Lib.Parser.Regex.TokenClassWSBasic
instance GHC.Classes.Ord UVMHS.Lib.Parser.Regex.TokenClassWSBasic
instance GHC.Classes.Eq UVMHS.Lib.Parser.Regex.TokenClassWSBasic
instance (UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùïä, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîª, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚ÑÇ) => UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.Regex.TokenBasic
instance GHC.Show.Show UVMHS.Lib.Parser.Regex.TokenBasic
instance GHC.Classes.Ord UVMHS.Lib.Parser.Regex.TokenBasic
instance GHC.Classes.Eq UVMHS.Lib.Parser.Regex.TokenBasic
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.Regex.TokenClassBasic
instance GHC.Show.Show UVMHS.Lib.Parser.Regex.TokenClassBasic
instance GHC.Classes.Ord UVMHS.Lib.Parser.Regex.TokenClassBasic
instance GHC.Classes.Eq UVMHS.Lib.Parser.Regex.TokenClassBasic
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.Regex.CharClass
instance UVMHS.Core.Classes.Collections.All UVMHS.Lib.Parser.Regex.CharClass
instance UVMHS.Lib.Parser.Regex.Classified UVMHS.Lib.Parser.Regex.CharClass UVMHS.Core.Init.‚ÑÇ
instance GHC.Show.Show UVMHS.Lib.Parser.Regex.CharClass
instance GHC.Classes.Ord UVMHS.Lib.Parser.Regex.CharClass
instance GHC.Classes.Eq UVMHS.Lib.Parser.Regex.CharClass
instance (UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Window.WindowR UVMHS.Lib.Pretty.Doc.Doc UVMHS.Lib.Pretty.Doc.Doc), UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext, UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÜ (UVMHS.Lib.Parser.ParserInput.ParserToken t)), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Sized.ùêºC t)) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.Regex.LexDFAState t)
instance (UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÉ t), UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï64, UVMHS.Lib.Pretty.Doc.Pretty ((t UVMHS.Core.Init.‚à® c) UVMHS.Core.Init.‚á∞ UVMHS.Core.Vector.ùïç UVMHS.Core.Init.‚Ñï64), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Vector.ùïç (UVMHS.Core.Init.ùëÇ (UVMHS.Lib.Parser.Regex.RegexResult o u))), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Vector.ùïç UVMHS.Core.Init.ùîπ)) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.Regex.DFA c t o u)
instance forall k1 k2 t c (o :: k1) (u :: k2). (UVMHS.Lib.Pretty.Doc.Pretty t, UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÉ t), UVMHS.Lib.Pretty.Doc.Pretty c) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.Regex.RegexAtom c t o u)
instance UVMHS.Core.Classes.Arithmetic.Zero u => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Plus u) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Zero u) => UVMHS.Core.Classes.Monoid.Eps (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Seq (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Zero u) => UVMHS.Core.Classes.Monoid.Star (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Seqoid (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord c, GHC.Classes.Ord t, GHC.Classes.Ord o, GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Kleene (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.Regex.RegexResult o u), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.Regex.RegexAtom c t o u), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÉ (UVMHS.Lib.Parser.Regex.Regex c t o u)), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùêø (UVMHS.Lib.Parser.Regex.Regex c t o u)), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.Regex.Regex c t o u)) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.Regex.RegexU c t o u)
instance forall c t k1 (o :: k1) k2 (u :: k2). (GHC.Show.Show t, GHC.Show.Show c) => GHC.Show.Show (UVMHS.Lib.Parser.Regex.RegexAtom c t o u)
instance forall c t k1 (o :: k1) k2 (u :: k2). (GHC.Classes.Ord t, GHC.Classes.Ord c) => GHC.Classes.Ord (UVMHS.Lib.Parser.Regex.RegexAtom c t o u)
instance forall c t k1 (o :: k1) k2 (u :: k2). (GHC.Classes.Eq t, GHC.Classes.Eq c) => GHC.Classes.Eq (UVMHS.Lib.Parser.Regex.RegexAtom c t o u)
instance (GHC.Show.Show o, GHC.Show.Show u, GHC.Show.Show t, GHC.Show.Show c) => GHC.Show.Show (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Ord o, GHC.Classes.Ord u, GHC.Classes.Ord t, GHC.Classes.Ord c) => GHC.Classes.Ord (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Classes.Eq o, GHC.Classes.Eq u, GHC.Classes.Eq t, GHC.Classes.Eq c) => GHC.Classes.Eq (UVMHS.Lib.Parser.Regex.Regex c t o u)
instance (GHC.Show.Show o, GHC.Show.Show u, GHC.Show.Show t, GHC.Show.Show c) => GHC.Show.Show (UVMHS.Lib.Parser.Regex.RegexU c t o u)
instance (GHC.Classes.Ord o, GHC.Classes.Ord u, GHC.Classes.Ord t, GHC.Classes.Ord c) => GHC.Classes.Ord (UVMHS.Lib.Parser.Regex.RegexU c t o u)
instance (GHC.Classes.Eq o, GHC.Classes.Eq u, GHC.Classes.Eq t, GHC.Classes.Eq c) => GHC.Classes.Eq (UVMHS.Lib.Parser.Regex.RegexU c t o u)
instance UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÇ (UVMHS.Lib.Parser.Regex.RegexResult o u)) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance UVMHS.Core.Classes.Arithmetic.Zero u => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance GHC.Classes.Ord u => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Zero u) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance UVMHS.Core.Classes.Arithmetic.Zero u => UVMHS.Core.Classes.Monoid.Eps (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Plus u) => UVMHS.Core.Classes.Monoid.Seq (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Seqoid (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Show.Show o, GHC.Show.Show u) => GHC.Show.Show (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Classes.Ord o, GHC.Classes.Ord u) => GHC.Classes.Ord (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (GHC.Classes.Eq o, GHC.Classes.Eq u) => GHC.Classes.Eq (UVMHS.Lib.Parser.Regex.RegexInfo o u)
instance (UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï64, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Pretty.Annotation.Formats, UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÇ o), UVMHS.Lib.Pretty.Doc.Pretty u) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance UVMHS.Core.Classes.Arithmetic.Zero u => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance GHC.Classes.Ord u => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Zero u) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance UVMHS.Core.Classes.Arithmetic.Zero u => UVMHS.Core.Classes.Monoid.Eps (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Plus u) => UVMHS.Core.Classes.Monoid.Seq (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Classes.Ord u, UVMHS.Core.Classes.Arithmetic.Additive u) => UVMHS.Core.Classes.Monoid.Seqoid (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Show.Show o, GHC.Show.Show u) => GHC.Show.Show (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Classes.Ord o, GHC.Classes.Ord u) => GHC.Classes.Ord (UVMHS.Lib.Parser.Regex.RegexResult o u)
instance (GHC.Classes.Eq o, GHC.Classes.Eq u) => GHC.Classes.Eq (UVMHS.Lib.Parser.Regex.RegexResult o u)

module UVMHS.Lib.Parser.Core
data ParserEnv
ParserEnv :: ùîπ -> Formats -> (ùïä ‚àß ùêº ùïä) -> ùïä -> ParserEnv
[parserEnvReportErrors] :: ParserEnv -> ùîπ
[parserEnvRenderFormat] :: ParserEnv -> Formats
[parserEnvErrorStack] :: ParserEnv -> ùïä ‚àß ùêº ùïä
[parserEnvSourceName] :: ParserEnv -> ùïä
parserEnvSourceNameL :: (‚ü¢) ParserEnv ùïä
parserEnvErrorStackL :: (‚ü¢) ParserEnv ((‚àß) ùïä (ùêº ùïä))
parserEnvRenderFormatL :: (‚ü¢) ParserEnv Formats
parserEnvReportErrorsL :: (‚ü¢) ParserEnv ùîπ
parserEnv‚ÇÄ :: ùïä -> ParserEnv
type ParserOut t = AddNull (ParserError t)
data ParserState t
ParserState :: WindowR Doc Doc -> ParserContext -> ParserContext -> WindowL Doc Doc -> AddBT Loc -> ùëÜ (ParserToken t) -> ParserState t
[parserStatePrefix] :: ParserState t -> WindowR Doc Doc
[parserStateSkipContext] :: ParserState t -> ParserContext
[parserStateContext] :: ParserState t -> ParserContext
[parserStateSuffix] :: ParserState t -> WindowL Doc Doc
[parserStateEndPos] :: ParserState t -> AddBT Loc
[parserStateInput] :: ParserState t -> ùëÜ (ParserToken t)
parserStateInputL :: forall (t_a4oWl :: Type). (‚ü¢) (ParserState t_a4oWl) (ùëÜ (ParserToken t_a4oWl))
parserStateEndPosL :: forall (t_a4oWl :: Type). (‚ü¢) (ParserState t_a4oWl) (AddBT Loc)
parserStateSuffixL :: forall (t_a4oWl :: Type). (‚ü¢) (ParserState t_a4oWl) (WindowL Doc Doc)
parserStateContextL :: forall (t_a4oWl :: Type). (‚ü¢) (ParserState t_a4oWl) ParserContext
parserStateSkipContextL :: forall (t_a4oWl :: Type). (‚ü¢) (ParserState t_a4oWl) ParserContext
parserStatePrefixL :: forall (t_a4oWl :: Type). (‚ü¢) (ParserState t_a4oWl) (WindowR Doc Doc)
parserState‚ÇÄ :: ùëÜ (ParserToken t) -> ParserState t
newtype Parser t a
Parser :: ReaderT ParserEnv (StateT (ParserState t) (FailT ((‚àß) (ParserOut t)))) a -> Parser t a
[unParser] :: Parser t a -> ReaderT ParserEnv (StateT (ParserState t) (FailT ((‚àß) (ParserOut t)))) a
runParser :: ParserEnv -> ParserState t -> Parser t a -> ParserOut t ‚àß ùëÇ (ParserState t ‚àß a)
pNewExpressionContext :: Parser t a -> Parser t a
pGetContext :: Parser t ((WindowR Doc Doc ‚àß ParserContext) ‚àß WindowL Doc Doc)
pGetContextRendered :: Parser t SrcCxt
pWithContext :: Parser t a -> Parser t (((WindowR Doc Doc ‚àß ParserContext) ‚àß WindowL Doc Doc) ‚àß a)
pFail :: ParserContext -> WindowL Doc Doc -> Parser t a
pErr :: ùïä -> Parser t a -> Parser t a
pNewErrContext :: ùïä -> Parser t a -> Parser t a
pNewContext :: ùïä -> Parser t a -> Parser t a
pWithContextRendered :: Parser t a -> Parser t (ùê¥ SrcCxt a)
pRender :: Formats -> Parser t a -> Parser t a
pAdvance :: Parser t (AddBT Loc ‚à® ParserToken t)
pPluck :: Parser t (ParserToken t)
pRecord :: ParserToken t -> Parser t ()
pEnd :: Parser t ()
pFinal :: Parser t a -> Parser t a
pAny :: Parser t t
pShaped :: (t -> ùëÇ a) -> Parser t a
pSatisfies :: (t -> ùîπ) -> Parser t t
pDie :: Parser t a
pToken :: Eq t => t -> Parser t t
pOptional :: Parser t a -> Parser t (ùëÇ a)
pMany :: Parser t a -> Parser t (ùêø a)
pOneOrMore :: Parser t a -> Parser t (ùêø a)
pManySepBy :: Parser t () -> Parser t a -> Parser t (ùêø a)
pOneOrMoreSepBy :: Parser t () -> Parser t a -> Parser t (ùêø a)
pWord :: forall s t. (Eq t, s ‚áÑ ùêº t) => s -> Parser t s
instance UVMHS.Core.Effects.MonadState (UVMHS.Lib.Parser.Core.ParserState t) (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Effects.MonadWriter (UVMHS.Lib.Parser.Core.ParserOut t) (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Effects.MonadReader UVMHS.Lib.Parser.Core.ParserEnv (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Effects.MonadFail (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Functors.Monad (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Functors.Bind (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Functors.Return (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Functors.Functor (UVMHS.Lib.Parser.Core.Parser t)
instance (UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Window.WindowR UVMHS.Lib.Pretty.Doc.Doc UVMHS.Lib.Pretty.Doc.Doc), UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext, UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Window.WindowL UVMHS.Lib.Pretty.Doc.Doc UVMHS.Lib.Pretty.Doc.Doc), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Pointed.AddBT UVMHS.Lib.Parser.Loc.Loc), UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùëÜ (UVMHS.Lib.Parser.ParserInput.ParserToken t))) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Parser.Core.ParserState t)
instance (UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîπ, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Pretty.Annotation.Formats, UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùïä UVMHS.Core.Init.‚àß UVMHS.Core.Init.ùêº UVMHS.Core.Init.ùïä), UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Parser.Core.ParserEnv

module UVMHS.Lib.Parser.CParser
data CParser t a
CParser :: (t ‚á∞ CParser t a) -> Parser t a -> CParser t a
[cParserNext] :: CParser t a -> t ‚á∞ CParser t a
[cParserFallback] :: CParser t a -> Parser t a
onCParser :: (Parser t a -> Parser t a) -> CParser t a -> CParser t a
toCParser :: Parser t a -> CParser t a
frCParser :: Ord t => CParser t a -> Parser t a
cpRender :: Ord t => Formats -> CParser t a -> CParser t a
cpErr :: Ord t => ùïä -> CParser t a -> CParser t a
cpToken :: Ord t => t -> CParser t t
cpFinal :: Ord t => CParser t a -> CParser t a
cpShaped :: (t -> ùëÇ a) -> CParser t a
cpSatisfies :: (t -> ùîπ) -> CParser t t
cpAny :: CParser t t
cpWord :: forall s t. (Eq t, s ‚áÑ ùêº t) => s -> CParser t s
cpOptional :: Ord t => CParser t a -> CParser t (ùëÇ a)
cpMany :: Ord t => CParser t a -> CParser t (ùêø a)
cpOneOrMore :: Ord t => CParser t a -> CParser t (ùêø a)
cpManySepBy :: Ord t => CParser t () -> CParser t a -> CParser t (ùêø a)
cpOneOrMoreSepBy :: Ord t => CParser t () -> CParser t a -> CParser t (ùêø a)
cpSyntax :: ùïä -> CParser TokenBasic TokenBasic
cpNatural :: CParser TokenBasic ‚Ñï
cpInteger :: CParser TokenBasic ‚Ñ§
cpDouble :: CParser TokenBasic ùîª
cpString :: CParser TokenBasic ùïä
cpChar :: CParser TokenBasic ‚ÑÇ
cpSyntaxWS :: ùïä -> CParser TokenWSBasic TokenWSBasic
cpNaturalWS :: CParser TokenWSBasic ‚Ñï
cpIntegerWS :: CParser TokenWSBasic ‚Ñ§
cpDoubleWS :: CParser TokenWSBasic ùîª
cpStringWS :: CParser TokenWSBasic ùïä
cpBlockWS :: ùïä -> CParser TokenWSBasic TokenWSBasic
cpOpenWS :: CParser TokenWSBasic ()
cpCloseWS :: CParser TokenWSBasic ()
cpDelimWS :: CParser TokenWSBasic ()
cpNewExpressionContext :: Ord t => CParser t a -> CParser t a
cpNewErrContext :: Ord t => ùïä -> CParser t a -> CParser t a
cpNewContext :: Ord t => ùïä -> CParser t a -> CParser t a
cpWithContextRendered :: Ord t => CParser t a -> CParser t (ùê¥ SrcCxt a)
cpNewWithContextRendered :: Ord t => ùïä -> CParser t a -> CParser t (ùê¥ SrcCxt a)
cpGetContextRendered :: CParser t SrcCxt
cpNewGetContextRendered :: Ord t => CParser t SrcCxt
cpManyContext :: (Ord t, Comonad f) => (forall b. CParser t b -> CParser t (f b)) -> CParser t a -> CParser t (ùêø (f a))
cpOneOrMoreContext :: (Ord t, Comonad f) => (forall b. CParser t b -> CParser t (f b)) -> CParser t a -> CParser t (ùêø (f a))
cpManySepByContext :: (Ord t, Comonad f) => (forall b. CParser t b -> CParser t (f b)) -> CParser t () -> CParser t a -> CParser t (ùêø (f a))
cpOneOrMoreSepByContext :: (Ord t, Comonad f) => (forall b. CParser t b -> CParser t (f b)) -> CParser t () -> CParser t a -> CParser t (ùêø (f a))
runParser‚ÇÄ :: (ToIter (ParserToken t) ts, Ord t) => ùïä -> ts -> CParser t a -> ParserOut t ‚àß ùëÇ (ParserState t ‚àß a)
parse :: (Pretty a, ToIter (ParserToken t) ts, Ord t) => CParser t a -> ùïä -> ts -> Doc ‚à® a
parseIO :: (Pretty a, ToIter (ParserToken t) ts, Ord t) => CParser t a -> ùïä -> ts -> IO a
parseIOMain :: (Pretty a, ToIter (ParserToken t) ts, Ord t) => CParser t a -> ùïä -> ts -> IO ()
instance UVMHS.Core.Classes.Functors.Return (UVMHS.Lib.Parser.CParser.CParser t)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Functors.Bind (UVMHS.Lib.Parser.CParser.CParser t)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Functors.Functor (UVMHS.Lib.Parser.CParser.CParser t)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Functors.Monad (UVMHS.Lib.Parser.CParser.CParser t)
instance GHC.Classes.Ord t => UVMHS.Core.Effects.MonadFail (UVMHS.Lib.Parser.CParser.CParser t)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.CParser.CParser t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.CParser.CParser t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.CParser.CParser t a)
instance UVMHS.Core.Classes.Monoid.Eps (UVMHS.Lib.Parser.CParser.CParser t ())
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Seq (UVMHS.Lib.Parser.CParser.CParser t ())
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Seqoid (UVMHS.Lib.Parser.CParser.CParser t ())

module UVMHS.Lib.Parser.Mixfix
pDEF :: ‚Ñï64
pLET :: ‚Ñï64
pSEP :: ‚Ñï64
pASC :: ‚Ñï64
pARR :: ‚Ñï64
pOR :: ‚Ñï64
pAND :: ‚Ñï64
pCMP :: ‚Ñï64
pCONS :: ‚Ñï64
pBWAND :: ‚Ñï64
pBWOR :: ‚Ñï64
pBSHFT :: ‚Ñï64
pPLUS :: ‚Ñï64
pTIMES :: ‚Ñï64
pNEG :: ‚Ñï64
pPOW :: ‚Ñï64
pFAC :: ‚Ñï64
pAPP :: ‚Ñï64
pREF :: ‚Ñï64
pIDX :: ‚Ñï64
pTOP :: ‚Ñï64
data MixesF t f a
MixesF :: CParser t (f a -> a) -> CParser t (f a -> a) -> CParser t (f a -> f a -> a) -> CParser t (f a -> f a -> a) -> CParser t (f a -> f a -> a) -> MixesF t f a
[mixesFPrefix] :: MixesF t f a -> CParser t (f a -> a)
[mixesFPostfix] :: MixesF t f a -> CParser t (f a -> a)
[mixesFInfix] :: MixesF t f a -> CParser t (f a -> f a -> a)
[mixesFInfixL] :: MixesF t f a -> CParser t (f a -> f a -> a)
[mixesFInfixR] :: MixesF t f a -> CParser t (f a -> f a -> a)
data MixfixF t f a
MixfixF :: CParser t a -> (‚Ñï64 ‚á∞ MixesF t f a) -> MixfixF t f a
[mixfixFTerminals] :: MixfixF t f a -> CParser t a
[mixfixFLevels] :: MixfixF t f a -> ‚Ñï64 ‚á∞ MixesF t f a
onlyTerminalsF :: MixfixF t f a -> MixfixF t f a
fmixPrefix :: ‚Ñï64 -> CParser t (f a -> a) -> MixfixF t f a
fmixPostfix :: ‚Ñï64 -> CParser t (f a -> a) -> MixfixF t f a
fmixInfix :: ‚Ñï64 -> CParser t (f a -> f a -> a) -> MixfixF t f a
fmixInfixL :: ‚Ñï64 -> CParser t (f a -> f a -> a) -> MixfixF t f a
fmixInfixR :: ‚Ñï64 -> CParser t (f a -> f a -> a) -> MixfixF t f a
fmixTerminal :: CParser t a -> MixfixF t f a
fmixfix :: forall t f a. (Ord t, Comonad f) => (CParser t (f a) -> CParser t (f a)) -> (CParser t (f a) -> CParser t (f a)) -> (CParser t a -> CParser t (f a)) -> MixfixF t f a -> CParser t (f a)
fmixfixWithContext :: forall t a. Ord t => ùïä -> MixfixF t (ùê¥ SrcCxt) a -> CParser t (ùê¥ SrcCxt a)
data Mixes t a
Mixes :: CParser t (a -> a) -> CParser t (a -> a) -> CParser t (a -> a -> a) -> CParser t (a -> a -> a) -> CParser t (a -> a -> a) -> Mixes t a
[mixesPrefix] :: Mixes t a -> CParser t (a -> a)
[mixesPostfix] :: Mixes t a -> CParser t (a -> a)
[mixesInfix] :: Mixes t a -> CParser t (a -> a -> a)
[mixesInfixL] :: Mixes t a -> CParser t (a -> a -> a)
[mixesInfixR] :: Mixes t a -> CParser t (a -> a -> a)
data Mixfix t a
Mixfix :: CParser t a -> (‚Ñï64 ‚á∞ Mixes t a) -> Mixfix t a
[mixfixTerminals] :: Mixfix t a -> CParser t a
[mixfixLevels] :: Mixfix t a -> ‚Ñï64 ‚á∞ Mixes t a
mixPrefix :: ‚Ñï64 -> CParser t (a -> a) -> Mixfix t a
mixPostfix :: ‚Ñï64 -> CParser t (a -> a) -> Mixfix t a
mixInfix :: ‚Ñï64 -> CParser t (a -> a -> a) -> Mixfix t a
mixInfixL :: ‚Ñï64 -> CParser t (a -> a -> a) -> Mixfix t a
mixInfixR :: ‚Ñï64 -> CParser t (a -> a -> a) -> Mixfix t a
mixTerminal :: CParser t a -> Mixfix t a
mixesPure :: Ord t => Mixes t a -> MixesF t ID a
mixfixPure :: Ord t => Mixfix t a -> MixfixF t ID a
mixfix :: Ord t => Mixfix t a -> CParser t a
mixfixWithContext :: Ord t => ùïä -> Mixfix t a -> CParser t (ùê¥ SrcCxt a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.Mixfix t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.Mixfix t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.Mixfix t a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.Mixes t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.Mixes t a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.Mixes t a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.MixfixF t f a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.MixfixF t f a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.MixfixF t f a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.MixesF t f a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.MixesF t f a)
instance GHC.Classes.Ord t => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.MixesF t f a)

module UVMHS.Lib.Parser.Examples
testParsingSmall :: IO ()
testParsingMultiline :: IO ()
testParsingBranching :: IO ()
testParsingGreedy :: IO ()
testParsingGreedyAmbiguity :: IO ()
testParsingSuccess :: IO ()
testParsingErrorNewline :: IO ()
testParsingErrorEof :: IO ()
testTokenizeSimple :: IO ()
testTokenize :: IO ()
testTokenizeFailure1 :: IO ()
testTokenizeFailure2 :: IO ()

module UVMHS.Lib.Parser

module UVMHS.Lib.Variables
data ùïè
ùïè :: ùëÇ ‚Ñï64 -> ùïä -> ùïè
[ùï©mark] :: ùïè -> ùëÇ ‚Ñï64
[ùï©name] :: ùïè -> ùïä
ùï©nameL :: (‚ü¢) ùïè ùïä
ùï©markL :: (‚ü¢) ùïè (ùëÇ ‚Ñï64)
data ùïê
DVar :: ‚Ñï64 -> ùïê
NVar :: ‚Ñï64 -> ùïè -> ùïê
GVar :: ùïè -> ùïê
MVar :: ùïè -> ùïê
mVarL :: (‚å≤) ùïê ùïè
gVarL :: (‚å≤) ùïê ùïè
nVarL :: (‚å≤) ùïê ((‚àß) ‚Ñï64 ùïè)
dVarL :: (‚å≤) ùïê ‚Ñï64
var :: ùïä -> ùïè
nvar :: ùïè -> ùïê
nvarL :: ùïê ‚å≤ ùïè
gensymVar :: (Monad m, MonadState s m) => (s ‚ü¢ ‚Ñï64) -> ùïä -> m ùïè
cpVar :: CParser TokenBasic ùïè
cpNVar :: CParser TokenBasic ùïê
cpGVar :: CParser TokenBasic ùïê
cpVarWS :: CParser TokenWSBasic ùïè
cpNVarWS :: CParser TokenWSBasic ùïê
cpGVarWS :: CParser TokenWSBasic ùïê
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Variables.ùïè
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Variables.ùïê
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Lib.Variables.ùïè
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Lib.Variables.ùïê
instance GHC.Show.Show UVMHS.Lib.Variables.ùïê
instance GHC.Classes.Ord UVMHS.Lib.Variables.ùïê
instance GHC.Classes.Eq UVMHS.Lib.Variables.ùïê
instance GHC.Show.Show UVMHS.Lib.Variables.ùïè
instance GHC.Classes.Ord UVMHS.Lib.Variables.ùïè
instance GHC.Classes.Eq UVMHS.Lib.Variables.ùïè

module UVMHS.Lib.THLiftInstances
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (UVMHS.Core.Pointed.AddBT a)
instance (Language.Haskell.TH.Syntax.Lift i, Language.Haskell.TH.Syntax.Lift a) => Language.Haskell.TH.Syntax.Lift (UVMHS.Lib.Window.WindowL i a)
instance (Language.Haskell.TH.Syntax.Lift i, Language.Haskell.TH.Syntax.Lift a) => Language.Haskell.TH.Syntax.Lift (UVMHS.Lib.Window.WindowR i a)
instance Language.Haskell.TH.Syntax.Lift UVMHS.Lib.Parser.ParserContext.SrcCxt
instance Language.Haskell.TH.Syntax.Lift UVMHS.Lib.Parser.Loc.LocRange
instance (Language.Haskell.TH.Syntax.Lift ùí∏, Language.Haskell.TH.Syntax.Lift a) => Language.Haskell.TH.Syntax.Lift (UVMHS.Lib.Annotated.ùê¥ ùí∏ a)
instance Language.Haskell.TH.Syntax.Lift UVMHS.Lib.Parser.Loc.Loc
instance Language.Haskell.TH.Syntax.Lift UVMHS.Lib.Variables.ùïè
instance Language.Haskell.TH.Syntax.Lift UVMHS.Lib.Variables.ùïê
instance (Language.Haskell.TH.Syntax.Lift a, Language.Haskell.TH.Syntax.Lift b) => Language.Haskell.TH.Syntax.Lift (a UVMHS.Core.Init.‚àß b)
instance Language.Haskell.TH.Syntax.Lift UVMHS.Lib.Pretty.Annotation.Annotation
instance Language.Haskell.TH.Syntax.Lift UVMHS.Lib.Pretty.Annotation.Formats
instance Language.Haskell.TH.Syntax.Lift UVMHS.Lib.Pretty.Color.Color
instance Language.Haskell.TH.Syntax.Lift UVMHS.Lib.Pretty.Color.Color3Bit
instance Language.Haskell.TH.Syntax.Lift UVMHS.Lib.Pretty.Common.ChunkI
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (UVMHS.Core.Init.ùëÇ a)
instance (Language.Haskell.TH.Syntax.Lift i, Language.Haskell.TH.Syntax.Lift a) => Language.Haskell.TH.Syntax.Lift (UVMHS.Lib.TreeAnnote.ùëá i a)
instance (Language.Haskell.TH.Syntax.Lift i, Language.Haskell.TH.Syntax.Lift a) => Language.Haskell.TH.Syntax.Lift (UVMHS.Lib.TreeAnnote.ùëáV i a)
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (UVMHS.Core.Init.ùêº a)
instance Language.Haskell.TH.Syntax.Lift UVMHS.Lib.Pretty.Doc.Doc

module UVMHS.Lib.Substitution
data SubstElem s e
SubstElem :: (s ‚á∞ ‚Ñï64) -> (() -> ùëÇ e) -> SubstElem s e
[substElemIntro] :: SubstElem s e -> s ‚á∞ ‚Ñï64
[substElemValue] :: SubstElem s e -> () -> ùëÇ e
substElemValueL :: forall (s_a5odN :: Type) (e_a5odO :: Type). (‚ü¢) (SubstElem s_a5odN e_a5odO) (() -> ùëÇ e_a5odO)
substElemIntroL :: forall (s_a5odN :: Type) (e_a5odO :: Type). (‚ü¢) (SubstElem s_a5odN e_a5odO) ((‚á∞) s_a5odN ‚Ñï64)
introSubstElem :: Ord s => (s ‚á∞ ‚Ñï64) -> SubstElem s e -> SubstElem s e
subSubstElem :: ((s ‚á∞ ‚Ñï64) -> e -> ùëÇ e) -> SubstElem s e -> SubstElem s e
data SSubstElem s e
Var_SSE :: ‚Ñï64 -> SSubstElem s e
Trm_SSE :: SubstElem s e -> SSubstElem s e
introSSubstElem :: Ord s => s -> (s ‚á∞ ‚Ñï64) -> SSubstElem s e -> SSubstElem s e
subSSubstElem :: (‚Ñï64 -> SSubstElem s e) -> ((s ‚á∞ ‚Ñï64) -> e -> ùëÇ e) -> SSubstElem s e -> SSubstElem s e
data DSubst s e
DSubst :: ‚Ñï64 -> ùïç (SSubstElem s e) -> ‚Ñ§64 -> DSubst s e
[dsubstShift] :: DSubst s e -> ‚Ñï64
[dsubstElems] :: DSubst s e -> ùïç (SSubstElem s e)
[dsubstIntro] :: DSubst s e -> ‚Ñ§64
dsubstIntroL :: forall (s_a5oE9 :: Type) (e_a5oEa :: Type). (‚ü¢) (DSubst s_a5oE9 e_a5oEa) ‚Ñ§64
dsubstElemsL :: forall (s_a5oE9 :: Type) (e_a5oEa :: Type). (‚ü¢) (DSubst s_a5oE9 e_a5oEa) (ùïç (SSubstElem s_a5oE9 e_a5oEa))
dsubstShiftL :: forall (s_a5oE9 :: Type) (e_a5oEa :: Type). (‚ü¢) (DSubst s_a5oE9 e_a5oEa) ‚Ñï64
isNullDSubst :: DSubst s e -> ùîπ
dsubstVar :: DSubst ùë† e -> ‚Ñï64 -> SSubstElem ùë† e
data GSubst s‚ÇÅ s‚ÇÇ e
GSubst :: (s‚ÇÅ ‚á∞ SubstElem s‚ÇÇ e) -> (s‚ÇÅ ‚á∞ SubstElem s‚ÇÇ e) -> (s‚ÇÇ ‚á∞ DSubst s‚ÇÇ e) -> GSubst s‚ÇÅ s‚ÇÇ e
[gsubstGVars] :: GSubst s‚ÇÅ s‚ÇÇ e -> s‚ÇÅ ‚á∞ SubstElem s‚ÇÇ e
[gsubstMetas] :: GSubst s‚ÇÅ s‚ÇÇ e -> s‚ÇÅ ‚á∞ SubstElem s‚ÇÇ e
[gsubstSubst] :: GSubst s‚ÇÅ s‚ÇÇ e -> s‚ÇÇ ‚á∞ DSubst s‚ÇÇ e
gsubstSubstL :: forall (s‚ÇÅ_a5pfN :: Type) (s‚ÇÇ_a5pfO :: Type) (e_a5pfP :: Type). (‚ü¢) (GSubst s‚ÇÅ_a5pfN s‚ÇÇ_a5pfO e_a5pfP) ((‚á∞) s‚ÇÇ_a5pfO (DSubst s‚ÇÇ_a5pfO e_a5pfP))
gsubstMetasL :: forall (s‚ÇÅ_a5pfN :: Type) (s‚ÇÇ_a5pfO :: Type) (e_a5pfP :: Type). (‚ü¢) (GSubst s‚ÇÅ_a5pfN s‚ÇÇ_a5pfO e_a5pfP) ((‚á∞) s‚ÇÅ_a5pfN (SubstElem s‚ÇÇ_a5pfO e_a5pfP))
gsubstGVarsL :: forall (s‚ÇÅ_a5pfN :: Type) (s‚ÇÇ_a5pfO :: Type) (e_a5pfP :: Type). (‚ü¢) (GSubst s‚ÇÅ_a5pfN s‚ÇÇ_a5pfO e_a5pfP) ((‚á∞) s‚ÇÅ_a5pfN (SubstElem s‚ÇÇ_a5pfO e_a5pfP))
ùìàshiftG :: Ord s‚ÇÇ => (s‚ÇÇ ‚á∞ ‚Ñï64) -> GSubst s‚ÇÅ s‚ÇÇ e -> GSubst s‚ÇÅ s‚ÇÇ e
ùìàintroG :: (s‚ÇÇ ‚á∞ ‚Ñï64) -> GSubst s‚ÇÅ s‚ÇÇ e
ùìàsbindsG :: (s‚ÇÇ ‚á∞ ùïç e) -> GSubst s‚ÇÅ s‚ÇÇ e
ùìàsgbindsG :: (s‚ÇÅ ‚á∞ e) -> GSubst s‚ÇÅ s‚ÇÇ e
ùìàsmbindsG :: (s‚ÇÅ ‚á∞ e) -> GSubst s‚ÇÅ s‚ÇÇ e
appendGSubst :: (Ord s‚ÇÅ, Ord s‚ÇÇ) => (GSubst s‚ÇÅ s‚ÇÇ e -> e -> ùëÇ e) -> GSubst s‚ÇÅ s‚ÇÇ e -> GSubst s‚ÇÅ s‚ÇÇ e -> GSubst s‚ÇÅ s‚ÇÇ e
newtype Subst s e
Subst :: GSubst (s ‚àß ùïè) (s ‚àß ùëÇ ùïè) e -> Subst s e
[unSubst] :: Subst s e -> GSubst (s ‚àß ùïè) (s ‚àß ùëÇ ùïè) e
unSubstL :: forall (s_a5pvu :: Type) (e_a5pvv :: Type). (‚ü¢) (Subst s_a5pvu e_a5pvv) (GSubst ((‚àß) s_a5pvu ùïè) ((‚àß) s_a5pvu (ùëÇ ùïè)) e_a5pvv)
data FreeVarsAction s
FreeVarsAction :: (s -> ùïê -> ùîπ) -> ((s ‚àß ùëÇ ùïè) ‚á∞ ‚Ñï64) -> FreeVarsAction s
[freeVarsActionFilter] :: FreeVarsAction s -> s -> ùïê -> ùîπ
[freeVarsActionScope] :: FreeVarsAction s -> (s ‚àß ùëÇ ùïè) ‚á∞ ‚Ñï64
freeVarsActionScopeL :: forall (s_a5pYX :: Type). (‚ü¢) (FreeVarsAction s_a5pYX) ((‚á∞) ((‚àß) s_a5pYX (ùëÇ ùïè)) ‚Ñï64)
freeVarsActionFilterL :: forall (s_a5pYX :: Type). (‚ü¢) (FreeVarsAction s_a5pYX) (s_a5pYX -> ùïê -> ùîπ)
data SubstAction s e
SubstAction :: ùëÇ ùîπ -> Subst s e -> SubstAction s e
[substActionReBdr] :: SubstAction s e -> ùëÇ ùîπ
[substActionSubst] :: SubstAction s e -> Subst s e
substActionSubstL :: forall (s_a5q0A :: Type) (e_a5q0B :: Type). (‚ü¢) (SubstAction s_a5q0A e_a5q0B) (Subst s_a5q0A e_a5q0B)
substActionReBdrL :: forall (s_a5q0A :: Type) (e_a5q0B :: Type). (‚ü¢) (SubstAction s_a5q0A e_a5q0B) (ùëÇ ùîπ)
data SubstEnv s e
FVsSubstEnv :: FreeVarsAction s -> SubstEnv s e
SubSubstEnv :: SubstAction s e -> SubstEnv s e
subSubstEnvL :: forall (s_a5q2G :: Type) (e_a5q2H :: Type). (‚å≤) (SubstEnv s_a5q2G e_a5q2H) (SubstAction s_a5q2G e_a5q2H)
fVsSubstEnvL :: forall (s_a5q2G :: Type) (e_a5q2H :: Type). (‚å≤) (SubstEnv s_a5q2G e_a5q2H) (FreeVarsAction s_a5q2G)
newtype SubstM s e a
SubstM :: UContT (ReaderT (SubstEnv s e) (FailT (WriterT (s ‚á∞ ùëÉ ùïê) ID))) a -> SubstM s e a
[unSubstM] :: SubstM s e a -> UContT (ReaderT (SubstEnv s e) (FailT (WriterT (s ‚á∞ ùëÉ ùïê) ID))) a
mkSubstM :: (forall u. SubstEnv s e -> (a -> SubstEnv s e -> (s ‚á∞ ùëÉ ùïê) ‚àß ùëÇ u) -> (s ‚á∞ ùëÉ ùïê) ‚àß ùëÇ u) -> SubstM s e a
runSubstM :: SubstEnv s e -> (a -> SubstEnv s e -> (s ‚á∞ ùëÉ ùïê) ‚àß ùëÇ u) -> SubstM s e a -> (s ‚á∞ ùëÉ ùïê) ‚àß ùëÇ u
runSubstMHalt :: SubstEnv s e -> SubstM s e a -> (s ‚á∞ ùëÉ ùïê) ‚àß ùëÇ a
class Substy s e a | a -> s, a -> e
substy :: Substy s e a => a -> SubstM s e a
subst :: Substy s e a => Subst s e -> a -> ùëÇ a
todbr :: Substy s e a => a -> ùëÇ a
tonmd :: Substy s e a => a -> ùëÇ a
fvsWith :: Substy s e a => (FreeVarsAction s -> FreeVarsAction s) -> a -> s ‚á∞ ùëÉ ùïê
fvsSMetas :: (Ord s, Substy s e a) => ùëÉ s -> a -> s ‚á∞ ùëÉ ùïè
fvsMetas :: (Ord s, Substy s e a) => s -> a -> ùëÉ ùïè
fvs :: Substy s e a => a -> s ‚á∞ ùëÉ ùïê
nullSubst :: Subst s e
appendSubst :: (Ord s, Substy s e e) => Subst s e -> Subst s e -> Subst s e
ùìàsdshift :: Ord s => (s ‚á∞ ‚Ñï64) -> Subst s e -> Subst s e
ùìàsnshift :: Ord s => (s ‚á∞ (ùïè ‚á∞ ‚Ñï64)) -> Subst s e -> Subst s e
ùìàsdintro :: Ord s => (s ‚á∞ ‚Ñï64) -> Subst s e
ùìàsnintro :: Ord s => (s ‚á∞ (ùïè ‚á∞ ‚Ñï64)) -> Subst s e
ùìàsdbinds :: Ord s => (s ‚á∞ ùïç e) -> Subst s e
ùìàsdbind :: Ord s => s -> e -> Subst s e
ùìàsnbinds :: Ord s => (s ‚á∞ (ùïè ‚á∞ ùïç e)) -> Subst s e
ùìàsnbind :: Ord s => s -> ùïè -> e -> Subst s e
ùìàsgbinds :: Ord s => (s ‚á∞ (ùïè ‚á∞ e)) -> Subst s e
ùìàsgbind :: Ord s => s -> ùïè -> e -> Subst s e
ùìàsmbinds :: Ord s => (s ‚á∞ (ùïè ‚á∞ e)) -> Subst s e
ùìàsmbind :: Ord s => s -> ùïè -> e -> Subst s e
ùìàdshift :: ‚Ñï64 -> Subst () e -> Subst () e
ùìànshift :: (ùïè ‚á∞ ‚Ñï64) -> Subst () e -> Subst () e
ùìàdintro :: ‚Ñï64 -> Subst () e
ùìànintro :: (ùïè ‚á∞ ‚Ñï64) -> Subst () e
ùìàdbinds :: ùïç e -> Subst () e
ùìàdbind :: e -> Subst () e
ùìànbinds :: (ùïè ‚á∞ ùïç e) -> Subst () e
ùìànbind :: ùïè -> e -> Subst () e
ùìàgbinds :: (ùïè ‚á∞ e) -> Subst () e
ùìàgbind :: ùïè -> e -> Subst () e
ùìàmbinds :: (ùïè ‚á∞ e) -> Subst () e
ùìàmbind :: ùïè -> e -> Subst () e
substyDBdr :: Ord s => s -> SubstM s e ()
substyNBdr :: Ord s => s -> ùïè -> SubstM s e ()
substyBdr :: (Ord s, Substy s e e) => s -> (ùïê -> e) -> ùïè -> SubstM s e ()
substyVar :: (Ord s, Substy s e e) => ùëÇ ùïè -> s -> (‚Ñï64 -> e) -> ‚Ñï64 -> SubstM s e e
substyDVar :: (Ord s, Substy s e e) => s -> (‚Ñï64 -> e) -> ‚Ñï64 -> SubstM s e e
substyNVar :: (Ord s, Substy s e e) => s -> (‚Ñï64 -> e) -> ùïè -> ‚Ñï64 -> SubstM s e e
substyGVar :: (Ord s, Substy s e e) => s -> (ùïè -> e) -> ùïè -> SubstM s e e
substyMVar :: (Ord s, Substy s e e) => s -> (ùïè -> e) -> ùïè -> SubstM s e e
substyùïê :: (Ord s, Substy s e e) => s -> (ùïê -> e) -> ùïê -> SubstM s e e
instance GHC.Classes.Ord s => UVMHS.Core.Effects.MonadFail (UVMHS.Lib.Substitution.SubstM s e)
instance GHC.Classes.Ord s => UVMHS.Core.Effects.MonadWriter (s UVMHS.Core.Init.‚á∞ UVMHS.Core.Init.ùëÉ UVMHS.Lib.Variables.ùïê) (UVMHS.Lib.Substitution.SubstM s e)
instance GHC.Classes.Ord s => UVMHS.Core.Effects.MonadReader (UVMHS.Lib.Substitution.SubstEnv s e) (UVMHS.Lib.Substitution.SubstM s e)
instance GHC.Classes.Ord s => UVMHS.Core.Effects.MonadUCont (UVMHS.Lib.Substitution.SubstM s e)
instance UVMHS.Core.Classes.Functors.Monad (UVMHS.Lib.Substitution.SubstM s e)
instance UVMHS.Core.Classes.Functors.Functor (UVMHS.Lib.Substitution.SubstM s e)
instance UVMHS.Core.Classes.Functors.Bind (UVMHS.Lib.Substitution.SubstM s e)
instance UVMHS.Core.Classes.Functors.Return (UVMHS.Lib.Substitution.SubstM s e)
instance (GHC.Classes.Ord s, UVMHS.Lib.Substitution.Substy s e e) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Substitution.Subst s e)
instance (GHC.Classes.Ord s, UVMHS.Lib.Substitution.Substy s e e) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Substitution.Subst s e)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Substitution.Subst s e)
instance (GHC.Classes.Ord s, UVMHS.Lib.Rand.Fuzzy s, UVMHS.Lib.Rand.Fuzzy e) => UVMHS.Lib.Rand.Fuzzy (UVMHS.Lib.Substitution.Subst s e)
instance (UVMHS.Lib.Pretty.Doc.Pretty s, UVMHS.Lib.Pretty.Doc.Pretty e) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Substitution.Subst s e)
instance (GHC.Show.Show s, GHC.Show.Show e) => GHC.Show.Show (UVMHS.Lib.Substitution.Subst s e)
instance (GHC.Classes.Ord s, GHC.Classes.Ord e) => GHC.Classes.Ord (UVMHS.Lib.Substitution.Subst s e)
instance (GHC.Classes.Eq s, GHC.Classes.Eq e) => GHC.Classes.Eq (UVMHS.Lib.Substitution.Subst s e)
instance (UVMHS.Lib.Pretty.Doc.Pretty (s‚ÇÅ UVMHS.Core.Init.‚á∞ UVMHS.Lib.Substitution.SubstElem s‚ÇÇ e), UVMHS.Lib.Pretty.Doc.Pretty (s‚ÇÇ UVMHS.Core.Init.‚á∞ UVMHS.Lib.Substitution.DSubst s‚ÇÇ e)) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Substitution.GSubst s‚ÇÅ s‚ÇÇ e)
instance (GHC.Classes.Ord s‚ÇÅ, GHC.Classes.Ord s‚ÇÇ, UVMHS.Lib.Rand.Fuzzy s‚ÇÅ, UVMHS.Lib.Rand.Fuzzy s‚ÇÇ, UVMHS.Lib.Rand.Fuzzy e) => UVMHS.Lib.Rand.Fuzzy (UVMHS.Lib.Substitution.GSubst s‚ÇÅ s‚ÇÇ e)
instance (GHC.Show.Show s‚ÇÅ, GHC.Show.Show s‚ÇÇ, GHC.Show.Show e) => GHC.Show.Show (UVMHS.Lib.Substitution.GSubst s‚ÇÅ s‚ÇÇ e)
instance (GHC.Classes.Ord s‚ÇÅ, GHC.Classes.Ord s‚ÇÇ, GHC.Classes.Ord e) => GHC.Classes.Ord (UVMHS.Lib.Substitution.GSubst s‚ÇÅ s‚ÇÇ e)
instance (GHC.Classes.Eq s‚ÇÅ, GHC.Classes.Eq s‚ÇÇ, GHC.Classes.Eq e) => GHC.Classes.Eq (UVMHS.Lib.Substitution.GSubst s‚ÇÅ s‚ÇÇ e)
instance (UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñï64, UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Vector.ùïç (UVMHS.Lib.Substitution.SSubstElem s e)), UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§64) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Substitution.DSubst s e)
instance (GHC.Classes.Ord s, UVMHS.Lib.Rand.Fuzzy s, UVMHS.Lib.Rand.Fuzzy e) => UVMHS.Lib.Rand.Fuzzy (UVMHS.Lib.Substitution.DSubst s e)
instance (GHC.Show.Show s, GHC.Show.Show e) => GHC.Show.Show (UVMHS.Lib.Substitution.SSubstElem s e)
instance (GHC.Classes.Ord s, GHC.Classes.Ord e) => GHC.Classes.Ord (UVMHS.Lib.Substitution.SSubstElem s e)
instance (GHC.Classes.Eq s, GHC.Classes.Eq e) => GHC.Classes.Eq (UVMHS.Lib.Substitution.SSubstElem s e)
instance (GHC.Show.Show s, GHC.Show.Show e) => GHC.Show.Show (UVMHS.Lib.Substitution.DSubst s e)
instance (GHC.Classes.Ord s, GHC.Classes.Ord e) => GHC.Classes.Ord (UVMHS.Lib.Substitution.DSubst s e)
instance (GHC.Classes.Eq s, GHC.Classes.Eq e) => GHC.Classes.Eq (UVMHS.Lib.Substitution.DSubst s e)
instance (UVMHS.Lib.Pretty.Doc.Pretty s, UVMHS.Lib.Pretty.Doc.Pretty e) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Substitution.SSubstElem s e)
instance (GHC.Classes.Ord s, UVMHS.Lib.Rand.Fuzzy s, UVMHS.Lib.Rand.Fuzzy e) => UVMHS.Lib.Rand.Fuzzy (UVMHS.Lib.Substitution.SSubstElem s e)
instance (UVMHS.Lib.Pretty.Doc.Pretty s, UVMHS.Lib.Pretty.Doc.Pretty e) => UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lib.Substitution.SubstElem s e)
instance (GHC.Classes.Ord s, UVMHS.Lib.Rand.Fuzzy s, UVMHS.Lib.Rand.Fuzzy e) => UVMHS.Lib.Rand.Fuzzy (UVMHS.Lib.Substitution.SubstElem s e)
instance (GHC.Show.Show s, GHC.Show.Show e) => GHC.Show.Show (UVMHS.Lib.Substitution.SubstElem s e)
instance (GHC.Classes.Ord s, GHC.Classes.Ord e) => GHC.Classes.Ord (UVMHS.Lib.Substitution.SubstElem s e)
instance (GHC.Classes.Eq s, GHC.Classes.Eq e) => GHC.Classes.Eq (UVMHS.Lib.Substitution.SubstElem s e)

module UVMHS.Lib.MMSP
newtype MMSP
MMSP :: MMSPMaxs -> MMSP
[mmspMaxs] :: MMSP -> MMSPMaxs
data MMSPMaxs
MMSPMaxs :: ‚Ñï -> ùëÉ MMSPMins -> MMSPMaxs
[mmspMaxsConstant] :: MMSPMaxs -> ‚Ñï
[mmspMaxsMins] :: MMSPMaxs -> ùëÉ MMSPMins
data MMSPMins
MMSPMins :: AddTop ‚Ñï -> ùëÉ MMSPSums -> MMSPMins
[mmspMinsConstant] :: MMSPMins -> AddTop ‚Ñï
[mmspMinsSums] :: MMSPMins -> ùëÉ MMSPSums
data MMSPSums
MMSPSums :: ‚Ñï -> (MMSPProds ‚á∞ ‚Ñï) -> MMSPSums
[mmspSumsConstant] :: MMSPSums -> ‚Ñï
[mmspSumsPRods] :: MMSPSums -> MMSPProds ‚á∞ ‚Ñï
data MMSPProds
MMSPProds :: (MMSPAtom ‚á∞ ‚Ñï) -> MMSPProds
[mmspProdsExps] :: MMSPProds -> MMSPAtom ‚á∞ ‚Ñï
data MMSPAtom
Var_MMSPAtom :: ùê¥ (ùëÉ SrcCxt) ùïè -> MMSPAtom
var_MMSPAtomL :: (‚å≤) MMSPAtom (ùê¥ (ùëÉ SrcCxt) ùïè)
maxsMMSPL :: MMSP ‚å≤ MMSPMaxs
minsMMSPL :: MMSP ‚å≤ MMSPMins
sumsMMSPL :: MMSP ‚å≤ MMSPSums
prodsMMSPL :: MMSP ‚å≤ MMSPProds
atomMMSPL :: MMSP ‚å≤ MMSPAtom
varMMSPL :: MMSP ‚å≤ ùê¥ (ùëÉ SrcCxt) ùïè
litMMSPL :: MMSP ‚å≤ ‚Ñï
topMMSPL :: MMSP ‚å≤ ()
littMMSPL :: MMSP ‚å≤ AddTop ‚Ñï
maxsMMSP :: MMSPMaxs -> MMSP
minsMMSP :: MMSPMins -> MMSP
sumsMMSP :: MMSPSums -> MMSP
prodsMMSP :: MMSPProds -> MMSP
atomMMSP :: MMSPAtom -> MMSP
varMMSP :: ùê¥ (ùëÉ SrcCxt) ùïè -> MMSP
litMMSP :: ‚Ñï -> MMSP
topMMSP :: MMSP
joinMMSP :: MMSP -> MMSP -> MMSP
meetMMSP :: MMSP -> MMSP -> MMSP
plusMMSP :: MMSP -> MMSP -> MMSP
timesMMSP :: MMSP -> MMSP -> MMSP
ponMMSP :: MMSP -> ‚Ñï -> MMSP
zeroMaxsMins :: ùëÉ MMSPMins
joinMaxsMins :: ùëÉ MMSPMins -> ùëÉ MMSPMins -> ùëÉ MMSPMins
cmeetMaxsMins :: AddTop ‚Ñï -> ùëÉ MMSPMins -> ùëÉ MMSPMins
meetMaxsMins :: ùëÉ MMSPMins -> ùëÉ MMSPMins -> ùëÉ MMSPMins
cplusMaxsMins :: ‚Ñï -> ùëÉ MMSPMins -> ùëÉ MMSPMins
plusMaxsMins :: ùëÉ MMSPMins -> ùëÉ MMSPMins -> ùëÉ MMSPMins
ctimesMaxsMins :: ‚Ñï -> ùëÉ MMSPMins -> ùëÉ MMSPMins
timesMaxsMins :: ùëÉ MMSPMins -> ùëÉ MMSPMins -> ùëÉ MMSPMins
joinMaxs :: MMSPMaxs -> MMSPMaxs -> MMSPMaxs
meetMaxs :: MMSPMaxs -> MMSPMaxs -> MMSPMaxs
plusMaxs :: MMSPMaxs -> MMSPMaxs -> MMSPMaxs
timesMaxs :: MMSPMaxs -> MMSPMaxs -> MMSPMaxs
infMinsSums :: ùëÉ MMSPSums
meetMinsSums :: ùëÉ MMSPSums -> ùëÉ MMSPSums -> ùëÉ MMSPSums
cplusMinsSums :: ‚Ñï -> ùëÉ MMSPSums -> ùëÉ MMSPSums
plusMinsSums :: ùëÉ MMSPSums -> ùëÉ MMSPSums -> ùëÉ MMSPSums
ctimesMinsSums :: ‚Ñï -> ùëÉ MMSPSums -> ùëÉ MMSPSums
timesMinsSums :: ùëÉ MMSPSums -> ùëÉ MMSPSums -> ùëÉ MMSPSums
cmeetMins :: AddTop ‚Ñï -> MMSPMins -> MMSPMins
meetMins :: MMSPMins -> MMSPMins -> MMSPMins
cplusMins :: ‚Ñï -> MMSPMins -> MMSPMins
plusMins :: MMSPMins -> MMSPMins -> MMSPMins
ctimesMins :: ‚Ñï -> MMSPMins -> MMSPMins
timesMins :: MMSPMins -> MMSPMins -> MMSPMins
zeroSumsProds :: MMSPProds ‚á∞ ‚Ñï
plusSumsProds :: (MMSPProds ‚á∞ ‚Ñï) -> (MMSPProds ‚á∞ ‚Ñï) -> MMSPProds ‚á∞ ‚Ñï
ctimesSumsProds :: ‚Ñï -> (MMSPProds ‚á∞ ‚Ñï) -> MMSPProds ‚á∞ ‚Ñï
timesSumsProds :: (MMSPProds ‚á∞ ‚Ñï) -> (MMSPProds ‚á∞ ‚Ñï) -> MMSPProds ‚á∞ ‚Ñï
cplusSums :: ‚Ñï -> MMSPSums -> MMSPSums
plusSums :: MMSPSums -> MMSPSums -> MMSPSums
timesSums :: MMSPSums -> MMSPSums -> MMSPSums
timesProds :: MMSPProds -> MMSPProds -> MMSPProds
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Arithmetic.Pon UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Lib.MMSP.MMSP
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Lib.MMSP.MMSP
instance GHC.Show.Show UVMHS.Lib.MMSP.MMSPAtom
instance GHC.Classes.Ord UVMHS.Lib.MMSP.MMSPAtom
instance GHC.Classes.Eq UVMHS.Lib.MMSP.MMSPAtom
instance GHC.Show.Show UVMHS.Lib.MMSP.MMSPProds
instance GHC.Classes.Ord UVMHS.Lib.MMSP.MMSPProds
instance GHC.Classes.Eq UVMHS.Lib.MMSP.MMSPProds
instance GHC.Show.Show UVMHS.Lib.MMSP.MMSPSums
instance GHC.Classes.Ord UVMHS.Lib.MMSP.MMSPSums
instance GHC.Classes.Eq UVMHS.Lib.MMSP.MMSPSums
instance GHC.Show.Show UVMHS.Lib.MMSP.MMSPMins
instance GHC.Classes.Ord UVMHS.Lib.MMSP.MMSPMins
instance GHC.Classes.Eq UVMHS.Lib.MMSP.MMSPMins
instance GHC.Show.Show UVMHS.Lib.MMSP.MMSPMaxs
instance GHC.Classes.Ord UVMHS.Lib.MMSP.MMSPMaxs
instance GHC.Classes.Eq UVMHS.Lib.MMSP.MMSPMaxs
instance GHC.Show.Show UVMHS.Lib.MMSP.MMSP
instance GHC.Classes.Ord UVMHS.Lib.MMSP.MMSP
instance GHC.Classes.Eq UVMHS.Lib.MMSP.MMSP

module UVMHS.Lib.Errors
oops :: (Monad m, MonadReader r m, HasLens r e, MonadError e m) => m a
data GError
GError :: (() -> ùïä) -> (() -> ùëÉ SrcCxt) -> (() -> ùïä) -> (() -> Doc) -> GError
[gerrorTyp] :: GError -> () -> ùïä
[gerrorLoc] :: GError -> () -> ùëÉ SrcCxt
[gerrorMsg] :: GError -> () -> ùïä
[gerrorCxt] :: GError -> () -> Doc
gerrorCxtL :: (‚ü¢) GError (() -> Doc)
gerrorMsgL :: (‚ü¢) GError (() -> ùïä)
gerrorLocL :: (‚ü¢) GError (() -> ùëÉ SrcCxt)
gerrorTypL :: (‚ü¢) GError (() -> ùïä)
gerror‚ÇÄ :: GError
gerrorFromIO :: IOError -> GError
errSetTyp :: (Monad m, MonadReader r m, HasLens r GError) => (() -> ùïä) -> m a -> m a
errSetLoc :: (Monad m, MonadReader r m, HasLens r GError) => (() -> ùëÉ SrcCxt) -> m a -> m a
errSetMsg :: (Monad m, MonadReader r m, HasLens r GError) => (() -> ùïä) -> m a -> m a
errSetCxt :: (Monad m, MonadReader r m, HasLens r GError) => (() -> Doc) -> m a -> m a
errModCxt :: (Monad m, MonadReader r m, HasLens r GError) => (Doc -> Doc) -> m a -> m a
errTyp :: (Monad m, MonadReader r m, HasLens r GError) => m ùïä
errLoc :: (Monad m, MonadReader r m, HasLens r GError) => m (ùëÉ SrcCxt)
errMsg :: (Monad m, MonadReader r m, HasLens r GError) => m ùïä
errCxt :: (Monad m, MonadReader r m, HasLens r GError) => m Doc
instance UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Lib.Errors.GError

module UVMHS.Lang.ULC
newtype ULCExp ùí∏
ULCExp :: ùê¥ ùí∏ (ULCExp_R ùí∏) -> ULCExp ùí∏
[unULCExp] :: ULCExp ùí∏ -> ùê¥ ùí∏ (ULCExp_R ùí∏)
data ULCExp_R ùí∏
Var_ULC :: ùïê -> ULCExp_R ùí∏
Lam_ULC :: ùëÇ ùïè -> ULCExp ùí∏ -> ULCExp_R ùí∏
App_ULC :: ULCExp ùí∏ -> ULCExp ùí∏ -> ULCExp_R ùí∏
type ULCExpSrc = ULCExp SrcCxt
type ULCExpRaw = ULCExp ()
lexULCExp :: Lexer CharClass ‚ÑÇ TokenClassBasic ‚Ñï64 TokenBasic
pULCExp :: CParser TokenBasic ULCExpSrc
ulc :: QuasiQuoter
instance GHC.Show.Show ùí∏ => GHC.Show.Show (UVMHS.Lang.ULC.ULCExp ùí∏)
instance GHC.Classes.Ord (UVMHS.Lang.ULC.ULCExp ùí∏)
instance GHC.Classes.Eq (UVMHS.Lang.ULC.ULCExp ùí∏)
instance GHC.Show.Show ùí∏ => GHC.Show.Show (UVMHS.Lang.ULC.ULCExp_R ùí∏)
instance GHC.Classes.Ord (UVMHS.Lang.ULC.ULCExp_R ùí∏)
instance GHC.Classes.Eq (UVMHS.Lang.ULC.ULCExp_R ùí∏)
instance Language.Haskell.TH.Syntax.Lift ùí∏ => Language.Haskell.TH.Syntax.Lift (UVMHS.Lang.ULC.ULCExp ùí∏)
instance Language.Haskell.TH.Syntax.Lift ùí∏ => Language.Haskell.TH.Syntax.Lift (UVMHS.Lang.ULC.ULCExp_R ùí∏)
instance UVMHS.Lib.Rand.Fuzzy UVMHS.Lang.ULC.ULCExpRaw
instance UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lang.ULC.ULCExp ùí∏)
instance UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Lang.ULC.ULCExp_R ùí∏)
instance UVMHS.Lib.Substitution.Substy () (UVMHS.Lang.ULC.ULCExp ùí∏) (UVMHS.Lang.ULC.ULCExp ùí∏)

module UVMHS

module Examples.Lang.SExp
lexer :: Lexer CharClass ‚ÑÇ TokenClassBasic ‚Ñï64 TokenBasic
testSExpTokenizerSuccess :: IO ()
testSExpTokenizerFailure1 :: IO ()
testSExpTokenizerFailure2 :: IO ()
data Lit
IntegerL :: ‚Ñ§ -> Lit
DoubleL :: ùîª -> Lit
StringL :: ùïä -> Lit
data Atom
LitA :: Lit -> Atom
NameA :: ùïä -> Atom
KeyA :: Atom
PrimA :: Atom
PlusA :: Atom
type Exp = ùê¥ SrcCxt ExpPre
data ExpPre
AtomE :: Atom -> ExpPre
ListE :: ùêø Exp -> ExpPre
cpLit :: CParser TokenBasic Lit
cpAtom :: CParser TokenBasic Atom
cpExp :: CParser TokenBasic Exp
cpList :: CParser TokenBasic (ùêø Exp)
testSExpParserSuccess :: IO ()
testSExpParserFailure1 :: IO ()
testSExpParserFailure2 :: IO ()
testSExpParserFailure3 :: IO ()
instance (UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.SExp.Atom, UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùêø Examples.Lang.SExp.Exp)) => UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.SExp.ExpPre
instance (UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.SExp.Lit, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.SExp.Atom
instance (UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîª, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.SExp.Lit

module Examples.Lang.ArithBlocks
lexer :: Lexer CharClass ‚ÑÇ TokenClassWSBasic ‚Ñï64 TokenWSBasic
testTokenizerSuccess :: IO ()
data Lit
IntegerL :: ‚Ñ§ -> Lit
DoubleL :: ùîª -> Lit
StringL :: ùïä -> Lit
data Atom
LitA :: Lit -> Atom
NameA :: ùïä -> Atom
type Exp = ùê¥ SrcCxt ExpPre
data ExpPre
AtomE :: Atom -> ExpPre
PlusE :: Exp -> Exp -> ExpPre
TimesE :: Exp -> Exp -> ExpPre
ExpoE :: Exp -> Exp -> ExpPre
FactE :: Exp -> ExpPre
NegateE :: Exp -> ExpPre
EqualE :: Exp -> Exp -> ExpPre
BlockE :: ùêø Exp -> ExpPre
blockEL :: (‚å≤) ExpPre (ùêø Exp)
equalEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
negateEL :: (‚å≤) ExpPre Exp
factEL :: (‚å≤) ExpPre Exp
expoEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
timesEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
plusEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
atomEL :: (‚å≤) ExpPre Atom
cpLit :: CParser TokenWSBasic Lit
cpAtom :: CParser TokenWSBasic Atom
cpBlock :: CParser TokenWSBasic (ùêø Exp)
cpExp :: CParser TokenWSBasic Exp
cpExpList :: CParser TokenWSBasic (ùêø Exp)
testParserSuccess :: IO ()
testParserFailure :: IO ()
instance (UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.ArithBlocks.Atom, UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.ArithBlocks.Exp, UVMHS.Lib.Pretty.Doc.Pretty (UVMHS.Core.Init.ùêø Examples.Lang.ArithBlocks.Exp)) => UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.ArithBlocks.ExpPre
instance (UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.ArithBlocks.Lit, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.ArithBlocks.Atom
instance (UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîª, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.ArithBlocks.Lit

module Examples.Lang.Arith
lexer :: Lexer CharClass ‚ÑÇ TokenClassBasic ‚Ñï64 TokenBasic
testTokenizerSuccess :: IO ()
data Lit
IntegerL :: ‚Ñ§ -> Lit
DoubleL :: ùîª -> Lit
StringL :: ùïä -> Lit
data Atom
LitA :: Lit -> Atom
NameA :: ùïä -> Atom
type Exp = ùê¥ SrcCxt ExpPre
data ExpPre
AtomE :: Atom -> ExpPre
PlusE :: Exp -> Exp -> ExpPre
TimesE :: Exp -> Exp -> ExpPre
ExpoE :: Exp -> Exp -> ExpPre
FactE :: Exp -> ExpPre
NegateE :: Exp -> ExpPre
EqualE :: Exp -> Exp -> ExpPre
equalEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
negateEL :: (‚å≤) ExpPre Exp
factEL :: (‚å≤) ExpPre Exp
expoEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
timesEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
plusEL :: (‚å≤) ExpPre ((‚àß) Exp Exp)
atomEL :: (‚å≤) ExpPre Atom
cpLit :: CParser TokenBasic Lit
cpAtom :: CParser TokenBasic Atom
cpExp :: CParser TokenBasic Exp
testParserSuccess :: IO ()
testParserFailure1 :: IO ()
testParserFailure2 :: IO ()
instance (UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.Arith.Atom, UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.Arith.Exp) => UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.Arith.ExpPre
instance (UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.Arith.Lit, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.Arith.Atom
instance (UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.‚Ñ§, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùîª, UVMHS.Lib.Pretty.Doc.Pretty UVMHS.Core.Init.ùïä) => UVMHS.Lib.Pretty.Doc.Pretty Examples.Lang.Arith.Lit

module UVMHS.Lib.ZerInf
data AddZer a
Zer :: AddZer a
AddZer :: a -> AddZer a
elimAddZer :: b -> (a -> b) -> AddZer a -> b
data AddInf a
Inf :: AddInf a
AddInf :: a -> AddInf a
elimAddInf :: b -> (a -> b) -> AddInf a -> b
data AddZI a
ZerZI :: AddZI a
InfZI :: AddZI a
AddZI :: a -> AddZI a
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Lib.ZerInf.AddZer a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Lib.ZerInf.AddZer a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Lib.ZerInf.AddZer a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Lib.ZerInf.AddInf a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Lib.ZerInf.AddInf a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Lib.ZerInf.AddInf a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Lib.ZerInf.AddZI a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Lib.ZerInf.AddZI a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Lib.ZerInf.AddZI a)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Lib.ZerInf.AddZI a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Lib.ZerInf.AddZI
instance UVMHS.Core.Classes.Functors.Return UVMHS.Lib.ZerInf.AddZI
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Lib.ZerInf.AddZI
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Lib.ZerInf.AddZI
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Lib.ZerInf.AddZI
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Bot a => UVMHS.Core.Classes.Lattice.Bot (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.JoinLattice a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Lattice.JoinLattice a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Lib.ZerInf.AddInf
instance UVMHS.Core.Classes.Functors.Return UVMHS.Lib.ZerInf.AddInf
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Lib.ZerInf.AddInf
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Lib.ZerInf.AddInf
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Lib.ZerInf.AddInf
instance UVMHS.Core.Classes.Arithmetic.Zero a => UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Arithmetic.One a => UVMHS.Core.Classes.Arithmetic.One (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Arithmetic.Plus a => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Arithmetic.Times a => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.Divide a, UVMHS.Core.Classes.Arithmetic.Zero a, GHC.Classes.Eq a) => UVMHS.Core.Classes.Arithmetic.Divide (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.DivMod a, UVMHS.Core.Classes.Arithmetic.Zero a) => UVMHS.Core.Classes.Arithmetic.DivMod (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.Pon a, UVMHS.Core.Classes.Arithmetic.One a) => UVMHS.Core.Classes.Arithmetic.Pon (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.Pow a, UVMHS.Core.Classes.Arithmetic.One a) => UVMHS.Core.Classes.Arithmetic.Pow (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Arithmetic.Root a => UVMHS.Core.Classes.Arithmetic.Root (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.Log a, UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Arithmetic.Minus a) => UVMHS.Core.Classes.Arithmetic.Log (UVMHS.Lib.ZerInf.AddInf a)
instance (UVMHS.Core.Classes.Arithmetic.Efn a, UVMHS.Core.Classes.Arithmetic.One a) => UVMHS.Core.Classes.Arithmetic.Efn (UVMHS.Lib.ZerInf.AddInf a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Lattice.Top a => UVMHS.Core.Classes.Lattice.Top (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Lattice.MeetLattice a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.MeetLattice a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Lib.ZerInf.AddZer
instance UVMHS.Core.Classes.Functors.Return UVMHS.Lib.ZerInf.AddZer
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Lib.ZerInf.AddZer
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Lib.ZerInf.AddZer
instance UVMHS.Core.Classes.Functors.FunctorM UVMHS.Lib.ZerInf.AddZer
instance UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Arithmetic.One a => UVMHS.Core.Classes.Arithmetic.One (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Arithmetic.Plus a => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Arithmetic.Times a => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Arithmetic.Divide a, UVMHS.Core.Classes.Lattice.Top a) => UVMHS.Core.Classes.Arithmetic.Divide (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Arithmetic.DivMod a, UVMHS.Core.Classes.Lattice.Top a) => UVMHS.Core.Classes.Arithmetic.DivMod (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Arithmetic.Pon a => UVMHS.Core.Classes.Arithmetic.Pon (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Arithmetic.Pow a, UVMHS.Core.Classes.Arithmetic.One a) => UVMHS.Core.Classes.Arithmetic.Pow (UVMHS.Lib.ZerInf.AddZer a)
instance UVMHS.Core.Classes.Arithmetic.Root a => UVMHS.Core.Classes.Arithmetic.Root (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Arithmetic.Log a, UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Arithmetic.Minus a) => UVMHS.Core.Classes.Arithmetic.Log (UVMHS.Lib.ZerInf.AddZer a)
instance (UVMHS.Core.Classes.Arithmetic.Efn a, UVMHS.Core.Classes.Arithmetic.One a) => UVMHS.Core.Classes.Arithmetic.Efn (UVMHS.Lib.ZerInf.AddZer a)

module UVMHS.Tests.Core
g__TESTS__UVMHS__Tests__Core :: ùëáD Test
instance UVMHS.Core.Effects.MonadReader (UVMHS.Core.Init.‚Ñï64 UVMHS.Core.Init.‚àß UVMHS.Core.Init.‚Ñï64) UVMHS.Tests.Core.UR
instance UVMHS.Core.Effects.MonadUCont UVMHS.Tests.Core.UR
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Tests.Core.UR
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Tests.Core.UR
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Tests.Core.UR
instance UVMHS.Core.Classes.Functors.Return UVMHS.Tests.Core.UR
instance UVMHS.Core.Effects.MonadReader (UVMHS.Core.Init.‚Ñï64 UVMHS.Core.Init.‚àß UVMHS.Core.Init.‚Ñï64) UVMHS.Tests.Core.CR
instance UVMHS.Core.Effects.MonadCont UVMHS.Core.Init.‚Ñï64 UVMHS.Tests.Core.CR
instance UVMHS.Core.Classes.Functors.Monad UVMHS.Tests.Core.CR
instance UVMHS.Core.Classes.Functors.Functor UVMHS.Tests.Core.CR
instance UVMHS.Core.Classes.Functors.Bind UVMHS.Tests.Core.CR
instance UVMHS.Core.Classes.Functors.Return UVMHS.Tests.Core.CR

module UVMHS.Tests.Substitution
g__TESTS__UVMHS__Tests__Substitution :: ùëáD Test

module UVMHSMain
type M = UContT (RWS ‚Ñï64 ‚Ñï64 ‚Ñï64)
main :: IO ()
