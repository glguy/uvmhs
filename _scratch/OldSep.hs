module UVMHS.Lib.Parser.NewSep where

import UVMHS.Core
import UVMHS.Lib.NewPretty

------------
-- Swivel --
------------

swivelL ‚à∑ a ‚Üí ùêø a ‚Üí ùêø a ‚àß a
swivelL x Nil = Nil :* x
swivelL x (y :& xs) =
  let xs' :* x' = swivelL y xs
  in (x :& xs') :* x'

swivelR ‚à∑ ùêø a ‚Üí a ‚Üí a ‚àß ùêø a
swivelR Nil x = x :* Nil
swivelR (x :& xs) y =
  let x' :* xs' = swivelR xs y
  in x :* (x' :& xs')

----------
-- SepL --
----------

data SepL i a =
    SepLSingle a
  | SepLMulti ‚Ñï64 a (ùêº (i ‚àß a)) i a
  deriving (Show)

-- {-# INLINE eSepL #-}
eSepL ‚à∑ a ‚Üí SepL i a
eSepL x = SepLSingle x

-- {-# INLINE iSepL #-}
iSepL ‚à∑ (Null a) ‚áí i ‚Üí SepL i a
iSepL i = SepLMulti one null null i null

instance (Null a) ‚áí Null (SepL i a) where
  -- {-# INLINE null #-}
  null = SepLSingle null
instance (Append a) ‚áí Append (SepL i a) where
  -- {-# INLINE (‚ß∫) #-}
  SepLSingle x‚ÇÅ ‚ß∫ SepLSingle x‚ÇÇ = SepLSingle $ x‚ÇÅ ‚ß∫ x‚ÇÇ
  SepLSingle x‚ÇÅ ‚ß∫ SepLMulti n x‚ÇÇ ixs‚ÇÇ i‚ÇÇ y‚ÇÇ = SepLMulti n (x‚ÇÅ ‚ß∫ x‚ÇÇ) ixs‚ÇÇ i‚ÇÇ y‚ÇÇ
  SepLMulti n x‚ÇÅ ixs‚ÇÅ i‚ÇÅ y‚ÇÅ ‚ß∫ SepLSingle x‚ÇÇ = SepLMulti n x‚ÇÅ ixs‚ÇÅ i‚ÇÅ (y‚ÇÅ ‚ß∫ x‚ÇÇ)
  SepLMulti n‚ÇÅ x‚ÇÅ ixs‚ÇÅ i‚ÇÅ y‚ÇÅ ‚ß∫ SepLMulti n‚ÇÇ x‚ÇÇ ixs‚ÇÇ i‚ÇÇ y‚ÇÇ =
    SepLMulti (n‚ÇÅ + n‚ÇÇ) x‚ÇÅ (ixs‚ÇÅ ‚ß∫ single (i‚ÇÅ :* (y‚ÇÅ ‚ß∫ x‚ÇÇ)) ‚ß∫ ixs‚ÇÇ) i‚ÇÇ y‚ÇÇ
instance (Monoid a) ‚áí Monoid (SepL i a)

instance ToIter a (SepL a a) where
  -- {-# INLINE iter #-}
  iter (SepLSingle x) = single x
  iter (SepLMulti _ x ixs i y) = concat
    [ single x
    , concat $ mapOn ixs $ \ (i' :* x') ‚Üí iter [i',x']
    , iter [i,y]
    ]

instance (Pretty a) ‚áí Pretty (SepL a a) where
  -- {-# INLINE pretty #-}
  pretty = concat ‚àò map pretty ‚àò iter

firstNSepL ‚à∑ ‚Ñï64 ‚Üí SepL i a ‚Üí SepL i a
firstNSepL _ (SepLSingle x) = SepLSingle x
firstNSepL n (SepLMulti n' x ixs i y)
  | n ‚â° zero = SepLSingle x
  | n' ‚â§ n = SepLMulti n' x ixs i y
  | otherwise =
      let iy' :* ixs' = swivelR (list ixs) (i :* y)
          ixs'' = list $ firstN (nat $ n - one) ixs'
          ixs''' :* (i''' :* y''') = swivelL iy' ixs''
      in SepLMulti n x (iter ixs''') i''' y'''

mapSepL ‚à∑ (i ‚Üí j) ‚Üí (a ‚Üí b) ‚Üí SepL i a ‚Üí SepL j b
mapSepL _ f (SepLSingle x) = SepLSingle $ f x
mapSepL g f (SepLMulti n x ixs i y) = SepLMulti n (f x) (map (\ (i' :* x') ‚Üí g i' :* f x') ixs) (g i) (f y)

sepsCountL ‚à∑ SepL i a ‚Üí ‚Ñï64
sepsCountL (SepLSingle _) = zero
sepsCountL (SepLMulti n _ _ _ _) = n

----------
-- SepR --
----------

data SepR i a =
    SepRSingle a
  | SepRMulti ‚Ñï64 a i (ùêº (a ‚àß i)) a
  deriving (Show)

-- {-# INLINE eSepR #-}
eSepR ‚à∑ a ‚Üí SepR i a
eSepR x = SepRSingle x

-- {-# INLINE iSepR #-}
iSepR ‚à∑ (Null a) ‚áí i ‚Üí SepR i a
iSepR i = SepRMulti one null i null null

instance (Null a) ‚áí Null (SepR i a) where
  -- {-# INLINE null #-}
  null = SepRSingle null
instance (Append a) ‚áí Append (SepR i a) where
  -- {-# INLINE (‚ß∫) #-}
  SepRSingle x‚ÇÅ ‚ß∫ SepRSingle x‚ÇÇ = SepRSingle $ x‚ÇÅ ‚ß∫ x‚ÇÇ
  SepRSingle x‚ÇÅ ‚ß∫ SepRMulti n x‚ÇÇ i‚ÇÇ xis‚ÇÇ y‚ÇÇ = SepRMulti n (x‚ÇÅ ‚ß∫ x‚ÇÇ) i‚ÇÇ xis‚ÇÇ y‚ÇÇ
  SepRMulti n x‚ÇÅ i‚ÇÅ xis‚ÇÅ y‚ÇÅ ‚ß∫ SepRSingle x‚ÇÇ = SepRMulti n x‚ÇÅ i‚ÇÅ xis‚ÇÅ (y‚ÇÅ ‚ß∫ x‚ÇÇ)
  SepRMulti n‚ÇÅ x‚ÇÅ i‚ÇÅ xis‚ÇÅ y‚ÇÅ ‚ß∫ SepRMulti n‚ÇÇ x‚ÇÇ i‚ÇÇ xis‚ÇÇ y‚ÇÇ =
    SepRMulti (n‚ÇÅ + n‚ÇÇ) x‚ÇÅ i‚ÇÅ (xis‚ÇÅ ‚ß∫ single ((y‚ÇÅ ‚ß∫ x‚ÇÇ) :* i‚ÇÇ) ‚ß∫ xis‚ÇÇ) y‚ÇÇ
instance (Monoid a) ‚áí Monoid (SepR i a)

instance ToIter a (SepR a a) where
  -- {-# INLINE iter #-}
  iter (SepRSingle x) = single x
  iter (SepRMulti _ x i xis y) = concat
    [ iter [x,i]
    , concat $ mapOn xis $ \ (x' :* i') ‚Üí iter [x',i']
    , single y
    ]

instance (Pretty a) ‚áí Pretty (SepR a a) where
  -- {-# INLINE pretty #-}
  pretty = concat ‚àò map pretty ‚àò iter

lastNSepR ‚à∑ ‚Ñï64 ‚Üí SepR i a ‚Üí SepR i a
lastNSepR _ (SepRSingle x) = SepRSingle x
lastNSepR n (SepRMulti n' x i xis y)
  | n ‚â° zero = SepRSingle y
  | n' ‚â§ n = SepRMulti n' x i xis y
  | otherwise =
      let xis' :* xi' = swivelL (x :* i) (list xis)
          xis'' = list $ lastN (nat $ n - one) xis'
          (x''' :* i''') :* xis''' = swivelR xis'' xi'
      in SepRMulti n x''' i''' (iter xis''') y

mapSepR ‚à∑ (i ‚Üí j) ‚Üí (a ‚Üí b) ‚Üí SepR i a ‚Üí SepR j b
mapSepR _ f (SepRSingle x) = SepRSingle $ f x
mapSepR g f (SepRMulti n x i xis y) = SepRMulti n (f x) (g i) (map (\ (x' :* i') ‚Üí f x' :* g i') xis) (f y)

sepsCountR ‚à∑ SepR i a ‚Üí ‚Ñï64
sepsCountR (SepRSingle _) = zero
sepsCountR (SepRMulti n _ _ _ _) = n
