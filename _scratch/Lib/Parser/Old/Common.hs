module FP.Parser.Common where

import FP.Prelude
import FP.Pretty

-- # Loc

data Loc = Loc
  { locPos ‚à∑ ‚Ñï
  , locRow ‚à∑ ‚Ñï
  , locCol ‚à∑ ‚Ñï
  }
makeLenses ''Loc
makePrettyRecord ''Loc

loc‚ÇÄ ‚à∑ Loc
loc‚ÇÄ = Loc bot bot bot

instance Eq Loc where
  (==) = (==) `on` locPos
instance Ord Loc where
  compare = (‚ãö) `on` locPos

instance Bot Loc where
  bot = Loc bot bot bot
instance Join Loc where
  l‚ÇÅ ‚äî l‚ÇÇ = case locPos l‚ÇÅ ‚ãö locPos l‚ÇÇ of
    LT ‚Üí l‚ÇÇ
    EQ ‚Üí l‚ÇÅ
    GT ‚Üí l‚ÇÅ
instance Meet Loc where
  l‚ÇÅ ‚äì l‚ÇÇ = case locPos l‚ÇÅ ‚ãö locPos l‚ÇÇ of
    LT ‚Üí l‚ÇÅ
    EQ ‚Üí l‚ÇÅ
    GT ‚Üí l‚ÇÇ

bumpRow ‚à∑ Loc ‚Üí Loc
bumpRow (Loc pos row _) = Loc (pos + ùïü 1) (row + ùïü 1) (ùïü 0)

bumpCol ‚à∑ Loc ‚Üí Loc
bumpCol (Loc pos row col) = Loc (pos + ùïü 1) row (col + ùïü 1)

-- # LocRange

data LocRange = LocRange
  { locRangeBegin ‚à∑ Loc
  , locRangeEnd ‚à∑ Loc
  } deriving (Eq, Ord)
makeLenses ''LocRange
makePrettyUnion ''LocRange

instance Join LocRange where
  LocRange b‚ÇÅ e‚ÇÅ ‚äî LocRange b‚ÇÇ e‚ÇÇ = LocRange (b‚ÇÅ ‚äì b‚ÇÇ) (e‚ÇÅ ‚äî e‚ÇÇ)

-- # SourceToken

data SourceToken t = SourceToken
  { sourceTokenValue ‚à∑ t
  , sourceTokenRange ‚à∑ LocRange
  , sourceTokenRender ‚à∑ Doc
  , sourceTokenError ‚à∑ Doc
  }
makeLenses ''SourceToken
makePrettyRecord ''SourceToken

renderChar ‚à∑ ‚ÑÇ ‚Üí Doc
renderChar = ppText ‚àò ùï§

renderErrorChar ‚à∑ ‚ÑÇ ‚Üí Doc
renderErrorChar '\n' = ppErr "\\n\n"
renderErrorChar c = renderChar c

tokens ‚à∑ ùïä ‚Üí Stream (SourceToken ‚ÑÇ)
tokens (stream ‚Üí Stream s‚ÇÄ f) = streamState loc‚ÇÄ $ MStream s‚ÇÄ $ \ s ‚Üí do
  (c,s') ‚Üê abortùí™ $ f s
  loc ‚Üê get
  put $ if c == '\n'
    then bumpRow loc
    else bumpCol loc
  return (SourceToken c (LocRange loc loc) (renderChar c) (renderErrorChar c),s')

-- # SourceInput

data SourceInput t = SourceInput
  { sourceInputStream ‚à∑ Stream (SourceToken t)
  , sourceInputNextLoc ‚à∑ Loc
  }
makeLenses ''SourceInput
makePrettyRecord ''SourceInput

sourceInput‚ÇÄ ‚à∑ Stream (SourceToken t) ‚Üí SourceInput t
sourceInput‚ÇÄ ss = SourceInput ss loc‚ÇÄ

-- # SourceErrorTrace

data SourceErrorTrace = SourceErrorTrace
  { sourceErrorTraceFinal ‚à∑ ùí´ ùïä
  , sourceErrorTraceChain ‚à∑ ùïä ‚á∞ SourceErrorTrace
  } deriving (Eq, Ord)
makeLenses ''SourceErrorTrace
makePrettyRecord ''SourceErrorTrace

instance Bot SourceErrorTrace where
  bot = SourceErrorTrace bot bot
instance Join SourceErrorTrace where
  SourceErrorTrace fin‚ÇÅ ch‚ÇÅ ‚äî SourceErrorTrace fin‚ÇÇ ch‚ÇÇ = SourceErrorTrace (fin‚ÇÅ ‚äî fin‚ÇÇ) (ch‚ÇÅ ‚äî ch‚ÇÇ)
instance JoinLattice SourceErrorTrace

sourceErrorTraceFromStack ‚à∑ [ùïä] ‚Üí ùïä ‚Üí SourceErrorTrace
sourceErrorTraceFromStack [] fin = SourceErrorTrace (single fin) bot
sourceErrorTraceFromStack (msg:msgs) fin =
  SourceErrorTrace bot $ dict [msg ‚Ü¶ sourceErrorTraceFromStack msgs fin]

displaySourceErrorTrace ‚à∑ SourceErrorTrace ‚Üí Doc
displaySourceErrorTrace (SourceErrorTrace final chain) = ppVertical $ concat
  [ if isEmpty final then null else return $ ppHorizontal $ concat
      [ single $ ppFG red $ ppText "Expected"
      , intersperse (ppFG red $ ppText "OR") $ map ppText $ list final
      ]
  , mapOn (list chain) $ \ (msg,tr) ‚Üí ppVertical
      [ ppHorizontal
          [ ppFG darkGreen $ ppText "Parsing"
          , ppText msg
          ]
      , concat [ppSpace (ùïü 2),ppAlign $ displaySourceErrorTrace tr]
      ]
  ]

-- # SourceErrorInfo

data SourceErrorInfo = SourceErrorInfo
  { sourceErrorInfoPrefix ‚à∑ Doc
  , sourceErrorInfoTrace ‚à∑ SourceErrorTrace
  }
makeLenses ''SourceErrorInfo
makePrettyRecord ''SourceErrorInfo

-- # SourceError

data SourceError t = SourceError
  { sourceErrorInput ‚à∑ SourceInput t
  , sourceErrorContexts ‚à∑ (AddBot LocRange,Doc) ‚á∞ SourceErrorInfo
  }
makeLenses ''SourceError
makePrettyRecord ''SourceError

sourceErrorAppend ‚à∑ SourceError t ‚Üí SourceError t ‚Üí SourceError t
sourceErrorAppend (SourceError pin‚ÇÅ ectxs‚ÇÅ) (SourceError pin‚ÇÇ ectxs‚ÇÇ) =
  case sourceInputNextLoc pin‚ÇÅ ‚ãö sourceInputNextLoc pin‚ÇÇ of
    LT ‚Üí SourceError pin‚ÇÇ ectxs‚ÇÇ
    EQ ‚Üí
      SourceError pin‚ÇÅ $ unionWithDictOn ectxs‚ÇÅ ectxs‚ÇÇ $ \ pei‚ÇÅ pei‚ÇÇ ‚Üí
        let SourceErrorInfo pre‚ÇÅ trace‚ÇÅ = pei‚ÇÅ
            SourceErrorInfo _    trace‚ÇÇ = pei‚ÇÇ
        in SourceErrorInfo pre‚ÇÅ (trace‚ÇÅ ‚äî trace‚ÇÇ)
    GT ‚Üí SourceError pin‚ÇÅ ectxs‚ÇÅ

data SourceErrorùí™ t = NullSourceError | SourceErrorùí™ (SourceError t)

makePrisms ''SourceErrorùí™
instance (Pretty t) ‚áí Pretty (SourceErrorùí™ t) where
  pretty NullSourceError = ppCon "null"
  pretty (SourceErrorùí™ e) = pretty e

instance Monoid (SourceErrorùí™ t) where
  null = NullSourceError
  NullSourceError ‚ß∫ pem = pem
  pem ‚ß∫ NullSourceError = pem
  SourceErrorùí™ pe‚ÇÅ ‚ß∫ SourceErrorùí™ pe‚ÇÇ = SourceErrorùí™ $ pe‚ÇÅ `sourceErrorAppend` pe‚ÇÇ

displaySourceErrorùí™ ‚à∑ SourceErrorùí™ t ‚Üí Doc
displaySourceErrorùí™ NullSourceError = ppHeader "Nothing to Parse"
displaySourceErrorùí™ (SourceErrorùí™ (SourceError (SourceInput ts (Loc _ row col)) ectxs)) =
  ppVertical $ concat
  [ return $ ppHeader "Parse Failure"
  , return $ ppHorizontal
      [ ppErr ">"
      , concat [ppText "row:",pretty row]
      , concat [ppText "col:",pretty col]
      ]
  , return $ ppHeader "One Of:"
  , intersperse (ppHeader "OR") $ mapOn (list ectxs) $
    \ ((locRange,ctx),SourceErrorInfo pre etrace) ‚Üí
        let (tokRange,nextTok,followStream) = case unconsStream ts of
              Nothing ‚Üí (Bot,ppErr "EOF",null)
              Just (x,ts') ‚Üí (AddBot $ sourceTokenRange x,sourceTokenError x,ts')
            blind = case locRange ‚äî tokRange of
              Bot ‚Üí id
              AddBot (LocRange low high) ‚Üí ppBlinders (locRow low) (locRow high)
        in
        ppVertical
          [ ppLineNumbers $ ppSetLineNumber (ùïü 0) $ blind $ concat
              [ pre
              , ppUT '^' green ctx
              , ppUT '^' red nextTok
              , concat $ map sourceTokenRender followStream
              ]
          , displaySourceErrorTrace etrace
          ]
  ]

-- # SourceContextPrefix

data SourceContextPrefix t = SourceContextPrefix
  { sourceContextPrefixBefore ‚à∑ Doc
  , sourceContextPrefixDisplay ‚à∑ Doc
  , sourceContextPrefixDisplayError ‚à∑ Doc
  , sourceContextPrefixRange ‚à∑ AddBot LocRange
  }
makeLenses ''SourceContextPrefix

instance Pretty (SourceContextPrefix t) where
  pretty (SourceContextPrefix prefix display displayError range) =
    ppRecord "="
      [ ppText "display"      ‚Ü¶ prefix ‚ß∫ ppUT '^' green display
      , ppText "displayError" ‚Ü¶ prefix ‚ß∫ ppUT '^' red displayError
      , ppText "range"        ‚Ü¶ pretty range
      ]

instance Monoid (SourceContextPrefix t) where
  null = SourceContextPrefix null null null Bot
  pc‚ÇÅ ‚ß∫ pc‚ÇÇ =
    let SourceContextPrefix pre‚ÇÅ display‚ÇÅ displayError‚ÇÅ range‚ÇÅ = pc‚ÇÅ
        SourceContextPrefix _    display‚ÇÇ displayError‚ÇÇ range‚ÇÇ = pc‚ÇÇ
    in SourceContextPrefix pre‚ÇÅ
       (display‚ÇÅ ‚ß∫ display‚ÇÇ) (displayError‚ÇÅ ‚ß∫ displayError‚ÇÇ) (range‚ÇÅ ‚äî range‚ÇÇ)

pushSourceLocalContext ‚à∑ SourceContextPrefix t ‚Üí SourceContextPrefix t
pushSourceLocalContext (SourceContextPrefix prefix display _ _) =
  SourceContextPrefix (prefix ‚ß∫ display) null null bot

errorSourceLocalContext ‚à∑ SourceInput t ‚Üí ([ùïä],ùïä) ‚Üí SourceContextPrefix t ‚Üí SourceError t
errorSourceLocalContext pi (stack,message) (SourceContextPrefix prefix display _ range) =
  SourceError pi $ dict
    [(range,display) ‚Ü¶ SourceErrorInfo prefix (sourceErrorTraceFromStack (reverse stack) message)]

sourceLocalContextFromToken ‚à∑ [Format] ‚Üí SourceToken t ‚Üí SourceContextPrefix t
sourceLocalContextFromToken fmt (SourceToken _ range render renderError) =
  SourceContextPrefix null (ppFormat fmt render) (ppFormat fmt renderError) (AddBot range)

-- # SourceContext

data SourceContext t = SourceContext
  { sourceContextPast ‚à∑ SourceContextPrefix t
  , sourceContextFuture ‚à∑ SourceInput t
  }
instance Monoid (SourceContext t) where
  null = SourceContext null $ SourceInput null bot
  SourceContext pc‚ÇÅ pi‚ÇÅ ‚ß∫ SourceContext pc‚ÇÇ pi‚ÇÇ =
    SourceContext (pc‚ÇÅ ‚ß∫ pc‚ÇÇ) $ maxBy sourceInputNextLoc pi‚ÇÅ pi‚ÇÇ

instance Pretty (SourceContext t) where
  pretty (SourceContext (SourceContextPrefix pre display _ range) (SourceInput ss _)) =
    let ff = case range of
          Bot ‚Üí id
          AddBot (LocRange begin end) ‚Üí compose
            [ ppSetLineNumber (ùïü 0)
            , ppLineNumbers
            , ppBlinders (locRow begin) (locRow end)
            ]
    in ff $ pre ‚ß∫ (ppUT '^' green display) ‚ß∫ concat (map sourceTokenRender ss)

displaySourceContext ‚à∑ SourceContext t ‚Üí Doc
displaySourceContext (SourceContext (SourceContextPrefix pre display _ range) (SourceInput ss _)) =
    let ff = case range of
          Bot ‚Üí id
          AddBot (LocRange begin end) ‚Üí compose
            [ ppSetLineNumber (ùïü 0)
            , ppLineNumbers
            , ppBlinders (locRow begin) (locRow end)
            ]
    in ff $ pre ‚ß∫ display ‚ß∫ concat (map sourceTokenRender ss)

errorSourceContext ‚à∑ SourceContext t ‚Üí Doc
errorSourceContext (SourceContext (SourceContextPrefix pre _ displayError range) (SourceInput ss _)) =
  let ff = case range of
        Bot ‚Üí id
        AddBot (LocRange begin end) ‚Üí compose
          [ ppSetLineNumber (ùïü 0)
          , ppLineNumbers
          , ppBlinders (locRow begin) (locRow end)
          ]
  in ff $ pre ‚ß∫ (ppUT '^' red displayError) ‚ß∫ concat (map sourceTokenRender ss)
