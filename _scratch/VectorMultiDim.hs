module UVMHS.Core.Vector2 where

import UVMHS.Init
import UVMHS.Core.Classes
import UVMHS.Core.Data

import qualified Data.Array.Repa as Repa
import qualified Data.Array.Repa.Repr.Vector as Repa
import qualified Data.Array.Repa.Repr.Unboxed as Repa
import qualified Prelude as HS
import qualified Data.Proxy as HS
import qualified Data.Functor.Identity as HS

import qualified GHC.TypeLits as HS

-- type lits --

type T‚Ñï = HS.Nat
type Tùïä = HS.Symbol

type (m ‚à∑ T‚Ñï) +  (n ‚à∑ T‚Ñï) = m HS.+ n
type (m ‚à∑ T‚Ñï) √ó  (n ‚à∑ T‚Ñï) = m HS.* n
type (m ‚à∑ T‚Ñï) ^  (n ‚à∑ T‚Ñï) = m HS.^ n
type (m ‚à∑ T‚Ñï) -  (n ‚à∑ T‚Ñï) = m HS.- n
type (m ‚à∑ T‚Ñï) /  (n ‚à∑ T‚Ñï) = m `HS.Div` n
type (m ‚à∑ T‚Ñï) %  (n ‚à∑ T‚Ñï) = m `HS.Mod` n
type Log2 (n ‚à∑ T‚Ñï) = HS.Log2 n

type (m ‚à∑ T‚Ñï) ‚ãö? (n ‚à∑ T‚Ñï) = HS.CmpNat m n

type (m ‚à∑ T‚Ñï) <  (n ‚à∑ T‚Ñï) = (m ‚ãö? n) ~ 'LT
type (m ‚à∑ T‚Ñï) ‚â°  (n ‚à∑ T‚Ñï) = (m ‚ãö? n) ~ 'EQ
type (m ‚à∑ T‚Ñï) >  (n ‚à∑ T‚Ñï) = (m ‚ãö? n) ~ 'GT

data (m ‚à∑ T‚Ñï) :<: (n ‚à∑ T‚Ñï) = TRUSTME_LT

newtype S‚Ñï (n ‚à∑ T‚Ñï) = TRUSTME_S‚Ñï { unS‚Ñï ‚à∑ ‚Ñï }
newtype S‚Ñï32 (n ‚à∑ T‚Ñï) = TRUSTME_S‚Ñï32 { unS‚Ñï32 ‚à∑ ‚Ñï32 }
newtype Sùïä (s ‚à∑ Tùïä) = TRUSTME_Sùïä { unSùïä ‚à∑ ùïä }

class (HS.KnownNat n) ‚áí R‚Ñï (n ‚à∑ T‚Ñï) where reify‚Ñï ‚à∑ P n ‚Üí ‚Ñï
class (HS.KnownNat n) ‚áí R‚Ñï32 (n ‚à∑ T‚Ñï) where reify‚Ñï32 ‚à∑ P n ‚Üí ‚Ñï32
class (HS.KnownSymbol s) ‚áí Rùïä (s ‚à∑ Tùïä) where reifyùïä ‚à∑ P s ‚Üí ùïä

instance (HS.KnownNat n) ‚áí R‚Ñï (n ‚à∑ T‚Ñï) where reify‚Ñï P = natŒ© $ HS.natVal @ n P
instance (HS.KnownNat n) ‚áí R‚Ñï32 (n ‚à∑ T‚Ñï) where reify‚Ñï32 P = natŒ©32 $ HS.natVal @ n P
instance (HS.KnownSymbol s) ‚áí Rùïä (s ‚à∑ Tùïä) where reifyùïä P = string $ HS.symbolVal @ s P

sùïü ‚à∑ ‚àÄ n. (R‚Ñï n) ‚áí S‚Ñï n
sùïü = TRUSTME_S‚Ñï $ reify‚Ñï @ n P

dùïü ‚à∑ ‚Ñï ‚Üí (‚àÄ n. (R‚Ñï n) ‚áí S‚Ñï n ‚Üí a) ‚Üí a
dùïü n f = case HS.someNatVal $ int n of
  HS.Nothing ‚Üí error "impossible"
  HS.Just (HS.SomeNat (HS.Proxy ‚à∑ HS.Proxy n)) ‚Üí f $ TRUSTME_S‚Ñï @ n n

sùïü32 ‚à∑ ‚àÄ n. (R‚Ñï32 n) ‚áí S‚Ñï32 n
sùïü32 = TRUSTME_S‚Ñï32 $ reify‚Ñï32 @ n P

dùïü32 ‚à∑ ‚Ñï32 ‚Üí (‚àÄ n. (R‚Ñï32 n) ‚áí S‚Ñï32 n ‚Üí a) ‚Üí a
dùïü32 n f = case HS.someNatVal $ int n of
  HS.Nothing ‚Üí error "impossible"
  HS.Just (HS.SomeNat (HS.Proxy ‚à∑ HS.Proxy n)) ‚Üí f $ TRUSTME_S‚Ñï32 @ n n

sùï§ ‚à∑ ‚àÄ s. (HS.KnownSymbol s) ‚áí Sùïä s
sùï§ = TRUSTME_Sùïä $ reifyùïä @ s P

dùï§ ‚à∑ ùïä ‚Üí (‚àÄ s. (Rùïä s) ‚áí Sùïä s ‚Üí a) ‚Üí a
dùï§ s f = case HS.someSymbolVal $ chars s of
  HS.SomeSymbol (HS.Proxy ‚à∑ HS.Proxy s) ‚Üí f $ TRUSTME_Sùïä @ s s

infixr  8 :&&

data Sùêø (a ‚à∑ sa ‚Üí ‚òÖ) ‚à∑ [sa] ‚Üí ‚òÖ where
  SNil ‚à∑ Sùêø a '[]
  (:&&) ‚à∑ a x ‚Üí Sùêø a xs ‚Üí Sùêø a (x ': xs)

mapSùêø ‚à∑ ‚àÄ (a ‚à∑ sa ‚Üí ‚òÖ) (b ‚à∑ sa ‚Üí ‚òÖ) (xs ‚à∑ [sa]). (‚àÄ (x ‚à∑ sa). a x ‚Üí b x) ‚Üí Sùêø a xs ‚Üí Sùêø b xs
mapSùêø _ SNil = SNil
mapSùêø f (x :&& xs) = f x :&& mapSùêø f xs

newtype Const (a ‚à∑ ‚òÖ) (b ‚à∑ k) = Const { unConst ‚à∑ a }

type family (xs ‚à∑ [a]) ‚ß∫ (ys ‚à∑ [a]) ‚à∑ [a] where
  '[] ‚ß∫ ys = ys
  (x ': xs) ‚ß∫ ys = x ': (xs ‚ß∫ ys)

-- indices --

data ùïÄ32 (n ‚à∑ T‚Ñï) where
  ùïÄ32 ‚à∑ S‚Ñï32 m ‚Üí m :<: n ‚Üí ùïÄ32 n

-- vectors --

type family ToRepa‚Ñïs (ns ‚à∑ [T‚Ñï]) ‚à∑ ‚òÖ where
  ToRepa‚Ñïs '[] = Repa.Z
  ToRepa‚Ñïs (n ': ns) = ToRepa‚Ñïs ns Repa.:. HS.Int

data Bùïç (ns ‚à∑ [T‚Ñï]) a where
  Bùïç ‚à∑ (Repa.Shape (ToRepa‚Ñïs ns)) ‚áí S‚Ñï32s ns ‚Üí Repa.Array Repa.V (ToRepa‚Ñïs ns) a ‚Üí Bùïç ns a
data Uùïç (ns ‚à∑ [T‚Ñï]) a where
  Uùïç ‚à∑ (Repa.Shape (ToRepa‚Ñïs ns)) ‚áí S‚Ñï32s ns ‚Üí Repa.Array Repa.U (ToRepa‚Ñïs ns) a ‚Üí Uùïç ns a
data Vùïç (ns ‚à∑ [T‚Ñï]) a where
  Vùïç ‚à∑ (Repa.Shape (ToRepa‚Ñïs ns)) ‚áí S‚Ñï32s ns ‚Üí Repa.Array Repa.D (ToRepa‚Ñïs ns) a ‚Üí Vùïç ns a

type ùïÄ32s (ns ‚à∑ [T‚Ñï]) = Sùêø ùïÄ32 ns
type S‚Ñï32s (ns ‚à∑ [T‚Ñï]) = Sùêø S‚Ñï32 ns

toShapeS‚Ñï32s ‚à∑ S‚Ñï32s ns ‚Üí W (Repa.Shape (ToRepa‚Ñïs ns))
toShapeS‚Ñï32s SNil = W
toShapeS‚Ñï32s (_ :&& ns) = with (toShapeS‚Ñï32s ns) W

toRepaS‚Ñï32s ‚à∑ S‚Ñï32s ns ‚Üí ToRepa‚Ñïs ns
toRepaS‚Ñï32s SNil = Repa.Z
toRepaS‚Ñï32s (n :&& ns) = toRepaS‚Ñï32s ns  Repa.:. HS.fromIntegral (unS‚Ñï32 n)

toRepaùïÄ32s ‚à∑ ùïÄ32s ns ‚Üí ToRepa‚Ñïs ns
toRepaùïÄ32s SNil = Repa.Z
toRepaùïÄ32s (ùïÄ32 n _ :&& ns) = toRepaùïÄ32s ns  Repa.:. HS.fromIntegral (unS‚Ñï32 n)

frRepaùïÄ32s ‚à∑ S‚Ñï32s ns ‚Üí ToRepa‚Ñïs ns ‚Üí ùïÄ32s ns
frRepaùïÄ32s SNil Repa.Z = SNil
frRepaùïÄ32s (_ :&& ss) (ns Repa.:. n) = dùïü32 (HS.fromIntegral n) $ \ n' ‚Üí ùïÄ32 n' TRUSTME_LT :&& frRepaùïÄ32s ss ns

-- boxed --

dimBùïç ‚à∑ Bùïç ns a ‚Üí S‚Ñï32s ns
dimBùïç (Bùïç n _) = n

indexBùïç ‚à∑ ùïÄ32s ns ‚Üí Bùïç ns a ‚Üí a
indexBùïç i (Bùïç _ xs) = xs Repa.! toRepaùïÄ32s i

virtBùïç ‚à∑ Bùïç ns a ‚Üí Vùïç ns a
virtBùïç (Bùïç n xs) = Vùïç n $ Repa.delay xs

-- unboxed --

dimUùïç ‚à∑ Uùïç ns a ‚Üí S‚Ñï32s ns
dimUùïç (Uùïç n _) = n

indexUùïç ‚à∑ (Repa.Unbox a) ‚áí ùïÄ32s ns ‚Üí Uùïç ns a ‚Üí a
indexUùïç i (Uùïç _ xs) = xs Repa.! toRepaùïÄ32s i

-- virtual --

dimVùïç ‚à∑ Vùïç ns a ‚Üí S‚Ñï32s ns
dimVùïç (Vùïç n _) = n

indexVùïç ‚à∑ ùïÄ32s ns ‚Üí Vùïç ns a ‚Üí a
indexVùïç i (Vùïç _ xs) = xs Repa.! toRepaùïÄ32s i

makeVùïç ‚à∑ S‚Ñï32s ns ‚Üí (ùïÄ32s ns ‚Üí a) ‚Üí Vùïç ns a
makeVùïç n f = with (toShapeS‚Ñï32s n) $
  Vùïç n $ Repa.fromFunction (toRepaS‚Ñï32s n) $ \ i ‚Üí
    f (frRepaùïÄ32s n i)

concVùïç ‚à∑ Vùïç ns a ‚Üí Bùïç ns a
concVùïç (Vùïç n xs) = Bùïç n $ HS.runIdentity $ Repa.computeP xs

iterVùïç ‚à∑ Vùïç ns a ‚Üí ùêº a
iterVùïç (Vùïç _ xs) = iter $ Repa.toList xs

----------
-- SAFE --
----------

zipWithVùïç ‚à∑ (a ‚Üí b ‚Üí c) ‚Üí Vùïç ns a ‚Üí Vùïç ns b ‚Üí Vùïç ns c
zipWithVùïç f xs ys = makeVùïç (dimVùïç xs) $ \ i ‚Üí f (indexVùïç i xs) (indexVùïç i ys)

transposeVùïç ‚à∑ Vùïç (n‚ÇÅ : n‚ÇÇ : ns) a ‚Üí Vùïç (n‚ÇÇ : n‚ÇÅ : ns) a
transposeVùïç xs =
  let (n‚ÇÅ :&& n‚ÇÇ :&& ns) = dimVùïç xs
  in makeVùïç (n‚ÇÇ :&& n‚ÇÅ :&& ns) $ \ (i‚ÇÇ :&& i‚ÇÅ :&& is) ‚Üí indexVùïç (i‚ÇÅ :&& i‚ÇÇ :&& is) xs

rowVùïç ‚à∑ ùïÄ32 n‚ÇÅ ‚Üí Vùïç (n‚ÇÅ : ns) a ‚Üí Vùïç ns a
rowVùïç i xs =
  let (_ :&& ns) = dimVùïç xs
  in makeVùïç ns $ \ is ‚Üí indexVùïç (i :&& is) xs

colVùïç ‚à∑ ùïÄ32 n‚ÇÇ ‚Üí Vùïç (n‚ÇÅ : n‚ÇÇ : ns) a ‚Üí Vùïç (n‚ÇÅ : ns) a
colVùïç i xs =
  let (n‚ÇÅ :&& _ :&& ns) = dimVùïç xs
  in makeVùïç (n‚ÇÅ :&& ns) $ \ (i‚ÇÅ :&& is) ‚Üí indexVùïç (i‚ÇÅ :&& i :&& is) xs

productVùïç ‚à∑ (Additive a,Times a) ‚áí Vùïç [n‚ÇÅ,n‚ÇÇ] a ‚Üí Vùïç [n‚ÇÇ,n‚ÇÉ] a ‚Üí Vùïç [n‚ÇÅ,n‚ÇÉ] a
productVùïç xs ys =
  let (n‚ÇÅ :&& _  :&& SNil) = dimVùïç xs
      (_  :&& n‚ÇÉ :&& SNil) = dimVùïç ys
  in
  makeVùïç (n‚ÇÅ :&& n‚ÇÉ :&& SNil) $ \ (i‚ÇÅ :&& i‚ÇÉ :&& SNil) ‚Üí
    let v‚ÇÅ = rowVùïç i‚ÇÅ xs
        v‚ÇÇ = colVùïç i‚ÇÉ ys
    in sum $ iterVùïç $ zipWithVùïç (√ó) v‚ÇÅ v‚ÇÇ
