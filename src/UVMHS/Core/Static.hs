module UVMHS.Core.Static where

import UVMHS.Core.Init
import UVMHS.Core.Classes
import UVMHS.Core.Data

import qualified Prelude as HS
import qualified Data.Proxy as HS
import qualified Data.Type.Equality as HS

import qualified GHC.TypeLits as HS

infix 4 ‚âç,‚â∫,‚âº,‚âª,<,‚â§

-- type literals: nat and string --

type family (a ‚à∑ k) ‚â° (b ‚à∑ k) where
  a ‚â° a = 'True
  _ ‚â° _ = 'False

type family (x ‚à∑ ùîπ) ‚©î (y ‚à∑ ùîπ) where
  'False ‚©î x = x
  x ‚©î 'False = x
  'True ‚©î 'True = 'True

type family (x ‚à∑ ùîπ) ‚©ì (y ‚à∑ ùîπ) where
  'True ‚©ì x = x
  x ‚©ì 'True = x
  'False ‚©ì 'False = 'False

type ùêç = HS.Nat
type ùêí = HS.Symbol

type (m ‚à∑ ùêç) + (n ‚à∑ ùêç) = m HS.+ n
type (m ‚à∑ ùêç) √ó (n ‚à∑ ùêç) = m HS.* n
type (m ‚à∑ ùêç) ^ (n ‚à∑ ùêç) = m HS.^ n
type (m ‚à∑ ùêç) - (n ‚à∑ ùêç) = m HS.- n
type (m ‚à∑ ùêç) / (n ‚à∑ ùêç) = m `HS.Div` n
type (m ‚à∑ ùêç) % (n ‚à∑ ùêç) = m `HS.Mod` n
type Log2 (n ‚à∑ ùêç) = HS.Log2 n

type (m ‚à∑ ùêç) ‚ãö (n ‚à∑ ùêç) = HS.CmpNat m n

type (m ‚à∑ ùêç) ‚â∫  (n ‚à∑ ùêç) = (m ‚ãö n) ‚â° 'LT ~ 'True
type (m ‚à∑ ùêç) ‚âç  (n ‚à∑ ùêç) = (m ‚ãö n) ‚â° 'EQ ~ 'True
type (m ‚à∑ ùêç) ‚âª  (n ‚à∑ ùêç) = (m ‚ãö n) ‚â° 'GT ~ 'True

type (m ‚à∑ ùêç) ‚âº (n ‚à∑ ùêç) = ((m ‚ãö n) ‚â° 'LT) ‚©î ((m ‚ãö n ‚â° 'EQ)) ~ 'True

wnlt_UNSAFE ‚à∑ ‚àÄ m n. P m ‚Üí P n ‚Üí W (m ‚â∫ n)
wnlt_UNSAFE _ _ = weq_UNSAFE @(m ‚ãö n ‚â° 'LT) @'True P P

wneq_UNSAFE ‚à∑ ‚àÄ m n. P m ‚Üí P n ‚Üí W (m ‚âç n)
wneq_UNSAFE _ _ = weq_UNSAFE @(m ‚ãö n ‚â° 'EQ) @'True P P

wngt_UNSAFE ‚à∑ ‚àÄ m n. P m ‚Üí P n ‚Üí W (m ‚âª n)
wngt_UNSAFE _ _ = weq_UNSAFE @(m ‚ãö n ‚â° 'GT) @'True P P

wnlte_UNSAFE ‚à∑ ‚àÄ m n. P m ‚Üí P n ‚Üí W (m ‚âº n)
wnlte_UNSAFE _ _ = weq_UNSAFE @((m ‚ãö n ‚â° 'LT) ‚©î (m ‚ãö n ‚â° 'EQ)) @'True P P

data (m ‚à∑ ùêç) < (n ‚à∑ ùêç) where
  W_LT ‚à∑ (m ‚â∫ n) ‚áí m < n

withLT ‚à∑ m < n ‚Üí ((m ‚â∫ n) ‚áí a) ‚Üí a
withLT W_LT x = x

nlt_UNSAFE ‚à∑ ‚àÄ m n. P m ‚Üí P n ‚Üí m < n
nlt_UNSAFE _ _ = with (wnlt_UNSAFE @m @n P P) W_LT

instance Transitive (<) where
  _ ‚äö _ = nlt_UNSAFE P P

data (m ‚à∑ ùêç) ‚â§ (n ‚à∑ ùêç) where
  W_LTE ‚à∑ (m ‚âº n) ‚áí m ‚â§ n

withLTE ‚à∑ m ‚â§ n ‚Üí ((m ‚âº n) ‚áí a) ‚Üí a
withLTE W_LTE x = x

nlte_UNSAFE ‚à∑ ‚àÄ m n. P m ‚Üí P n ‚Üí m ‚â§ n
nlte_UNSAFE _ _ = with (wnlte_UNSAFE @m @n P P) W_LTE

instance Reflexive (‚â§) where
  refl = W_LTE
instance Transitive (‚â§) where
  _ ‚äö _ = nlte_UNSAFE P P
instance Category (‚â§)

irreflLT ‚à∑ n < n ‚Üí Void
irreflLT _ = void_UNSAFE

weakenLT ‚à∑ n‚ÇÅ < n‚ÇÇ ‚Üí n‚ÇÅ ‚â§ n‚ÇÇ
weakenLT _ = nlte_UNSAFE P P

succLT ‚à∑ n‚ÇÅ < n‚ÇÇ ‚Üí n‚ÇÅ+1 ‚â§ n‚ÇÇ
succLT _ = nlte_UNSAFE P P

succLTE ‚à∑ n‚ÇÅ ‚â§ n‚ÇÇ ‚Üí n‚ÇÅ < n‚ÇÇ+1
succLTE _ = nlt_UNSAFE P P

(‚äö‚ôØ) ‚à∑ n‚ÇÅ ‚â§ n‚ÇÇ ‚Üí n‚ÇÇ < n‚ÇÉ ‚Üí n‚ÇÅ < n‚ÇÉ
_ ‚äö‚ôØ _ = nlt_UNSAFE P P

(‚ôØ‚äö) ‚à∑ n‚ÇÅ < n‚ÇÇ ‚Üí n‚ÇÇ ‚â§ n‚ÇÉ ‚Üí n‚ÇÅ < n‚ÇÉ
_ ‚ôØ‚äö _ = nlt_UNSAFE P P

-- singleton literals: nat, nat64 and string --

newtype ‚ÑïS   (n ‚à∑ ùêç) = ‚ÑïS_UNSAFE   { un‚ÑïS   ‚à∑ ‚Ñï   }
newtype ‚Ñï64S (n ‚à∑ ùêç) = ‚Ñï64S_UNSAFE { un‚Ñï64S ‚à∑ ‚Ñï64 }
newtype ùïäS   (s ‚à∑ ùêí) = ùïäS_UNSAFE   { unùïäS   ‚à∑ ùïä   }

class (HS.KnownNat n)    ‚áí ùí©   (n ‚à∑ ùêç) where reify‚Ñï   ‚à∑ P n ‚Üí ‚Ñï
class (HS.KnownNat n)    ‚áí ùí©64 (n ‚à∑ ùêç) where reify‚Ñï64 ‚à∑ P n ‚Üí ‚Ñï64
class (HS.KnownSymbol s) ‚áí ùíÆ   (s ‚à∑ ùêí) where reifyùïä   ‚à∑ P s ‚Üí ùïä

instance (HS.KnownNat n)    ‚áí ùí©   (n ‚à∑ ùêç) where reify‚Ñï   _ = natŒ©   $ HS.natVal    @n P
instance (HS.KnownNat n)    ‚áí ùí©64 (n ‚à∑ ùêç) where reify‚Ñï64 _ = natŒ©64 $ HS.natVal    @n P
instance (HS.KnownSymbol s) ‚áí ùíÆ   (s ‚à∑ ùêí) where reifyùïä   _ = string $ HS.symbolVal @s P

compareùêç ‚à∑ ‚àÄ (a ‚à∑ ùêç) (b ‚à∑ ùêç). (ùí© a,ùí© b) ‚áí ùëÇ (a ‚âü b)
compareùêç = case HS.sameNat (HS.Proxy @a) (HS.Proxy @b) of
  HS.Nothing ‚Üí None
  HS.Just HS.Refl ‚Üí Some Refl

ùïüs ‚à∑ ‚àÄ n. (ùí© n) ‚áí ‚ÑïS n
ùïüs = ‚ÑïS_UNSAFE $ reify‚Ñï @n P

ùïüd ‚à∑ ‚Ñï ‚Üí (‚àÄ n. (ùí© n) ‚áí ‚ÑïS n ‚Üí a) ‚Üí a
ùïüd n f = case HS.someNatVal $ int n of
  HS.Nothing ‚Üí error "impossible"
  HS.Just (HS.SomeNat (HS.Proxy ‚à∑ HS.Proxy n)) ‚Üí f @n $ ‚ÑïS_UNSAFE n

ùïü64s ‚à∑ ‚àÄ n. (ùí©64 n) ‚áí ‚Ñï64S n
ùïü64s = ‚Ñï64S_UNSAFE $ reify‚Ñï64 @n P

ùïü64d ‚à∑ ‚Ñï64 ‚Üí (‚àÄ n. (ùí©64 n) ‚áí ‚Ñï64S n ‚Üí a) ‚Üí a
ùïü64d n f = case HS.someNatVal $ int n of
  HS.Nothing ‚Üí error "impossible"
  HS.Just (HS.SomeNat (HS.Proxy ‚à∑ HS.Proxy n)) ‚Üí f @n $ ‚Ñï64S_UNSAFE n

ùï§s ‚à∑ ‚àÄ s. (HS.KnownSymbol s) ‚áí ùïäS s
ùï§s = ùïäS_UNSAFE $ reifyùïä @s P

ùï§sd ‚à∑ ùïä ‚Üí (‚àÄ s. (ùíÆ s) ‚áí ùïäS s ‚Üí a) ‚Üí a
ùï§sd s f = case HS.someSymbolVal $ tohsChars s of
  HS.SomeSymbol (HS.Proxy ‚à∑ HS.Proxy s) ‚Üí f $ ùïäS_UNSAFE @s s

-- heterogeneous lists --

-- infixr 8 :&&

type family (xs ‚à∑ [a]) ‚ß∫ (ys ‚à∑ [a]) ‚à∑ [a] where
  '[] ‚ß∫ ys = ys
  (x ': xs) ‚ß∫ ys = x ': (xs ‚ß∫ ys)

type family Sum (ns ‚à∑ [ùêç]) where
  Sum '[] = 0
  Sum (n ': ns) = n + Sum ns

type family Prod (ns ‚à∑ [ùêç]) where
  Prod '[] = 1
  Prod (n ': ns) = n √ó Prod ns

-- data ùêøS (is ‚à∑ [i]) (c ‚à∑ i ‚Üí Constraint) (a ‚à∑ i ‚Üí ‚òÖ) ‚à∑ ‚òÖ where
--   NilS ‚à∑ ùêøS '[] c a
--   (:&&) ‚à∑ (c x) ‚áí a x ‚Üí ùêøS xs c a ‚Üí ùêøS (x ': xs) c a
--
-- mapùêøS ‚à∑ ‚àÄ i (xs ‚à∑ [i]) (c ‚à∑ i ‚Üí Constraint) (a ‚à∑ i ‚Üí ‚òÖ) (b ‚à∑ i ‚Üí ‚òÖ) . (‚àÄ (x ‚à∑ i). a x ‚Üí b x) ‚Üí ùêøS xs c a ‚Üí ùêøS xs c b
-- mapùêøS f = \case
--   NilS ‚Üí NilS
--   x :&& xs ‚Üí f x :&& mapùêøS f xs
--
-- appendùêøS ‚à∑ ùêøS xs c a ‚Üí ùêøS ys c a ‚Üí ùêøS (xs ‚ß∫ ys) c a
-- appendùêøS xs ys = case xs of
--   NilS ‚Üí ys
--   x :&& xs' ‚Üí x :&& appendùêøS xs' ys
--
-- iterùêøS ‚à∑ ‚àÄ i (xs ‚à∑ [i]) (c ‚à∑ i ‚Üí Constraint) (a ‚à∑ i ‚Üí ‚òÖ) (b ‚à∑ ‚òÖ). (‚àÄ (x ‚à∑ i). (c x) ‚áí a x ‚Üí b) ‚Üí ùêøS xs c a ‚Üí ùêº b
-- iterùêøS f = \case
--   NilS ‚Üí null
--   x :&& xs ‚Üí single (f x) ‚ß∫ iterùêøS f xs

type family AllC (c ‚à∑ a ‚Üí Constraint) (xs ‚à∑ [a]) ‚à∑ Constraint where
  AllC _ '[] = ()
  AllC c (x ': xs) = (c x,AllC c xs)

-- class (AllC c xs) ‚áí AllCC c xs
-- instance (AllC c xs) ‚áí AllCC c xs

-- instance (‚àÄ x. (c x) ‚áí Plus (a x)) ‚áí Plus (ùêøS xs c a) where
--   NilS + NilS = NilS
--   x :&& xs + y :&& ys = (x + y) :&& (xs + ys)
--
-- instance (‚àÄ x. (c x) ‚áí Times (a x)) ‚áí Times (ùêøS xs c a) where
--   NilS √ó NilS = NilS
--   x :&& xs √ó y :&& ys = (x √ó y) :&& (xs √ó ys)

data Spine ‚à∑ [a] ‚Üí ‚òÖ where
  NilSpine ‚à∑ Spine '[]
  ConsSpine ‚à∑ Spine xs ‚Üí Spine (x ': xs)

class HasSpine xs where spine ‚à∑ Spine xs

instance HasSpine '[] where spine = NilSpine
instance (HasSpine xs) ‚áí HasSpine (x ': xs) where spine = ConsSpine spine

-- zeroùêøS ‚à∑ (AllC c xs,‚àÄ x. (c x) ‚áí Zero (a x)) ‚áí Spine xs ‚Üí ùêøS xs c a
-- zeroùêøS = \case
--   NilSpine ‚Üí NilS
--   ConsSpine sp ‚Üí zero :&& zeroùêøS sp
--
-- instance (HasSpine xs,AllC c xs,‚àÄ x. (c x) ‚áí Zero (a x)) ‚áí Zero (ùêøS xs c a) where
--   zero = zeroùêøS spine
--
-- type family PrependMany (xs ‚à∑ [a]) (xxs ‚à∑ [[a]]) ‚à∑ [[a]] where
--   PrependMany _ '[] = '[]
--   PrependMany xs (xs' ': xss) = (xs ‚ß∫ xs') ': PrependMany xs xss

-- indices --

newtype ùïÄ64 (n ‚à∑ ùêç) = ùïÄ64_UNSAFE { unùïÄ64 ‚à∑ ‚Ñï64 }

ùïö64 ‚à∑ ‚àÄ m n. (m ‚â∫ n) ‚áí ‚Ñï64S m ‚Üí ùïÄ64 n
ùïö64 m = ùïÄ64_UNSAFE $ un‚Ñï64S m

ùïö64d ‚à∑ ‚àÄ n. (ùí©64 n) ‚áí ‚Ñï64 ‚Üí ùëÇ (ùïÄ64 n)
ùïö64d m =
  if m < un‚Ñï64S (ùïü64s @n)
  then Some $ ùïÄ64_UNSAFE m
  else None

ùïü64di ‚à∑ ‚àÄ n a. ùïÄ64 n ‚Üí (‚àÄ m. (m ‚â∫ n) ‚áí ‚Ñï64S m ‚Üí a) ‚Üí a
ùïü64di i f = ùïü64d (unùïÄ64 i) HS.$ \ (m ‚à∑ ‚Ñï64S m) ‚Üí with (wnlt_UNSAFE @m @n P P) HS.$ f m

uptoùïÄ64 ‚à∑ ‚àÄ n. (ùí©64 n) ‚áí ‚Ñï64S n ‚Üí ùêºS n (ùïÄ64 n)
uptoùïÄ64 n = ùêºS_UNSAFE $ map ùïÄ64_UNSAFE $ upto $ un‚Ñï64S n

wkùïÄ64 ‚à∑ (m ‚âº n) ‚áí ùïÄ64 m ‚Üí ùïÄ64 n
wkùïÄ64 i = ùïÄ64_UNSAFE $ unùïÄ64 i

-- static iterators --

newtype ùêºS (n ‚à∑ ùêç) a = ùêºS_UNSAFE
  { unùêºS ‚à∑ ùêº a
  } deriving (Show)

instance Functor (ùêºS n) where map f xs = ùêºS_UNSAFE $ map f $ unùêºS xs
instance ToIter a (ùêºS n a) where iter = unùêºS

-- class ToIterS n a t | t ‚Üí n,t ‚Üí a where iterS ‚à∑ t ‚Üí ùêºS n a

-- classes --

-- infixl 5 +‚ôÆ
-- infixl 6 √ó‚ôÆ
--
-- class ZeroS  t where zeroS ‚à∑ t 0
-- class OneS   t where oneS  ‚à∑ t 1
-- class PlusS  t where (+‚ôÆ)  ‚à∑ t m ‚Üí t n ‚Üí t (m + n)
-- class TimesS t where (√ó‚ôÆ)  ‚à∑ t m ‚Üí t n ‚Üí t (m √ó n)
--
-- instance ZeroS  ‚Ñï64S where zeroS  = ùïü64s @0
-- instance OneS   ‚Ñï64S where oneS   = ùïü64s @1
-- instance PlusS  ‚Ñï64S where m +‚ôÆ n = ‚Ñï64S_UNSAFE $ un‚Ñï64S m + un‚Ñï64S n
-- instance TimesS ‚Ñï64S where m √ó‚ôÆ n = ‚Ñï64S_UNSAFE $ un‚Ñï64S m √ó un‚Ñï64S n

class NullS t where
  nullS ‚à∑ t 0 a
class SingleS t where
  ùî¢ ‚à∑ a ‚Üí t 1 a
class AppendS t where
  (‚ß∫‚ôÆ) ‚à∑ t n‚ÇÅ a ‚Üí t n‚ÇÇ a ‚Üí t (n‚ÇÅ + n‚ÇÇ) a
-- class AppendSL t where
--   (‚ß∫‚ô≠) ‚à∑ t ns‚ÇÅ a ‚Üí t ns‚ÇÇ a ‚Üí t (ns‚ÇÅ ‚ß∫ ns‚ÇÇ) a

instance NullS ùêºS where nullS = ùêºS_UNSAFE null
instance SingleS ùêºS where ùî¢ = ùêºS_UNSAFE ‚àò single
instance AppendS ùêºS where xs ‚ß∫‚ôÆ ys = ùêºS_UNSAFE $ unùêºS xs ‚ß∫ unùêºS ys
-- instance AppendSL (ùêøS c) where (‚ß∫‚ô≠) = appendùêøS
